// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507200643_DriverLicenses3")]
    partial class DriverLicenses3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicenses", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "80",
                            Country = "Vanuatu",
                            Locality = "East Kamrenbury",
                            LocalityCode = "65513-6743",
                            Number = "4546",
                            Street = "Veum Corners"
                        },
                        new
                        {
                            IdAddress = "81",
                            Country = "United States Minor Outlying Islands",
                            Locality = "Goldaview",
                            LocalityCode = "69306",
                            Number = "8922",
                            Street = "Christiansen Trail"
                        },
                        new
                        {
                            IdAddress = "82",
                            Country = "Palau",
                            Locality = "North Candida",
                            LocalityCode = "47862-6080",
                            Number = "98023",
                            Street = "Jacobs Centers"
                        },
                        new
                        {
                            IdAddress = "83",
                            Country = "Western Sahara",
                            Locality = "Jacobsonborough",
                            LocalityCode = "53410",
                            Number = "578",
                            Street = "Rempel Isle"
                        },
                        new
                        {
                            IdAddress = "84",
                            Country = "Mauritania",
                            Locality = "Jazminport",
                            LocalityCode = "22285-9526",
                            Number = "6809",
                            Street = "Maximus Isle"
                        },
                        new
                        {
                            IdAddress = "85",
                            Country = "Palestinian Territory",
                            Locality = "Lake Vesta",
                            LocalityCode = "83235",
                            Number = "3903",
                            Street = "Enrique Way"
                        },
                        new
                        {
                            IdAddress = "86",
                            Country = "French Polynesia",
                            Locality = "Eberthaven",
                            LocalityCode = "11484-4723",
                            Number = "84695",
                            Street = "Casper Way"
                        },
                        new
                        {
                            IdAddress = "87",
                            Country = "Jordan",
                            Locality = "West Efrenside",
                            LocalityCode = "77501",
                            Number = "2830",
                            Street = "Okuneva Rue"
                        },
                        new
                        {
                            IdAddress = "88",
                            Country = "Niger",
                            Locality = "Johnsonmouth",
                            LocalityCode = "26046",
                            Number = "1261",
                            Street = "Treva Path"
                        },
                        new
                        {
                            IdAddress = "89",
                            Country = "Saint Vincent and the Grenadines",
                            Locality = "West Aliton",
                            LocalityCode = "85145",
                            Number = "355",
                            Street = "Stiedemann Locks"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "90",
                            Email = "Merle68@hotmail.com",
                            FirstName = "Sierra",
                            Name = "Huels",
                            Password = "N54YLDv4vk",
                            CompanyAddressId = "80",
                            CompanyName = "Rippin Inc",
                            Number = "650-814-8541"
                        },
                        new
                        {
                            Matricule = "91",
                            Email = "Brooklyn43@yahoo.com",
                            FirstName = "Jensen",
                            Name = "Herzog",
                            Password = "3UAyNKiM1w",
                            CompanyAddressId = "81",
                            CompanyName = "Steuber Group",
                            Number = "268-416-8162"
                        },
                        new
                        {
                            Matricule = "92",
                            Email = "Michale_Lakin@yahoo.com",
                            FirstName = "Tabitha",
                            Name = "Bode",
                            Password = "z2nzMrBbZ7",
                            CompanyAddressId = "82",
                            CompanyName = "Hermiston, Kiehn and Becker",
                            Number = "497-455-9856"
                        },
                        new
                        {
                            Matricule = "93",
                            Email = "Eleanore_Watsica@hotmail.com",
                            FirstName = "Selmer",
                            Name = "Stracke",
                            Password = "mHs7Gy5EZN",
                            CompanyAddressId = "83",
                            CompanyName = "Larson, Crona and Schumm",
                            Number = "459-773-5661"
                        },
                        new
                        {
                            Matricule = "94",
                            Email = "Lindsey.Hansen30@gmail.com",
                            FirstName = "Lenora",
                            Name = "Nienow",
                            Password = "dD3nQ5PxdM",
                            CompanyAddressId = "84",
                            CompanyName = "Abshire - Bartoletti",
                            Number = "544-558-8428"
                        },
                        new
                        {
                            Matricule = "95",
                            Email = "Immanuel44@hotmail.com",
                            FirstName = "Johnpaul",
                            Name = "Runte",
                            Password = "Of4CcdGtNI",
                            CompanyAddressId = "85",
                            CompanyName = "Prosacco - Kirlin",
                            Number = "341-356-2791"
                        },
                        new
                        {
                            Matricule = "96",
                            Email = "Royal82@yahoo.com",
                            FirstName = "Carmella",
                            Name = "Stamm",
                            Password = "m44wiL7lbj",
                            CompanyAddressId = "86",
                            CompanyName = "Bode and Sons",
                            Number = "279-589-8764"
                        },
                        new
                        {
                            Matricule = "97",
                            Email = "Gennaro_Schuppe13@hotmail.com",
                            FirstName = "Rita",
                            Name = "Zemlak",
                            Password = "aFCTYUddgV",
                            CompanyAddressId = "87",
                            CompanyName = "Bosco, Dare and Medhurst",
                            Number = "611-788-8703"
                        },
                        new
                        {
                            Matricule = "98",
                            Email = "Leonel_Skiles42@yahoo.com",
                            FirstName = "Floyd",
                            Name = "Funk",
                            Password = "Ro_T4WvUpR",
                            CompanyAddressId = "88",
                            CompanyName = "Gerhold - Auer",
                            Number = "377-465-1707"
                        },
                        new
                        {
                            Matricule = "99",
                            Email = "Golda.Schamberger@yahoo.com",
                            FirstName = "Kelly",
                            Name = "Heidenreich",
                            Password = "e7kEdrsWkj",
                            CompanyAddressId = "89",
                            CompanyName = "Kihn, Harris and Hand",
                            Number = "661-716-9467"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Mallie.Ortiz67@gmail.com",
                            FirstName = "Mack",
                            Name = "Abshire",
                            Password = "ioqNBUwDMR",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Frankie_Rau@yahoo.com",
                            FirstName = "Jamarcus",
                            Name = "Torp",
                            Password = "SmIMWpRJAJ",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Lucious.Oberbrunner40@hotmail.com",
                            FirstName = "Jessyca",
                            Name = "Ziemann",
                            Password = "JX0k0fzfRd",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Mekhi.Hagenes@gmail.com",
                            FirstName = "Ike",
                            Name = "Hilpert",
                            Password = "staHr9lZZT",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Lyda75@gmail.com",
                            FirstName = "Anais",
                            Name = "Hills",
                            Password = "brvVEQQWPV",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Cordelia.Keebler96@gmail.com",
                            FirstName = "Destini",
                            Name = "Adams",
                            Password = "pLstG1zsjX",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Sage.Hettinger@yahoo.com",
                            FirstName = "Delta",
                            Name = "Metz",
                            Password = "lg7dM5XvJx",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Sabryna.Buckridge88@yahoo.com",
                            FirstName = "Garth",
                            Name = "McDermott",
                            Password = "OH3aupj5rs",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Emery.Sipes@hotmail.com",
                            FirstName = "Rosamond",
                            Name = "Farrell",
                            Password = "XSn__YAyGb",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Shanel4@yahoo.com",
                            FirstName = "Lydia",
                            Name = "Wisoky",
                            Password = "WuLiWyZZSd",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "51",
                            Email = "Kaitlin.Hermann51@yahoo.com",
                            FirstName = "Adan",
                            Name = "Yundt",
                            Password = "m_nGxOnoBN"
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Jaunita.White@gmail.com",
                            FirstName = "Jackson",
                            Name = "Mills",
                            Password = "xCFjBljehz"
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Hailey_Hahn@gmail.com",
                            FirstName = "Kristian",
                            Name = "Weissnat",
                            Password = "Ax1jYrugDh"
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Gonzalo98@hotmail.com",
                            FirstName = "Fiona",
                            Name = "Hermiston",
                            Password = "n7cn9r1F5O"
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Charlotte48@hotmail.com",
                            FirstName = "Adam",
                            Name = "Hegmann",
                            Password = "wjXWoqHmQn"
                        },
                        new
                        {
                            Matricule = "61",
                            Email = "Rhea.Connelly38@hotmail.com",
                            FirstName = "Demetrius",
                            Name = "Gleichner",
                            Password = "CZL6NzI2RR"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Jerry_Pouros@yahoo.com",
                            FirstName = "Autumn",
                            Name = "Rippin",
                            Password = "42mi7Ifgy1"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Jessy.Okuneva33@yahoo.com",
                            FirstName = "Nicholas",
                            Name = "Miller",
                            Password = "zyCghgHdcj"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Maxine.Wolf45@gmail.com",
                            FirstName = "Krista",
                            Name = "Schiller",
                            Password = "ylm7bsHPzP"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Janelle.Christiansen@hotmail.com",
                            FirstName = "Anabel",
                            Name = "Kris",
                            Password = "yMG2tmzzpm"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });
#pragma warning restore 612, 618
        }
    }
}
