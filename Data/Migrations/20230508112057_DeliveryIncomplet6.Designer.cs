// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508112057_DeliveryIncomplet6")]
    partial class DeliveryIncomplet6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoadAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnloadingAddressId")
                        .HasColumnType("int");

                    b.HasKey("IdAddress");

                    b.HasIndex("LoadAddressId")
                        .IsUnique()
                        .HasFilter("[LoadAddressId] IS NOT NULL");

                    b.HasIndex("UnloadingAddressId")
                        .IsUnique()
                        .HasFilter("[UnloadingAddressId] IS NOT NULL");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "90",
                            Country = "Australia",
                            Locality = "Siennafort",
                            LocalityCode = "17340",
                            Number = "9540",
                            Street = "Tyra Cape"
                        },
                        new
                        {
                            IdAddress = "91",
                            Country = "Virgin Islands, British",
                            Locality = "Stantonport",
                            LocalityCode = "12894-8358",
                            Number = "8447",
                            Street = "Clemmie Loaf"
                        },
                        new
                        {
                            IdAddress = "92",
                            Country = "Dominican Republic",
                            Locality = "Ashahaven",
                            LocalityCode = "99743-6360",
                            Number = "84627",
                            Street = "Kovacek Club"
                        },
                        new
                        {
                            IdAddress = "93",
                            Country = "Ukraine",
                            Locality = "Langborough",
                            LocalityCode = "25046",
                            Number = "6997",
                            Street = "McCullough Grove"
                        },
                        new
                        {
                            IdAddress = "94",
                            Country = "Palestinian Territory",
                            Locality = "East Marciamouth",
                            LocalityCode = "82891-6062",
                            Number = "53459",
                            Street = "Laurie Corners"
                        },
                        new
                        {
                            IdAddress = "95",
                            Country = "Republic of Korea",
                            Locality = "Corneliusview",
                            LocalityCode = "19953",
                            Number = "7445",
                            Street = "Conroy Overpass"
                        },
                        new
                        {
                            IdAddress = "96",
                            Country = "Nauru",
                            Locality = "Wadeshire",
                            LocalityCode = "97389",
                            Number = "20767",
                            Street = "Gutmann Extensions"
                        },
                        new
                        {
                            IdAddress = "97",
                            Country = "Andorra",
                            Locality = "Aglaeside",
                            LocalityCode = "12966",
                            Number = "383",
                            Street = "Kessler Plain"
                        },
                        new
                        {
                            IdAddress = "98",
                            Country = "Saint Helena",
                            Locality = "Mantebury",
                            LocalityCode = "88531-6222",
                            Number = "23051",
                            Street = "Hegmann Grove"
                        },
                        new
                        {
                            IdAddress = "99",
                            Country = "Cocos (Keeling) Islands",
                            Locality = "Nehamouth",
                            LocalityCode = "67253-1020",
                            Number = "68161",
                            Street = "Thiel Extension"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDispatcher")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdVehicule")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoadAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnloadingAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnloadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDispatcher");

                    b.HasIndex("IdDriver");

                    b.HasIndex("IdVehicule");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "X2UZT04BSUSZ92665",
                            Brand = "Mini",
                            IdLicenses = 2,
                            Model = "Silverado",
                            Payload = 29000
                        },
                        new
                        {
                            Plate = "6A9LH2QG4UQF26306",
                            Brand = "Ford",
                            IdLicenses = 3,
                            Model = "Spyder",
                            Payload = 22000
                        },
                        new
                        {
                            Plate = "NPPMV3YSCITE36620",
                            Brand = "Tesla",
                            IdLicenses = 1,
                            Model = "Fortwo",
                            Payload = 15000
                        },
                        new
                        {
                            Plate = "HAD4QHODK4RJ80527",
                            Brand = "Fiat",
                            IdLicenses = 1,
                            Model = "Spyder",
                            Payload = 15000
                        },
                        new
                        {
                            Plate = "E6XJ0U58QCVV69017",
                            Brand = "Maserati",
                            IdLicenses = 3,
                            Model = "LeBaron",
                            Payload = 33000
                        },
                        new
                        {
                            Plate = "G8X2IUPB1KPV11836",
                            Brand = "Toyota",
                            IdLicenses = 1,
                            Model = "Land Cruiser",
                            Payload = 19000
                        },
                        new
                        {
                            Plate = "ODZMJINVI0C078483",
                            Brand = "Dodge",
                            IdLicenses = 3,
                            Model = "Aventador",
                            Payload = 22000
                        },
                        new
                        {
                            Plate = "D58D2GU3EBUW83916",
                            Brand = "Aston Martin",
                            IdLicenses = 1,
                            Model = "1",
                            Payload = 4000
                        },
                        new
                        {
                            Plate = "VE4BS6JS6VB756830",
                            Brand = "Ferrari",
                            IdLicenses = 2,
                            Model = "Accord",
                            Payload = 15000
                        },
                        new
                        {
                            Plate = "AU778B6PJHNZ88743",
                            Brand = "Mercedes Benz",
                            IdLicenses = 1,
                            Model = "Roadster",
                            Payload = 5000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Rosario.Tromp@hotmail.com",
                            FirstName = "Gene",
                            Name = "Larkin",
                            Password = "qSeVkKO1nn",
                            CompanyAddressId = "90",
                            CompanyName = "Bahringer, Lakin and Rau",
                            Number = "888-805-2530"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Ford67@hotmail.com",
                            FirstName = "Lavada",
                            Name = "Heathcote",
                            Password = "pDFn0gPuOX",
                            CompanyAddressId = "91",
                            CompanyName = "Padberg, Kshlerin and Blick",
                            Number = "257-287-4774"
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Sam.Hagenes67@gmail.com",
                            FirstName = "Clay",
                            Name = "Bruen",
                            Password = "0Em9ziD0lX",
                            CompanyAddressId = "92",
                            CompanyName = "Douglas, Dickens and Runolfsson",
                            Number = "420-901-7710"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Dillon99@yahoo.com",
                            FirstName = "Geraldine",
                            Name = "Stark",
                            Password = "WcR4uPWQz1",
                            CompanyAddressId = "93",
                            CompanyName = "Baumbach and Sons",
                            Number = "228-399-6120"
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Yvette.Gutkowski47@gmail.com",
                            FirstName = "Wilhelm",
                            Name = "Homenick",
                            Password = "Vr3pWROTrm",
                            CompanyAddressId = "94",
                            CompanyName = "Cummings - Stamm",
                            Number = "743-476-9548"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Harold_Zieme@hotmail.com",
                            FirstName = "Dion",
                            Name = "Goyette",
                            Password = "AHuOoUmyoY",
                            CompanyAddressId = "95",
                            CompanyName = "Halvorson, Koelpin and Altenwerth",
                            Number = "572-251-4812"
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Felipe62@yahoo.com",
                            FirstName = "Consuelo",
                            Name = "Zieme",
                            Password = "UiUOW9_B5i",
                            CompanyAddressId = "96",
                            CompanyName = "Kuhn - Mohr",
                            Number = "634-767-0995"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Josiah_Bergnaum@gmail.com",
                            FirstName = "Tom",
                            Name = "Ankunding",
                            Password = "DAiWHKXT31",
                            CompanyAddressId = "97",
                            CompanyName = "Wiza - Fisher",
                            Number = "733-449-5227"
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Berta.Barton85@yahoo.com",
                            FirstName = "Lavinia",
                            Name = "Stanton",
                            Password = "UFCl4asu19",
                            CompanyAddressId = "98",
                            CompanyName = "Zemlak, Lemke and Powlowski",
                            Number = "294-518-4196"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Electa7@gmail.com",
                            FirstName = "Ellsworth",
                            Name = "Hilpert",
                            Password = "LRKPRoeZUM",
                            CompanyAddressId = "99",
                            CompanyName = "Bradtke Inc",
                            Number = "504-953-3710"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Leda_Langosh73@yahoo.com",
                            FirstName = "Ebba",
                            Name = "Wunsch",
                            Password = "KbdvQU8pxw",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Benjamin86@hotmail.com",
                            FirstName = "Cesar",
                            Name = "Homenick",
                            Password = "QEH1L3IKlN",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Faye_Kihn46@hotmail.com",
                            FirstName = "Dameon",
                            Name = "Streich",
                            Password = "9b0FfN5vDE",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Paxton12@gmail.com",
                            FirstName = "Daisy",
                            Name = "Keebler",
                            Password = "cikM7WJmop",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Lorenza.Schaden@yahoo.com",
                            FirstName = "Audrey",
                            Name = "Grady",
                            Password = "GCagCPqt0R",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Niko_Turcotte@gmail.com",
                            FirstName = "Gregoria",
                            Name = "DuBuque",
                            Password = "96uAFQY1ag",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Ward_Wunsch@hotmail.com",
                            FirstName = "Genesis",
                            Name = "Goldner",
                            Password = "qmMu34etHC",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Eulalia44@yahoo.com",
                            FirstName = "Hazle",
                            Name = "Powlowski",
                            Password = "qTSGulnZwh",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Juliana.Robel@hotmail.com",
                            FirstName = "Jaylin",
                            Name = "Kuphal",
                            Password = "D1JapCrAmZ",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Elmo.Stiedemann29@gmail.com",
                            FirstName = "Caleigh",
                            Name = "Haag",
                            Password = "uW6EBuwEBk",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "61",
                            Email = "Edwardo_Boyle@gmail.com",
                            FirstName = "Marvin",
                            Name = "Maggio",
                            Password = "f9Z9OxUIZl"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Edyth_Mills40@gmail.com",
                            FirstName = "Daniella",
                            Name = "Legros",
                            Password = "3nxsZVqpBq"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Eusebio.Dibbert73@gmail.com",
                            FirstName = "Boris",
                            Name = "Nikolaus",
                            Password = "OybgjNnunD"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Jeffery28@yahoo.com",
                            FirstName = "Marlee",
                            Name = "Olson",
                            Password = "EULzaTI6DN"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Deon.Pfeffer45@hotmail.com",
                            FirstName = "Alexandria",
                            Name = "Lowe",
                            Password = "0qEpDRrMQp"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Earline_Aufderhar@yahoo.com",
                            FirstName = "Tessie",
                            Name = "Kerluke",
                            Password = "erkA9TFY1n"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Juwan.Hackett94@gmail.com",
                            FirstName = "Jada",
                            Name = "Collier",
                            Password = "aT5n0CRbLo"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Vergie_MacGyver10@gmail.com",
                            FirstName = "Sherwood",
                            Name = "Friesen",
                            Password = "j1VKkZI5ox"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Augustus43@yahoo.com",
                            FirstName = "Blair",
                            Name = "Ebert",
                            Password = "0Qa1i4ycAi"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Rhea_Breitenberg@yahoo.com",
                            FirstName = "Tony",
                            Name = "Franecki",
                            Password = "E3mVXzlaVQ"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("LoadAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "LoadAddressId");

                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("UnloadingAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "UnloadingAddressId");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Dispatcher", "Dispatcher")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDispatcher");

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.HasOne("HELMo_bilite.Models.Vehicule", "Vehicule")
                        .WithMany()
                        .HasForeignKey("IdVehicule");

                    b.Navigation("Client");

                    b.Navigation("Dispatcher");

                    b.Navigation("Driver");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Navigation("LoadAddress")
                        .IsRequired();

                    b.Navigation("UnloadingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
