// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508083844_DeliveryIncomplet4")]
    partial class DeliveryIncomplet4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoadAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAddress");

                    b.HasIndex("LoadAddressId")
                        .IsUnique()
                        .HasFilter("[LoadAddressId] IS NOT NULL");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "90",
                            Country = "Singapore",
                            Locality = "Stammport",
                            LocalityCode = "95953",
                            Number = "7484",
                            Street = "Bailey Tunnel"
                        },
                        new
                        {
                            IdAddress = "91",
                            Country = "Sao Tome and Principe",
                            Locality = "New Leoraborough",
                            LocalityCode = "36379-8289",
                            Number = "60637",
                            Street = "Mose Trail"
                        },
                        new
                        {
                            IdAddress = "92",
                            Country = "Israel",
                            Locality = "Wisokyhaven",
                            LocalityCode = "91447",
                            Number = "2135",
                            Street = "Nola Turnpike"
                        },
                        new
                        {
                            IdAddress = "93",
                            Country = "Nauru",
                            Locality = "Port Antonetta",
                            LocalityCode = "64104-3924",
                            Number = "410",
                            Street = "Cummings Crest"
                        },
                        new
                        {
                            IdAddress = "94",
                            Country = "Somalia",
                            Locality = "Ervinport",
                            LocalityCode = "50040-1122",
                            Number = "07684",
                            Street = "Joy Light"
                        },
                        new
                        {
                            IdAddress = "95",
                            Country = "Martinique",
                            Locality = "West Erichfurt",
                            LocalityCode = "20842-5987",
                            Number = "890",
                            Street = "Schaefer Port"
                        },
                        new
                        {
                            IdAddress = "96",
                            Country = "Lao People's Democratic Republic",
                            Locality = "Hildegardborough",
                            LocalityCode = "72594-8053",
                            Number = "9224",
                            Street = "Heathcote Mountains"
                        },
                        new
                        {
                            IdAddress = "97",
                            Country = "Bouvet Island (Bouvetoya)",
                            Locality = "West Rachelleburgh",
                            LocalityCode = "12832",
                            Number = "404",
                            Street = "Howell Glens"
                        },
                        new
                        {
                            IdAddress = "98",
                            Country = "Cambodia",
                            Locality = "North Dana",
                            LocalityCode = "96213-5143",
                            Number = "018",
                            Street = "Tyra Camp"
                        },
                        new
                        {
                            IdAddress = "99",
                            Country = "Gambia",
                            Locality = "West Nathanial",
                            LocalityCode = "17685",
                            Number = "4605",
                            Street = "Kathryn Stream"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDispatcher")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LoadAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDispatcher");

                    b.HasIndex("IdDriver");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "SFYJHN13AOQC62152",
                            Brand = "Bentley",
                            IdLicenses = 1,
                            Model = "Accord",
                            Payload = 8000
                        },
                        new
                        {
                            Plate = "5FMDGQBT5FT749392",
                            Brand = "Nissan",
                            IdLicenses = 1,
                            Model = "Fiesta",
                            Payload = 14000
                        },
                        new
                        {
                            Plate = "NOL2TOZHW8DM34396",
                            Brand = "BMW",
                            IdLicenses = 1,
                            Model = "CTS",
                            Payload = 9000
                        },
                        new
                        {
                            Plate = "BVU1IAF6MCW560878",
                            Brand = "Fiat",
                            IdLicenses = 2,
                            Model = "1",
                            Payload = 35000
                        },
                        new
                        {
                            Plate = "HT6X0X7ZFZDJ50869",
                            Brand = "Polestar",
                            IdLicenses = 2,
                            Model = "Taurus",
                            Payload = 15000
                        },
                        new
                        {
                            Plate = "B1DEEPV45AVS13496",
                            Brand = "Bentley",
                            IdLicenses = 1,
                            Model = "LeBaron",
                            Payload = 1000
                        },
                        new
                        {
                            Plate = "QQEZEYIGIZWV25882",
                            Brand = "Smart",
                            IdLicenses = 3,
                            Model = "1",
                            Payload = 26000
                        },
                        new
                        {
                            Plate = "301CZU713VLD27705",
                            Brand = "Volkswagen",
                            IdLicenses = 3,
                            Model = "Beetle",
                            Payload = 35000
                        },
                        new
                        {
                            Plate = "17TF4SCZQBXD10731",
                            Brand = "Volkswagen",
                            IdLicenses = 1,
                            Model = "Explorer",
                            Payload = 22000
                        },
                        new
                        {
                            Plate = "NYF1LBDPXTJ721904",
                            Brand = "Smart",
                            IdLicenses = 3,
                            Model = "Element",
                            Payload = 11000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Kellie_Ryan@gmail.com",
                            FirstName = "Catherine",
                            Name = "Kessler",
                            Password = "caseQBKfIY",
                            CompanyAddressId = "90",
                            CompanyName = "Keeling, Labadie and Casper",
                            Number = "389-215-1209"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Bernardo.Mertz43@hotmail.com",
                            FirstName = "Cortney",
                            Name = "Parisian",
                            Password = "zRCdd9IAiQ",
                            CompanyAddressId = "91",
                            CompanyName = "Aufderhar - Jones",
                            Number = "843-396-6481"
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Aryanna19@yahoo.com",
                            FirstName = "Colleen",
                            Name = "Lehner",
                            Password = "JxsEoJ_oEt",
                            CompanyAddressId = "92",
                            CompanyName = "Anderson and Sons",
                            Number = "775-815-9879"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Daron.Jacobi@yahoo.com",
                            FirstName = "Macy",
                            Name = "Padberg",
                            Password = "hORmgXwZNo",
                            CompanyAddressId = "93",
                            CompanyName = "Hilpert, Lehner and Wintheiser",
                            Number = "284-955-9957"
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Shyann.Gorczany29@gmail.com",
                            FirstName = "Estevan",
                            Name = "Brekke",
                            Password = "qx4YpF3IzL",
                            CompanyAddressId = "94",
                            CompanyName = "Windler, Brown and Emard",
                            Number = "727-811-4458"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Makenna.Lemke@yahoo.com",
                            FirstName = "Mervin",
                            Name = "Metz",
                            Password = "0EGNEx7VlX",
                            CompanyAddressId = "95",
                            CompanyName = "Beer - Schimmel",
                            Number = "268-467-8331"
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Jeramy.Boyer73@gmail.com",
                            FirstName = "Keira",
                            Name = "O'Connell",
                            Password = "9qgWu1FLWN",
                            CompanyAddressId = "96",
                            CompanyName = "Barton Inc",
                            Number = "831-496-1994"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Dortha6@gmail.com",
                            FirstName = "Murl",
                            Name = "Reynolds",
                            Password = "tPb0P0CG1R",
                            CompanyAddressId = "97",
                            CompanyName = "Blanda, Effertz and Olson",
                            Number = "654-658-0013"
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Jean59@hotmail.com",
                            FirstName = "Haylee",
                            Name = "Pfannerstill",
                            Password = "UHbKqQSOyx",
                            CompanyAddressId = "98",
                            CompanyName = "Abernathy Inc",
                            Number = "923-895-5014"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Wellington.Larkin@gmail.com",
                            FirstName = "Myles",
                            Name = "Gaylord",
                            Password = "wlVBP47cdV",
                            CompanyAddressId = "99",
                            CompanyName = "Mraz LLC",
                            Number = "851-976-1549"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Avery40@yahoo.com",
                            FirstName = "Torey",
                            Name = "Cummings",
                            Password = "4Ti7dTQt7Y",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Candice86@gmail.com",
                            FirstName = "Herbert",
                            Name = "Leannon",
                            Password = "Ds9yLUd3lN",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Cristina8@hotmail.com",
                            FirstName = "Antone",
                            Name = "Stroman",
                            Password = "1PlOGAppKD",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Jena_Feeney@yahoo.com",
                            FirstName = "Estell",
                            Name = "Harvey",
                            Password = "YRT0Ap29MN",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Brando_Hirthe47@gmail.com",
                            FirstName = "Hilbert",
                            Name = "Schamberger",
                            Password = "Hb335zmF__",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Verda49@gmail.com",
                            FirstName = "Adele",
                            Name = "Ruecker",
                            Password = "OIczgkNQhA",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Kaela.Welch79@gmail.com",
                            FirstName = "Greta",
                            Name = "Boyle",
                            Password = "eisb_z3EQd",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Zena_Ferry@gmail.com",
                            FirstName = "Shayna",
                            Name = "McCullough",
                            Password = "1iDGh94Kfr",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Allison.Marks@gmail.com",
                            FirstName = "Hilario",
                            Name = "Abernathy",
                            Password = "7CkhSIJkCr",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Euna55@gmail.com",
                            FirstName = "Gabriel",
                            Name = "Rodriguez",
                            Password = "eReUmAbHV6",
                            IdCertification = 3
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "61",
                            Email = "Bria.Weissnat@hotmail.com",
                            FirstName = "Hiram",
                            Name = "Mertz",
                            Password = "kJnipV1Kwi"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Lonny_Bauch18@gmail.com",
                            FirstName = "Ruben",
                            Name = "Romaguera",
                            Password = "bVqHk3tSnS"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Shyann39@gmail.com",
                            FirstName = "Jarrell",
                            Name = "Lubowitz",
                            Password = "mQ8uKRm_ax"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Deshawn56@yahoo.com",
                            FirstName = "Kasey",
                            Name = "Schuppe",
                            Password = "v58D4UNbEB"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Flo60@gmail.com",
                            FirstName = "Ima",
                            Name = "Willms",
                            Password = "5M54ROcF9b"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Gust.Hauck62@hotmail.com",
                            FirstName = "Novella",
                            Name = "Feest",
                            Password = "21WyeSpuiC"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Elissa.Schultz29@yahoo.com",
                            FirstName = "Imogene",
                            Name = "Funk",
                            Password = "c7htrqW4dv"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Lenna50@gmail.com",
                            FirstName = "Eloise",
                            Name = "O'Reilly",
                            Password = "fZZGGvsbLm"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Sheldon78@gmail.com",
                            FirstName = "Jermaine",
                            Name = "Emard",
                            Password = "4JttMn14jC"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Oda.Rohan79@yahoo.com",
                            FirstName = "Nils",
                            Name = "Emmerich",
                            Password = "GqOQzxAjbI"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("LoadAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "LoadAddressId");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Dispatcher", "Dispatcher")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDispatcher");

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.Navigation("Client");

                    b.Navigation("Dispatcher");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Navigation("LoadAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
