// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoadAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnloadingAddressId")
                        .HasColumnType("int");

                    b.HasKey("IdAddress");

                    b.HasIndex("LoadAddressId")
                        .IsUnique()
                        .HasFilter("[LoadAddressId] IS NOT NULL");

                    b.HasIndex("UnloadingAddressId")
                        .IsUnique()
                        .HasFilter("[UnloadingAddressId] IS NOT NULL");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            IdAddress = "120",
                            Country = "Maldives",
                            Locality = "Stewarttown",
                            LocalityCode = "13006",
                            Number = "4447",
                            Street = "Dorothy Forges"
                        },
                        new
                        {
                            IdAddress = "121",
                            Country = "Albania",
                            Locality = "Willabury",
                            LocalityCode = "01062",
                            Number = "006",
                            Street = "Keegan Isle"
                        },
                        new
                        {
                            IdAddress = "122",
                            Country = "Netherlands",
                            Locality = "East German",
                            LocalityCode = "45105-1159",
                            Number = "08200",
                            Street = "Zoila Oval"
                        },
                        new
                        {
                            IdAddress = "123",
                            Country = "Palestinian Territory",
                            Locality = "Glennietown",
                            LocalityCode = "84365-7466",
                            Number = "51003",
                            Street = "Kemmer Fall"
                        },
                        new
                        {
                            IdAddress = "124",
                            Country = "Sao Tome and Principe",
                            Locality = "Goldenberg",
                            LocalityCode = "45367-7500",
                            Number = "31080",
                            Street = "Mills Trail"
                        },
                        new
                        {
                            IdAddress = "125",
                            Country = "Norway",
                            Locality = "East Audra",
                            LocalityCode = "45257-7045",
                            Number = "95516",
                            Street = "Lind Cliff"
                        },
                        new
                        {
                            IdAddress = "126",
                            Country = "Mozambique",
                            Locality = "Jaydafort",
                            LocalityCode = "30529",
                            Number = "65967",
                            Street = "Quitzon Forge"
                        },
                        new
                        {
                            IdAddress = "127",
                            Country = "Liberia",
                            Locality = "Buckridgefort",
                            LocalityCode = "13782",
                            Number = "46737",
                            Street = "Eldora Rapid"
                        },
                        new
                        {
                            IdAddress = "128",
                            Country = "Nicaragua",
                            Locality = "Lorenzfurt",
                            LocalityCode = "78374",
                            Number = "56434",
                            Street = "Christopher Forges"
                        },
                        new
                        {
                            IdAddress = "129",
                            Country = "Tuvalu",
                            Locality = "New Emmitt",
                            LocalityCode = "67245",
                            Number = "76022",
                            Street = "Bauch Green"
                        },
                        new
                        {
                            IdAddress = "150",
                            Country = "Netherlands Antilles",
                            Locality = "North Barbara",
                            LocalityCode = "33824-3535",
                            Number = "049",
                            Street = "Misty Radial"
                        },
                        new
                        {
                            IdAddress = "152",
                            Country = "Greenland",
                            Locality = "Framiburgh",
                            LocalityCode = "18885",
                            Number = "574",
                            Street = "Schneider Neck"
                        },
                        new
                        {
                            IdAddress = "154",
                            Country = "United Kingdom",
                            Locality = "Champlintown",
                            LocalityCode = "75078-6300",
                            Number = "593",
                            Street = "Dooley Grove"
                        },
                        new
                        {
                            IdAddress = "156",
                            Country = "Botswana",
                            Locality = "North Pattie",
                            LocalityCode = "80652",
                            Number = "4485",
                            Street = "Santiago Throughway"
                        },
                        new
                        {
                            IdAddress = "158",
                            Country = "Kazakhstan",
                            Locality = "Kihnbury",
                            LocalityCode = "03769-4520",
                            Number = "345",
                            Street = "Georgette Meadow"
                        },
                        new
                        {
                            IdAddress = "160",
                            Country = "Mali",
                            Locality = "East Price",
                            LocalityCode = "90726-8332",
                            Number = "2475",
                            Street = "Stokes Port"
                        },
                        new
                        {
                            IdAddress = "162",
                            Country = "French Southern Territories",
                            Locality = "North Chelseyville",
                            LocalityCode = "47331",
                            Number = "07696",
                            Street = "Hegmann Walks"
                        },
                        new
                        {
                            IdAddress = "164",
                            Country = "Liechtenstein",
                            Locality = "West Jean",
                            LocalityCode = "97680",
                            Number = "12498",
                            Street = "Spinka Knoll"
                        },
                        new
                        {
                            IdAddress = "166",
                            Country = "Reunion",
                            Locality = "North Olivershire",
                            LocalityCode = "36610-2518",
                            Number = "408",
                            Street = "Schuster Wells"
                        },
                        new
                        {
                            IdAddress = "168",
                            Country = "Western Sahara",
                            Locality = "Lake Rosannaland",
                            LocalityCode = "91818-4213",
                            Number = "22514",
                            Street = "Rose Course"
                        },
                        new
                        {
                            IdAddress = "151",
                            Country = "Maldives",
                            Locality = "South Rebecaside",
                            LocalityCode = "34820-2574",
                            Number = "3322",
                            Street = "Trycia Springs"
                        },
                        new
                        {
                            IdAddress = "153",
                            Country = "Mongolia",
                            Locality = "Port Laverna",
                            LocalityCode = "84281",
                            Number = "203",
                            Street = "Marvin Isle"
                        },
                        new
                        {
                            IdAddress = "155",
                            Country = "Isle of Man",
                            Locality = "West Arvilla",
                            LocalityCode = "37718-2854",
                            Number = "5322",
                            Street = "Gillian Dale"
                        },
                        new
                        {
                            IdAddress = "157",
                            Country = "Switzerland",
                            Locality = "Renefort",
                            LocalityCode = "84504",
                            Number = "767",
                            Street = "Ron Overpass"
                        },
                        new
                        {
                            IdAddress = "159",
                            Country = "Afghanistan",
                            Locality = "Port Emiletown",
                            LocalityCode = "19846",
                            Number = "785",
                            Street = "Hettinger Key"
                        },
                        new
                        {
                            IdAddress = "161",
                            Country = "Philippines",
                            Locality = "Brandonside",
                            LocalityCode = "01444-8494",
                            Number = "506",
                            Street = "Nicolas Plain"
                        },
                        new
                        {
                            IdAddress = "163",
                            Country = "United Arab Emirates",
                            Locality = "Jaquanborough",
                            LocalityCode = "60278-6828",
                            Number = "48102",
                            Street = "Tressie Pass"
                        },
                        new
                        {
                            IdAddress = "165",
                            Country = "Morocco",
                            Locality = "New Brendenburgh",
                            LocalityCode = "61661",
                            Number = "3666",
                            Street = "Sister Village"
                        },
                        new
                        {
                            IdAddress = "167",
                            Country = "Monaco",
                            Locality = "South Anika",
                            LocalityCode = "36434",
                            Number = "9512",
                            Street = "Rath Tunnel"
                        },
                        new
                        {
                            IdAddress = "169",
                            Country = "Italy",
                            Locality = "Krajcikfort",
                            LocalityCode = "16230-5111",
                            Number = "8965",
                            Street = "Ashlynn Garden"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdVehicule")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoadAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnloadingAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnloadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDriver");

                    b.HasIndex("IdVehicule");

                    b.ToTable("Deliveries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 170,
                            Content = "Corporis ipsam ullam soluta non. Occaecati et illo in aliquam. Minima qui expedita dolores corrupti vero ea id et.",
                            IdClient = "130",
                            IdVehicule = "TM703UALEQB568044",
                            LoadAddressId = "150",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "151",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 171,
                            Content = "ut",
                            IdClient = "131",
                            IdVehicule = "D3EJ7VXKQCQN81481",
                            LoadAddressId = "152",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "153",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 172,
                            Content = "Consequatur cupiditate aspernatur excepturi consectetur est sunt et.",
                            IdClient = "132",
                            IdVehicule = "GNTUUO743KCV54119",
                            LoadAddressId = "154",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "155",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 173,
                            Content = "Rem vero nisi ad iusto quo distinctio culpa. At dolores ab illo expedita nihil rerum ut sapiente. Odio optio laudantium quaerat dolores. Iste quia ea reiciendis quis ut rerum incidunt. Nihil reiciendis labore ea sit. Et quis quae incidunt qui ea.",
                            IdClient = "133",
                            IdVehicule = "M64OO793OFZQ21475",
                            LoadAddressId = "156",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "157",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 174,
                            Content = "fuga",
                            IdClient = "134",
                            IdVehicule = "I1RNR7CWI3YR17305",
                            LoadAddressId = "158",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "159",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 175,
                            Content = "voluptate",
                            IdClient = "135",
                            IdVehicule = "7F9K1UZACPMJ53996",
                            LoadAddressId = "160",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "161",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 176,
                            Content = "aperiam",
                            IdClient = "136",
                            IdVehicule = "FMUYZC0PATQP82513",
                            LoadAddressId = "162",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "163",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 177,
                            Content = "Laborum architecto occaecati voluptatem deleniti possimus. Quibusdam voluptatem omnis deleniti eum illum est eius facilis. Et quia et. Ad maiores saepe dolorem dicta perferendis. Unde minima temporibus facilis qui quidem qui voluptatem. Quia omnis consequatur dicta repudiandae odio officia sit quisquam est.",
                            IdClient = "137",
                            IdVehicule = "OHN44NLVFCOK62085",
                            LoadAddressId = "164",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "165",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 178,
                            Content = "Et ipsam pariatur non ad.",
                            IdClient = "138",
                            IdVehicule = "X0TFTT4T09QH30773",
                            LoadAddressId = "166",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "167",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 179,
                            Content = "Voluptate consequatur saepe et ut blanditiis quas reiciendis fugiat qui.\nConsequatur est et.\nDeserunt ipsa enim provident delectus.\nCorporis et ea odio sed.\nNobis quas praesentium qui qui minima aut expedita.",
                            IdClient = "139",
                            IdVehicule = "MG63VCU09DZC65122",
                            LoadAddressId = "168",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "169",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules", (string)null);

                    b.HasData(
                        new
                        {
                            Plate = "TM703UALEQB568044",
                            Brand = "Bentley",
                            IdLicenses = 1,
                            Model = "XTS",
                            Payload = 16000
                        },
                        new
                        {
                            Plate = "D3EJ7VXKQCQN81481",
                            Brand = "Nissan",
                            IdLicenses = 1,
                            Model = "Corvette",
                            Payload = 4000
                        },
                        new
                        {
                            Plate = "GNTUUO743KCV54119",
                            Brand = "Volkswagen",
                            IdLicenses = 2,
                            Model = "Beetle",
                            Payload = 35000
                        },
                        new
                        {
                            Plate = "M64OO793OFZQ21475",
                            Brand = "Smart",
                            IdLicenses = 1,
                            Model = "CTS",
                            Payload = 32000
                        },
                        new
                        {
                            Plate = "I1RNR7CWI3YR17305",
                            Brand = "Mercedes Benz",
                            IdLicenses = 3,
                            Model = "Model S",
                            Payload = 5000
                        },
                        new
                        {
                            Plate = "7F9K1UZACPMJ53996",
                            Brand = "Bugatti",
                            IdLicenses = 1,
                            Model = "XTS",
                            Payload = 7000
                        },
                        new
                        {
                            Plate = "FMUYZC0PATQP82513",
                            Brand = "Toyota",
                            IdLicenses = 1,
                            Model = "Aventador",
                            Payload = 25000
                        },
                        new
                        {
                            Plate = "OHN44NLVFCOK62085",
                            Brand = "Chevrolet",
                            IdLicenses = 3,
                            Model = "XC90",
                            Payload = 16000
                        },
                        new
                        {
                            Plate = "X0TFTT4T09QH30773",
                            Brand = "Toyota",
                            IdLicenses = 2,
                            Model = "Altima",
                            Payload = 30000
                        },
                        new
                        {
                            Plate = "MG63VCU09DZC65122",
                            Brand = "Aston Martin",
                            IdLicenses = 3,
                            Model = "El Camino",
                            Payload = 14000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "130",
                            Email = "Kian_Fahey@gmail.com",
                            FirstName = "Elsie",
                            Name = "Moen",
                            Password = "46VA9hfXxs",
                            CompanyAddressId = "120",
                            CompanyName = "Hahn LLC",
                            Number = "863-536-2006"
                        },
                        new
                        {
                            Matricule = "131",
                            Email = "Dominique55@gmail.com",
                            FirstName = "Daisha",
                            Name = "Roberts",
                            Password = "264pg9RnT6",
                            CompanyAddressId = "121",
                            CompanyName = "Adams - Langosh",
                            Number = "524-219-8333"
                        },
                        new
                        {
                            Matricule = "132",
                            Email = "Terrill_Kohler59@gmail.com",
                            FirstName = "Maiya",
                            Name = "Quigley",
                            Password = "pueXzv1oQ7",
                            CompanyAddressId = "122",
                            CompanyName = "Rowe - Herman",
                            Number = "898-957-8064"
                        },
                        new
                        {
                            Matricule = "133",
                            Email = "Oda43@gmail.com",
                            FirstName = "Meda",
                            Name = "Harris",
                            Password = "i7sNxMm9Lt",
                            CompanyAddressId = "123",
                            CompanyName = "Conn LLC",
                            Number = "796-812-0738"
                        },
                        new
                        {
                            Matricule = "134",
                            Email = "Maxine.Haley@gmail.com",
                            FirstName = "Taryn",
                            Name = "Mosciski",
                            Password = "hi0ZJXgdN9",
                            CompanyAddressId = "124",
                            CompanyName = "Cronin - Oberbrunner",
                            Number = "823-321-1600"
                        },
                        new
                        {
                            Matricule = "135",
                            Email = "Gillian68@yahoo.com",
                            FirstName = "Billy",
                            Name = "Weber",
                            Password = "89W2VlKu7S",
                            CompanyAddressId = "125",
                            CompanyName = "Walker, Leannon and Hamill",
                            Number = "477-970-0426"
                        },
                        new
                        {
                            Matricule = "136",
                            Email = "Kristoffer.Altenwerth@hotmail.com",
                            FirstName = "Terry",
                            Name = "Veum",
                            Password = "353fZwopNp",
                            CompanyAddressId = "126",
                            CompanyName = "Wuckert - Romaguera",
                            Number = "555-463-0897"
                        },
                        new
                        {
                            Matricule = "137",
                            Email = "Donna_Larkin1@hotmail.com",
                            FirstName = "Liliane",
                            Name = "McKenzie",
                            Password = "fzCsl56z3_",
                            CompanyAddressId = "127",
                            CompanyName = "Kohler, Aufderhar and Satterfield",
                            Number = "654-770-3815"
                        },
                        new
                        {
                            Matricule = "138",
                            Email = "Favian_Fay@yahoo.com",
                            FirstName = "Damon",
                            Name = "Parker",
                            Password = "FREMifP5zc",
                            CompanyAddressId = "128",
                            CompanyName = "Dietrich and Sons",
                            Number = "240-354-3179"
                        },
                        new
                        {
                            Matricule = "139",
                            Email = "Shana39@hotmail.com",
                            FirstName = "Floyd",
                            Name = "Satterfield",
                            Password = "322MzV7Mxd",
                            CompanyAddressId = "129",
                            CompanyName = "Mohr, Schowalter and Collins",
                            Number = "708-656-6425"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "110",
                            Email = "Joaquin_Beier79@yahoo.com",
                            FirstName = "Wilbert",
                            Name = "Johnson",
                            Password = "X1UE3rn3Ri",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "111",
                            Email = "Ruthie23@yahoo.com",
                            FirstName = "Clementina",
                            Name = "Jakubowski",
                            Password = "vuDsk2Dswu",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "112",
                            Email = "Nina20@yahoo.com",
                            FirstName = "Autumn",
                            Name = "Trantow",
                            Password = "Rah0x58FMD",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "113",
                            Email = "Macey50@gmail.com",
                            FirstName = "Rahul",
                            Name = "Johns",
                            Password = "aCRy76SwFX",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "114",
                            Email = "Landen.Cole@yahoo.com",
                            FirstName = "Uriah",
                            Name = "Barton",
                            Password = "HBxKReiMv3",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "115",
                            Email = "Jerald_Wilkinson40@hotmail.com",
                            FirstName = "Amy",
                            Name = "Gulgowski",
                            Password = "q7pFT14V3J",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "116",
                            Email = "Brennan.Hackett@hotmail.com",
                            FirstName = "Darlene",
                            Name = "Strosin",
                            Password = "4Fn_NLMThK",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "117",
                            Email = "Verdie_McClure29@yahoo.com",
                            FirstName = "Llewellyn",
                            Name = "Pacocha",
                            Password = "xuOBLWGReF",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "118",
                            Email = "Bessie_Hane89@hotmail.com",
                            FirstName = "Zack",
                            Name = "Dach",
                            Password = "HnWI3mBEpF",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "119",
                            Email = "Heidi.Bosco@yahoo.com",
                            FirstName = "Braeden",
                            Name = "Kulas",
                            Password = "rvpsJrG6EJ",
                            IdCertification = 3
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "91",
                            Email = "Monserrat_Yost@yahoo.com",
                            FirstName = "Maegan",
                            Name = "Volkman",
                            Password = "QlE4of4ifU"
                        },
                        new
                        {
                            Matricule = "93",
                            Email = "Ethyl_Cummerata@hotmail.com",
                            FirstName = "Jason",
                            Name = "Thompson",
                            Password = "SLTVjAUzUv"
                        },
                        new
                        {
                            Matricule = "95",
                            Email = "Jerrod.Walker51@gmail.com",
                            FirstName = "Victoria",
                            Name = "Rodriguez",
                            Password = "DRw3YxtoQ5"
                        },
                        new
                        {
                            Matricule = "97",
                            Email = "Rodolfo.Jaskolski34@yahoo.com",
                            FirstName = "Howard",
                            Name = "Goldner",
                            Password = "NJDRlEcNvQ"
                        },
                        new
                        {
                            Matricule = "99",
                            Email = "Missouri84@hotmail.com",
                            FirstName = "Mauricio",
                            Name = "Cronin",
                            Password = "y5h3Twauc3"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Florian4@gmail.com",
                            FirstName = "Emmanuel",
                            Name = "Mosciski",
                            Password = "FGFc6Emip3"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Wilford_Yundt17@gmail.com",
                            FirstName = "Thad",
                            Name = "Monahan",
                            Password = "pYEsyhJvRz"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Zachary41@yahoo.com",
                            FirstName = "Hassie",
                            Name = "Kemmer",
                            Password = "wrm4YttNdD"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Lucienne.Dicki@yahoo.com",
                            FirstName = "Alyce",
                            Name = "Witting",
                            Password = "pShTcfRXWD"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Mark_Rohan@hotmail.com",
                            FirstName = "Davonte",
                            Name = "Kiehn",
                            Password = "WPqZhSEZhw"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("LoadAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "LoadAddressId");

                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("UnloadingAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "UnloadingAddressId");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.HasOne("HELMo_bilite.Models.Vehicule", "Vehicule")
                        .WithMany()
                        .HasForeignKey("IdVehicule");

                    b.Navigation("Client");

                    b.Navigation("Driver");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Navigation("LoadAddress")
                        .IsRequired();

                    b.Navigation("UnloadingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
