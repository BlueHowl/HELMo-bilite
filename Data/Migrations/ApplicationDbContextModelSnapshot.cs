// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoadAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnloadingAddressId")
                        .HasColumnType("int");

                    b.HasKey("IdAddress");

                    b.HasIndex("LoadAddressId")
                        .IsUnique()
                        .HasFilter("[LoadAddressId] IS NOT NULL");

                    b.HasIndex("UnloadingAddressId")
                        .IsUnique()
                        .HasFilter("[UnloadingAddressId] IS NOT NULL");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            IdAddress = "120",
                            Country = "New Caledonia",
                            Locality = "South Norwood",
                            LocalityCode = "50643",
                            Number = "019",
                            Street = "Hirthe Dam"
                        },
                        new
                        {
                            IdAddress = "121",
                            Country = "Cuba",
                            Locality = "South Lourdes",
                            LocalityCode = "48631-6390",
                            Number = "055",
                            Street = "Cordell Route"
                        },
                        new
                        {
                            IdAddress = "122",
                            Country = "Holy See (Vatican City State)",
                            Locality = "Goyettechester",
                            LocalityCode = "50884-7560",
                            Number = "46844",
                            Street = "Hills Vista"
                        },
                        new
                        {
                            IdAddress = "123",
                            Country = "Costa Rica",
                            Locality = "Lake Curt",
                            LocalityCode = "13914-0532",
                            Number = "06253",
                            Street = "Schoen Courts"
                        },
                        new
                        {
                            IdAddress = "124",
                            Country = "South Africa",
                            Locality = "Wolffchester",
                            LocalityCode = "68774-9493",
                            Number = "7681",
                            Street = "Aryanna Station"
                        },
                        new
                        {
                            IdAddress = "125",
                            Country = "Guadeloupe",
                            Locality = "North Arlene",
                            LocalityCode = "02274-1960",
                            Number = "236",
                            Street = "Dora Bypass"
                        },
                        new
                        {
                            IdAddress = "126",
                            Country = "Poland",
                            Locality = "South Simland",
                            LocalityCode = "30405",
                            Number = "1194",
                            Street = "VonRueden Terrace"
                        },
                        new
                        {
                            IdAddress = "127",
                            Country = "United States of America",
                            Locality = "West Felicitaborough",
                            LocalityCode = "43981-1518",
                            Number = "74636",
                            Street = "Jasen Orchard"
                        },
                        new
                        {
                            IdAddress = "128",
                            Country = "Lao People's Democratic Republic",
                            Locality = "Nyahville",
                            LocalityCode = "75386",
                            Number = "882",
                            Street = "Sawayn Avenue"
                        },
                        new
                        {
                            IdAddress = "129",
                            Country = "Bahamas",
                            Locality = "McLaughlinland",
                            LocalityCode = "72920-6802",
                            Number = "710",
                            Street = "Hoeger Orchard"
                        },
                        new
                        {
                            IdAddress = "150",
                            Country = "Somalia",
                            Locality = "Grimesfurt",
                            LocalityCode = "63588",
                            Number = "888",
                            Street = "Pouros Lights"
                        },
                        new
                        {
                            IdAddress = "152",
                            Country = "Sierra Leone",
                            Locality = "Pollichchester",
                            LocalityCode = "64693",
                            Number = "80675",
                            Street = "Mann Course"
                        },
                        new
                        {
                            IdAddress = "154",
                            Country = "Zambia",
                            Locality = "Kubbury",
                            LocalityCode = "04322",
                            Number = "930",
                            Street = "Schumm Expressway"
                        },
                        new
                        {
                            IdAddress = "156",
                            Country = "Tunisia",
                            Locality = "Pfefferborough",
                            LocalityCode = "13288",
                            Number = "50391",
                            Street = "Madelynn Village"
                        },
                        new
                        {
                            IdAddress = "158",
                            Country = "Switzerland",
                            Locality = "South Bell",
                            LocalityCode = "03607-8963",
                            Number = "616",
                            Street = "Tyrel Crest"
                        },
                        new
                        {
                            IdAddress = "160",
                            Country = "Seychelles",
                            Locality = "West Hillard",
                            LocalityCode = "31082-4144",
                            Number = "087",
                            Street = "Jones Lights"
                        },
                        new
                        {
                            IdAddress = "162",
                            Country = "Costa Rica",
                            Locality = "Wehnerfort",
                            LocalityCode = "10048",
                            Number = "95451",
                            Street = "Lukas Meadow"
                        },
                        new
                        {
                            IdAddress = "164",
                            Country = "Guyana",
                            Locality = "South Morris",
                            LocalityCode = "01103",
                            Number = "92125",
                            Street = "Smitham Shore"
                        },
                        new
                        {
                            IdAddress = "166",
                            Country = "Saint Pierre and Miquelon",
                            Locality = "Port Lizeth",
                            LocalityCode = "71675-9432",
                            Number = "2225",
                            Street = "Lauryn Ridges"
                        },
                        new
                        {
                            IdAddress = "168",
                            Country = "Norway",
                            Locality = "Waelchibury",
                            LocalityCode = "92190-5946",
                            Number = "976",
                            Street = "Shanahan Shore"
                        },
                        new
                        {
                            IdAddress = "151",
                            Country = "Ukraine",
                            Locality = "South Katlynnstad",
                            LocalityCode = "58596-3496",
                            Number = "5860",
                            Street = "Dayna Lodge"
                        },
                        new
                        {
                            IdAddress = "153",
                            Country = "Bangladesh",
                            Locality = "Port Kennethbury",
                            LocalityCode = "15641",
                            Number = "586",
                            Street = "Gusikowski Lane"
                        },
                        new
                        {
                            IdAddress = "155",
                            Country = "Swaziland",
                            Locality = "West Grace",
                            LocalityCode = "44194",
                            Number = "48479",
                            Street = "Lynch Junctions"
                        },
                        new
                        {
                            IdAddress = "157",
                            Country = "Liberia",
                            Locality = "South Weldontown",
                            LocalityCode = "83548-8676",
                            Number = "7777",
                            Street = "O'Kon Prairie"
                        },
                        new
                        {
                            IdAddress = "159",
                            Country = "New Caledonia",
                            Locality = "New Jewell",
                            LocalityCode = "70412-3057",
                            Number = "8852",
                            Street = "Greenfelder Creek"
                        },
                        new
                        {
                            IdAddress = "161",
                            Country = "Burundi",
                            Locality = "Satterfieldton",
                            LocalityCode = "94417-3302",
                            Number = "50752",
                            Street = "Rosetta Locks"
                        },
                        new
                        {
                            IdAddress = "163",
                            Country = "Barbados",
                            Locality = "North Ryleyshire",
                            LocalityCode = "57548-2361",
                            Number = "4099",
                            Street = "Ashleigh Fort"
                        },
                        new
                        {
                            IdAddress = "165",
                            Country = "Senegal",
                            Locality = "Claudiaberg",
                            LocalityCode = "64113",
                            Number = "578",
                            Street = "Adams Passage"
                        },
                        new
                        {
                            IdAddress = "167",
                            Country = "Singapore",
                            Locality = "South Landenmouth",
                            LocalityCode = "50509-6780",
                            Number = "1577",
                            Street = "Lisette Prairie"
                        },
                        new
                        {
                            IdAddress = "169",
                            Country = "Slovenia",
                            Locality = "Port Elias",
                            LocalityCode = "10742-1183",
                            Number = "1597",
                            Street = "Reinhold Drive"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdVehicule")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoadAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnloadingAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnloadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDriver");

                    b.HasIndex("IdVehicule");

                    b.ToTable("Deliveries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 170,
                            Content = "Ipsum alias et cum corrupti vel omnis aut blanditiis neque.",
                            IdClient = "130",
                            IdVehicule = "D72YS3W6WYOK30108",
                            LoadAddressId = "150",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "151",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 171,
                            Content = "Neque voluptatem deserunt enim corporis repudiandae.\nDoloribus ut et amet quae assumenda necessitatibus ut occaecati quasi.\nUt minima aperiam cupiditate sed itaque.\nIusto ullam ea quos quas sunt quis.",
                            IdClient = "131",
                            IdVehicule = "FELSV94ODHEQ73728",
                            LoadAddressId = "152",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "153",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 172,
                            Content = "Sit voluptatem qui voluptates sit illo sunt tenetur. Mollitia ea quas incidunt voluptatibus rerum harum blanditiis. Deleniti expedita est animi officiis. Eum eos in.",
                            IdClient = "132",
                            IdVehicule = "CF9XYN1T6MDH62877",
                            LoadAddressId = "154",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "155",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 173,
                            Content = "Beatae ratione et impedit quis repellat labore autem vero. Qui et dicta quia exercitationem incidunt consequatur veniam. Quas aspernatur ducimus libero commodi minima. Beatae ad voluptatem eaque non unde dolor. Blanditiis consectetur enim fugiat sit enim et.",
                            IdClient = "133",
                            IdVehicule = "AAV1FJEK2PTF69226",
                            LoadAddressId = "156",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "157",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 174,
                            Content = "Quos ipsum omnis non iusto exercitationem sint. Tempore assumenda quia debitis corrupti facilis. Aut delectus molestiae consequatur aut non. Fugiat amet placeat eos in numquam officiis. Eos id voluptatum dolorem molestiae. Eum quae consequatur et mollitia eveniet.",
                            IdClient = "134",
                            IdVehicule = "BMNPBI1H4GLX68436",
                            LoadAddressId = "158",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "159",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 175,
                            Content = "Consectetur neque dicta ut qui.\nLaboriosam perspiciatis quaerat quaerat ipsum laboriosam dolores fugiat odio.\nEa et iure architecto quos molestiae sapiente.",
                            IdClient = "135",
                            IdVehicule = "I6ILZWMMV6XZ56201",
                            LoadAddressId = "160",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "161",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 176,
                            Content = "Recusandae ipsum a aut inventore deserunt esse odio velit aut.",
                            IdClient = "136",
                            IdVehicule = "SAUQOW9IE0NL81126",
                            LoadAddressId = "162",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "163",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 177,
                            Content = "Sapiente ad magnam aperiam magnam natus aut.\nDolorem aperiam quod natus aut aut commodi dolores quasi.\nAd omnis ipsam.\nError aut quas voluptate est.",
                            IdClient = "137",
                            IdVehicule = "QL6JQHOL31XQ64464",
                            LoadAddressId = "164",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "165",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 178,
                            Content = "Nisi et illo dolor ullam et rerum vel sed. Earum autem commodi autem. Totam dolor reprehenderit quia quia assumenda dignissimos et. Perspiciatis numquam tempore porro tempora eaque hic repellat perferendis. Placeat dolores sint deserunt deserunt sit quasi.",
                            IdClient = "138",
                            IdVehicule = "0I5GFLJ2F2IC38150",
                            LoadAddressId = "166",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "167",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 179,
                            Content = "Ea temporibus est eaque explicabo.",
                            IdClient = "139",
                            IdVehicule = "PSI9DTWXKYXB27005",
                            LoadAddressId = "168",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "169",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules", (string)null);

                    b.HasData(
                        new
                        {
                            Plate = "D72YS3W6WYOK30108",
                            Brand = "Ford",
                            IdLicenses = 3,
                            Model = "A4",
                            Payload = 34000
                        },
                        new
                        {
                            Plate = "FELSV94ODHEQ73728",
                            Brand = "Nissan",
                            IdLicenses = 2,
                            Model = "Fiesta",
                            Payload = 20000
                        },
                        new
                        {
                            Plate = "CF9XYN1T6MDH62877",
                            Brand = "Honda",
                            IdLicenses = 3,
                            Model = "F-150",
                            Payload = 28000
                        },
                        new
                        {
                            Plate = "AAV1FJEK2PTF69226",
                            Brand = "Maserati",
                            IdLicenses = 2,
                            Model = "Model T",
                            Payload = 40000
                        },
                        new
                        {
                            Plate = "BMNPBI1H4GLX68436",
                            Brand = "BMW",
                            IdLicenses = 3,
                            Model = "Focus",
                            Payload = 29000
                        },
                        new
                        {
                            Plate = "I6ILZWMMV6XZ56201",
                            Brand = "Kia",
                            IdLicenses = 2,
                            Model = "Explorer",
                            Payload = 19000
                        },
                        new
                        {
                            Plate = "SAUQOW9IE0NL81126",
                            Brand = "Jaguar",
                            IdLicenses = 1,
                            Model = "Camry",
                            Payload = 2000
                        },
                        new
                        {
                            Plate = "QL6JQHOL31XQ64464",
                            Brand = "Toyota",
                            IdLicenses = 2,
                            Model = "Focus",
                            Payload = 16000
                        },
                        new
                        {
                            Plate = "0I5GFLJ2F2IC38150",
                            Brand = "Jaguar",
                            IdLicenses = 2,
                            Model = "Wrangler",
                            Payload = 4000
                        },
                        new
                        {
                            Plate = "PSI9DTWXKYXB27005",
                            Brand = "Rolls Royce",
                            IdLicenses = 1,
                            Model = "ATS",
                            Payload = 21000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "130",
                            Email = "Morton10@hotmail.com",
                            FirstName = "Shanelle",
                            Name = "Denesik",
                            Password = "TPaCtp0Nks",
                            CompanyAddressId = "120",
                            CompanyName = "Wiza - Olson",
                            Number = "293-451-9855"
                        },
                        new
                        {
                            Matricule = "131",
                            Email = "Minerva96@gmail.com",
                            FirstName = "Jamal",
                            Name = "Sawayn",
                            Password = "xh368Mc9Rq",
                            CompanyAddressId = "121",
                            CompanyName = "Daugherty Inc",
                            Number = "607-882-1441"
                        },
                        new
                        {
                            Matricule = "132",
                            Email = "Jordyn_Hayes1@yahoo.com",
                            FirstName = "Loy",
                            Name = "Bednar",
                            Password = "zaPTc_13sx",
                            CompanyAddressId = "122",
                            CompanyName = "Turner - Tremblay",
                            Number = "561-860-0550"
                        },
                        new
                        {
                            Matricule = "133",
                            Email = "Lauriane42@hotmail.com",
                            FirstName = "Sammie",
                            Name = "Rice",
                            Password = "Bnm1GRu0If",
                            CompanyAddressId = "123",
                            CompanyName = "Gleason Inc",
                            Number = "827-832-5697"
                        },
                        new
                        {
                            Matricule = "134",
                            Email = "Abner.OReilly25@gmail.com",
                            FirstName = "Camila",
                            Name = "Donnelly",
                            Password = "kQelN0smyd",
                            CompanyAddressId = "124",
                            CompanyName = "Labadie - Kautzer",
                            Number = "335-901-8029"
                        },
                        new
                        {
                            Matricule = "135",
                            Email = "Kelsie_Vandervort88@gmail.com",
                            FirstName = "Loren",
                            Name = "Vandervort",
                            Password = "23Qb5YZVe3",
                            CompanyAddressId = "125",
                            CompanyName = "Terry, Krajcik and Batz",
                            Number = "572-709-7154"
                        },
                        new
                        {
                            Matricule = "136",
                            Email = "Arvid17@gmail.com",
                            FirstName = "Mariam",
                            Name = "Walsh",
                            Password = "YWB5cLxmvm",
                            CompanyAddressId = "126",
                            CompanyName = "Runte and Sons",
                            Number = "320-360-6720"
                        },
                        new
                        {
                            Matricule = "137",
                            Email = "Flavio4@gmail.com",
                            FirstName = "Sigmund",
                            Name = "Boyle",
                            Password = "iKBUs8OyrD",
                            CompanyAddressId = "127",
                            CompanyName = "Turcotte, Kerluke and Wehner",
                            Number = "531-537-7937"
                        },
                        new
                        {
                            Matricule = "138",
                            Email = "Marjorie.Emard50@gmail.com",
                            FirstName = "Garrett",
                            Name = "Feil",
                            Password = "IepnYqUmmB",
                            CompanyAddressId = "128",
                            CompanyName = "Moen and Sons",
                            Number = "310-526-9627"
                        },
                        new
                        {
                            Matricule = "139",
                            Email = "Dakota.Grady@hotmail.com",
                            FirstName = "Max",
                            Name = "Hermann",
                            Password = "oX006t_3TQ",
                            CompanyAddressId = "129",
                            CompanyName = "Berge - Lynch",
                            Number = "450-893-7979"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "110",
                            Email = "Alda.Monahan@hotmail.com",
                            FirstName = "Clay",
                            Name = "Welch",
                            Password = "F5q5JfrGAa",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "111",
                            Email = "Quincy.Lehner@gmail.com",
                            FirstName = "Monserrate",
                            Name = "Grant",
                            Password = "NkFkAzzve_",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "112",
                            Email = "Caesar.Wilkinson59@yahoo.com",
                            FirstName = "Vivianne",
                            Name = "Streich",
                            Password = "CWlW8p4fCn",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "113",
                            Email = "Victor33@hotmail.com",
                            FirstName = "Malvina",
                            Name = "Dooley",
                            Password = "hPmdYpi5L3",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "114",
                            Email = "Izabella.OHara@gmail.com",
                            FirstName = "Bernice",
                            Name = "Sipes",
                            Password = "l0FBcp_6X9",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "115",
                            Email = "Marty28@gmail.com",
                            FirstName = "Retta",
                            Name = "Little",
                            Password = "_YCvpy7PSM",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "116",
                            Email = "Arnoldo34@hotmail.com",
                            FirstName = "Amely",
                            Name = "Miller",
                            Password = "9sBBfDxBnv",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "117",
                            Email = "Hunter_Gutkowski@gmail.com",
                            FirstName = "Elva",
                            Name = "McClure",
                            Password = "z5Z_Syzd08",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "118",
                            Email = "Okey_Kuhic76@hotmail.com",
                            FirstName = "Aidan",
                            Name = "Kunde",
                            Password = "P4x1UtlwPh",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "119",
                            Email = "Garth93@hotmail.com",
                            FirstName = "Zackery",
                            Name = "Nikolaus",
                            Password = "R5Lqp2VvTB",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "91",
                            Email = "Adrienne30@hotmail.com",
                            FirstName = "Ramiro",
                            Name = "Schoen",
                            Password = "me2TryzEqV"
                        },
                        new
                        {
                            Matricule = "93",
                            Email = "Iliana89@hotmail.com",
                            FirstName = "Beatrice",
                            Name = "Morissette",
                            Password = "qPcUyCVIUp"
                        },
                        new
                        {
                            Matricule = "95",
                            Email = "Jay52@yahoo.com",
                            FirstName = "Estel",
                            Name = "Schoen",
                            Password = "eSieoDbyYJ"
                        },
                        new
                        {
                            Matricule = "97",
                            Email = "Eli40@yahoo.com",
                            FirstName = "Lauryn",
                            Name = "Farrell",
                            Password = "9_oKwTl2pS"
                        },
                        new
                        {
                            Matricule = "99",
                            Email = "Cary_Tremblay@yahoo.com",
                            FirstName = "Clyde",
                            Name = "Reichert",
                            Password = "OEMNz90Zs_"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Nikolas_Ritchie10@yahoo.com",
                            FirstName = "Rhianna",
                            Name = "Ratke",
                            Password = "nOqZSya48D"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Eric49@hotmail.com",
                            FirstName = "Colten",
                            Name = "Hartmann",
                            Password = "JKZzdkKwPj"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Lisette13@gmail.com",
                            FirstName = "Edison",
                            Name = "Powlowski",
                            Password = "I0A3fi4YlS"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Garland_Monahan@gmail.com",
                            FirstName = "Toby",
                            Name = "White",
                            Password = "arNI3aBOWA"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Araceli65@yahoo.com",
                            FirstName = "Edison",
                            Name = "Williamson",
                            Password = "z5vgotd9Vm"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("LoadAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "LoadAddressId");

                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("UnloadingAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "UnloadingAddressId");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.HasOne("HELMo_bilite.Models.Vehicule", "Vehicule")
                        .WithMany()
                        .HasForeignKey("IdVehicule");

                    b.Navigation("Client");

                    b.Navigation("Driver");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Navigation("LoadAddress")
                        .IsRequired();

                    b.Navigation("UnloadingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
