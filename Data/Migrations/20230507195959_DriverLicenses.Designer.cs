// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507195959_DriverLicenses")]
    partial class DriverLicenses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicenses", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "60",
                            Country = "Macedonia",
                            Locality = "Calichester",
                            LocalityCode = "68696-3416",
                            Number = "633",
                            Street = "Zieme Divide"
                        },
                        new
                        {
                            IdAddress = "61",
                            Country = "Serbia",
                            Locality = "Jessycashire",
                            LocalityCode = "00995",
                            Number = "404",
                            Street = "Nadia Mission"
                        },
                        new
                        {
                            IdAddress = "62",
                            Country = "Honduras",
                            Locality = "West Emmet",
                            LocalityCode = "55811",
                            Number = "62542",
                            Street = "Catalina Vista"
                        },
                        new
                        {
                            IdAddress = "63",
                            Country = "Dominican Republic",
                            Locality = "Port Sophia",
                            LocalityCode = "76328",
                            Number = "4201",
                            Street = "Caleigh Mills"
                        },
                        new
                        {
                            IdAddress = "64",
                            Country = "Liechtenstein",
                            Locality = "Johathanburgh",
                            LocalityCode = "20731",
                            Number = "1294",
                            Street = "Huels Mission"
                        },
                        new
                        {
                            IdAddress = "65",
                            Country = "Sao Tome and Principe",
                            Locality = "New Jettie",
                            LocalityCode = "43774-0715",
                            Number = "9286",
                            Street = "Bashirian Ridge"
                        },
                        new
                        {
                            IdAddress = "66",
                            Country = "Armenia",
                            Locality = "Lake Marlene",
                            LocalityCode = "32297-4596",
                            Number = "253",
                            Street = "Tina Hill"
                        },
                        new
                        {
                            IdAddress = "67",
                            Country = "New Zealand",
                            Locality = "North Arnulfoberg",
                            LocalityCode = "36955-7457",
                            Number = "33324",
                            Street = "Eva Alley"
                        },
                        new
                        {
                            IdAddress = "68",
                            Country = "Kuwait",
                            Locality = "Cleoraport",
                            LocalityCode = "26130-3398",
                            Number = "556",
                            Street = "Terry Mill"
                        },
                        new
                        {
                            IdAddress = "69",
                            Country = "Puerto Rico",
                            Locality = "Torphychester",
                            LocalityCode = "85661",
                            Number = "582",
                            Street = "Stefan Spring"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Christopher_Kuvalis5@gmail.com",
                            FirstName = "Malcolm",
                            Name = "Lehner",
                            Password = "l5DXQAoHDG",
                            CompanyAddressId = "60",
                            CompanyName = "Emmerich Inc",
                            Number = "463-244-9358"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Baylee45@hotmail.com",
                            FirstName = "Kay",
                            Name = "Stracke",
                            Password = "FWlxISk3pu",
                            CompanyAddressId = "61",
                            CompanyName = "Lang Inc",
                            Number = "556-445-0142"
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Helena.Hammes@yahoo.com",
                            FirstName = "Mylene",
                            Name = "Senger",
                            Password = "8Ifn_KOQOC",
                            CompanyAddressId = "62",
                            CompanyName = "Borer LLC",
                            Number = "361-632-2598"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Dino.Stark@yahoo.com",
                            FirstName = "Arlene",
                            Name = "Hagenes",
                            Password = "fEkcKgXf2G",
                            CompanyAddressId = "63",
                            CompanyName = "Feest, Paucek and Daniel",
                            Number = "954-761-9577"
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Liliane.Gislason65@gmail.com",
                            FirstName = "Sherman",
                            Name = "Cole",
                            Password = "M0B4prOqHn",
                            CompanyAddressId = "64",
                            CompanyName = "Cassin, Price and Hahn",
                            Number = "933-647-4689"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Geovany.Brekke@hotmail.com",
                            FirstName = "Weston",
                            Name = "Yost",
                            Password = "pcJP5g5Y7O",
                            CompanyAddressId = "65",
                            CompanyName = "Goodwin Inc",
                            Number = "610-896-5198"
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Geraldine.Mertz25@yahoo.com",
                            FirstName = "Foster",
                            Name = "Altenwerth",
                            Password = "oO4DXXUZmv",
                            CompanyAddressId = "66",
                            CompanyName = "Boyle, O'Connell and Hand",
                            Number = "273-507-4887"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Kaylah_Schaefer@gmail.com",
                            FirstName = "Charles",
                            Name = "Trantow",
                            Password = "qcudC_vcfX",
                            CompanyAddressId = "67",
                            CompanyName = "Torp and Sons",
                            Number = "512-951-9789"
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Cassidy.Krajcik71@yahoo.com",
                            FirstName = "Brandy",
                            Name = "McClure",
                            Password = "FqiHhrycfS",
                            CompanyAddressId = "68",
                            CompanyName = "Huels - Ferry",
                            Number = "508-374-6410"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Martine66@hotmail.com",
                            FirstName = "Helga",
                            Name = "Kassulke",
                            Password = "jVOqA5OiPu",
                            CompanyAddressId = "69",
                            CompanyName = "Bradtke - Towne",
                            Number = "867-998-9303"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "50",
                            Email = "Floy.Kunze@gmail.com",
                            FirstName = "Garrick",
                            Name = "Gulgowski",
                            Password = "M9x1zLE2tv",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "51",
                            Email = "Abel51@yahoo.com",
                            FirstName = "Rosina",
                            Name = "Bernier",
                            Password = "nruam4nvAK",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "52",
                            Email = "Maria67@gmail.com",
                            FirstName = "Kelton",
                            Name = "Legros",
                            Password = "BDtH1fngZr",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Krystina48@hotmail.com",
                            FirstName = "Jettie",
                            Name = "Toy",
                            Password = "fvUkDjJHgM",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "54",
                            Email = "Emmett63@yahoo.com",
                            FirstName = "Micaela",
                            Name = "Crist",
                            Password = "RJ46HEzURC",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Giles.Cremin54@gmail.com",
                            FirstName = "Sydni",
                            Name = "Carroll",
                            Password = "R4QHsoHRyP",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "56",
                            Email = "Ella.Hayes87@gmail.com",
                            FirstName = "Alexie",
                            Name = "Flatley",
                            Password = "RnpGhao5is",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Regan36@hotmail.com",
                            FirstName = "Santina",
                            Name = "Robel",
                            Password = "x6ENKeWsa1",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "58",
                            Email = "Cathrine_Gorczany@yahoo.com",
                            FirstName = "Tate",
                            Name = "Fisher",
                            Password = "fwBlwgZsLb",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Johnny90@hotmail.com",
                            FirstName = "Deontae",
                            Name = "Abshire",
                            Password = "xPaD8KW4un",
                            IdCertification = 2
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "40",
                            Email = "Dillon.Witting44@hotmail.com",
                            FirstName = "Alanna",
                            Name = "Lueilwitz",
                            Password = "jYOWiJS72n"
                        },
                        new
                        {
                            Matricule = "41",
                            Email = "Amina.Bode@yahoo.com",
                            FirstName = "Lesly",
                            Name = "Pagac",
                            Password = "S2NR8YEx2w"
                        },
                        new
                        {
                            Matricule = "42",
                            Email = "Justice68@hotmail.com",
                            FirstName = "Josiah",
                            Name = "Fahey",
                            Password = "RuuIq74htU"
                        },
                        new
                        {
                            Matricule = "43",
                            Email = "Bryce_Brown@yahoo.com",
                            FirstName = "Jaiden",
                            Name = "Stroman",
                            Password = "8LTgfFo4b9"
                        },
                        new
                        {
                            Matricule = "44",
                            Email = "Susan74@yahoo.com",
                            FirstName = "Alessia",
                            Name = "Hettinger",
                            Password = "U0_t57dOfo"
                        },
                        new
                        {
                            Matricule = "45",
                            Email = "Laurianne7@yahoo.com",
                            FirstName = "Zetta",
                            Name = "Greenholt",
                            Password = "6CDVlTGUXs"
                        },
                        new
                        {
                            Matricule = "46",
                            Email = "William.Streich@gmail.com",
                            FirstName = "Carrie",
                            Name = "Gerhold",
                            Password = "mn_je0SFzZ"
                        },
                        new
                        {
                            Matricule = "47",
                            Email = "Hector15@yahoo.com",
                            FirstName = "Reta",
                            Name = "Moore",
                            Password = "F0xS1WATzG"
                        },
                        new
                        {
                            Matricule = "48",
                            Email = "Elvera_Luettgen@hotmail.com",
                            FirstName = "Derek",
                            Name = "Ankunding",
                            Password = "pROGP8O1q0"
                        },
                        new
                        {
                            Matricule = "49",
                            Email = "Oda.Kohler@hotmail.com",
                            FirstName = "Susan",
                            Name = "Langosh",
                            Password = "OGdywpJpWU"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });
#pragma warning restore 612, 618
        }
    }
}
