// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508114039_DeliveryIncomplet7")]
    partial class DeliveryIncomplet7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoadAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnloadingAddressId")
                        .HasColumnType("int");

                    b.HasKey("IdAddress");

                    b.HasIndex("LoadAddressId")
                        .IsUnique()
                        .HasFilter("[LoadAddressId] IS NOT NULL");

                    b.HasIndex("UnloadingAddressId")
                        .IsUnique()
                        .HasFilter("[UnloadingAddressId] IS NOT NULL");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "90",
                            Country = "Montenegro",
                            Locality = "Emardport",
                            LocalityCode = "68095-0710",
                            Number = "559",
                            Street = "Lind Hill"
                        },
                        new
                        {
                            IdAddress = "91",
                            Country = "Lesotho",
                            Locality = "Cliffordbury",
                            LocalityCode = "48127-3662",
                            Number = "6959",
                            Street = "Lempi Viaduct"
                        },
                        new
                        {
                            IdAddress = "92",
                            Country = "Kenya",
                            Locality = "East Reilly",
                            LocalityCode = "11307-8235",
                            Number = "491",
                            Street = "Noble Highway"
                        },
                        new
                        {
                            IdAddress = "93",
                            Country = "Gabon",
                            Locality = "Moenville",
                            LocalityCode = "22315-9533",
                            Number = "1071",
                            Street = "Veum Plains"
                        },
                        new
                        {
                            IdAddress = "94",
                            Country = "Ghana",
                            Locality = "East Jarretfurt",
                            LocalityCode = "10871-7876",
                            Number = "23900",
                            Street = "Nienow Forges"
                        },
                        new
                        {
                            IdAddress = "95",
                            Country = "Montenegro",
                            Locality = "Manteview",
                            LocalityCode = "79700",
                            Number = "949",
                            Street = "MacGyver Ports"
                        },
                        new
                        {
                            IdAddress = "96",
                            Country = "Pakistan",
                            Locality = "Dorothychester",
                            LocalityCode = "32810",
                            Number = "7134",
                            Street = "Pollich Creek"
                        },
                        new
                        {
                            IdAddress = "97",
                            Country = "Macedonia",
                            Locality = "Port Edythville",
                            LocalityCode = "76899",
                            Number = "9508",
                            Street = "Carter Drives"
                        },
                        new
                        {
                            IdAddress = "98",
                            Country = "Sierra Leone",
                            Locality = "Lake Vernonbury",
                            LocalityCode = "50299-3832",
                            Number = "927",
                            Street = "Aufderhar Stravenue"
                        },
                        new
                        {
                            IdAddress = "99",
                            Country = "Denmark",
                            Locality = "Eulahbury",
                            LocalityCode = "20713",
                            Number = "53740",
                            Street = "Amie Causeway"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdVehicule")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoadAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnloadingAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnloadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDriver");

                    b.HasIndex("IdVehicule");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "93VAT6KSO1OZ91304",
                            Brand = "Dodge",
                            IdLicenses = 2,
                            Model = "Impala",
                            Payload = 9000
                        },
                        new
                        {
                            Plate = "6FN7TDCBHHK571798",
                            Brand = "Hyundai",
                            IdLicenses = 3,
                            Model = "Impala",
                            Payload = 19000
                        },
                        new
                        {
                            Plate = "EAYHX72Z7JA374208",
                            Brand = "Volvo",
                            IdLicenses = 3,
                            Model = "2",
                            Payload = 21000
                        },
                        new
                        {
                            Plate = "FWEMA5HONRPV84305",
                            Brand = "Hyundai",
                            IdLicenses = 1,
                            Model = "Mercielago",
                            Payload = 22000
                        },
                        new
                        {
                            Plate = "EXJD2ZQT8XO917918",
                            Brand = "Kia",
                            IdLicenses = 1,
                            Model = "Fortwo",
                            Payload = 13000
                        },
                        new
                        {
                            Plate = "9KM26M3XHCKL38702",
                            Brand = "Polestar",
                            IdLicenses = 3,
                            Model = "Expedition",
                            Payload = 39000
                        },
                        new
                        {
                            Plate = "FABYLPDTQLF191872",
                            Brand = "Hyundai",
                            IdLicenses = 3,
                            Model = "Camaro",
                            Payload = 25000
                        },
                        new
                        {
                            Plate = "P67ELXFIGJD492478",
                            Brand = "Mini",
                            IdLicenses = 1,
                            Model = "Element",
                            Payload = 4000
                        },
                        new
                        {
                            Plate = "1MJZM5Y3E0IJ49587",
                            Brand = "Polestar",
                            IdLicenses = 2,
                            Model = "Altima",
                            Payload = 12000
                        },
                        new
                        {
                            Plate = "IKHNBXDNS2SA60703",
                            Brand = "Kia",
                            IdLicenses = 3,
                            Model = "Aventador",
                            Payload = 24000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Matt_Mante19@hotmail.com",
                            FirstName = "Nikolas",
                            Name = "Keeling",
                            Password = "SUyoOcZkXA",
                            CompanyAddressId = "90",
                            CompanyName = "Mertz, Wilderman and Aufderhar",
                            Number = "858-479-0214"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Lemuel54@hotmail.com",
                            FirstName = "Jacquelyn",
                            Name = "Legros",
                            Password = "yF52cVX005",
                            CompanyAddressId = "91",
                            CompanyName = "Labadie - Murphy",
                            Number = "971-918-5501"
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Victoria5@hotmail.com",
                            FirstName = "German",
                            Name = "Block",
                            Password = "MBSLEmLoup",
                            CompanyAddressId = "92",
                            CompanyName = "Cummerata and Sons",
                            Number = "241-362-5096"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Mavis_Spinka12@hotmail.com",
                            FirstName = "Darian",
                            Name = "Carroll",
                            Password = "RIiGdU_l75",
                            CompanyAddressId = "93",
                            CompanyName = "McLaughlin - O'Connell",
                            Number = "429-789-9146"
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Carter.Borer@yahoo.com",
                            FirstName = "Alfonzo",
                            Name = "Hammes",
                            Password = "S6RXgL7puh",
                            CompanyAddressId = "94",
                            CompanyName = "Crooks and Sons",
                            Number = "812-859-8208"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Zack_Swaniawski@yahoo.com",
                            FirstName = "Milford",
                            Name = "Crona",
                            Password = "yKjSKbkU2L",
                            CompanyAddressId = "95",
                            CompanyName = "Lang and Sons",
                            Number = "228-463-0101"
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Garnet31@gmail.com",
                            FirstName = "Otto",
                            Name = "Bednar",
                            Password = "0YrTyiuUq8",
                            CompanyAddressId = "96",
                            CompanyName = "Kiehn, Osinski and Cummerata",
                            Number = "607-299-7413"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Jesus.Hansen13@gmail.com",
                            FirstName = "Shanny",
                            Name = "Parisian",
                            Password = "7J4DctO0L9",
                            CompanyAddressId = "97",
                            CompanyName = "Jacobi, Williamson and Torphy",
                            Number = "861-474-4360"
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Garett_Rowe@yahoo.com",
                            FirstName = "Marion",
                            Name = "Cormier",
                            Password = "tBvK_My3lV",
                            CompanyAddressId = "98",
                            CompanyName = "Trantow, Heidenreich and Kiehn",
                            Number = "274-355-7659"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Blair.Fahey@hotmail.com",
                            FirstName = "Paris",
                            Name = "Ortiz",
                            Password = "rXHpCWng7L",
                            CompanyAddressId = "99",
                            CompanyName = "West, Shanahan and Oberbrunner",
                            Number = "352-618-5459"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Kallie.Franecki@gmail.com",
                            FirstName = "Hortense",
                            Name = "Leannon",
                            Password = "6D1XmtaZIe",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Magnolia_Welch@gmail.com",
                            FirstName = "Leonor",
                            Name = "Goodwin",
                            Password = "zrqOumfURI",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Ken.Collier86@yahoo.com",
                            FirstName = "Guy",
                            Name = "Mosciski",
                            Password = "ACmS0ifleu",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Lindsey_Crooks26@gmail.com",
                            FirstName = "Arlene",
                            Name = "DuBuque",
                            Password = "qhUeFvWzn6",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Marlen.Fahey@yahoo.com",
                            FirstName = "Samara",
                            Name = "Pacocha",
                            Password = "aMgU_6hSpX",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Lavern_Powlowski@hotmail.com",
                            FirstName = "Nedra",
                            Name = "Kunde",
                            Password = "UULhrS23tA",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Mortimer_Dare@yahoo.com",
                            FirstName = "Marguerite",
                            Name = "Schiller",
                            Password = "HqZby4FDat",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Maggie_Conroy@gmail.com",
                            FirstName = "Easter",
                            Name = "Dare",
                            Password = "qFJy29a4pM",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Jerel_Beatty@hotmail.com",
                            FirstName = "Nakia",
                            Name = "Sawayn",
                            Password = "zhWk2j52vl",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Leonor45@gmail.com",
                            FirstName = "Bert",
                            Name = "Lockman",
                            Password = "lSWalt79co",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "61",
                            Email = "Magdalena18@hotmail.com",
                            FirstName = "Charley",
                            Name = "Smitham",
                            Password = "eyCvFaIQdq"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Pedro24@hotmail.com",
                            FirstName = "Kennedy",
                            Name = "Windler",
                            Password = "rSuN_SZKN4"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Terence.Lueilwitz10@hotmail.com",
                            FirstName = "Melody",
                            Name = "Mueller",
                            Password = "BKgrStdFAo"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Colby30@hotmail.com",
                            FirstName = "Hadley",
                            Name = "Schinner",
                            Password = "hpj9rdIYr9"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Kendrick.Effertz20@yahoo.com",
                            FirstName = "Ephraim",
                            Name = "Murray",
                            Password = "Jj48Mv2MwT"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Hassan_Bruen@hotmail.com",
                            FirstName = "Luis",
                            Name = "Kovacek",
                            Password = "7qA4h50z1q"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Mark35@gmail.com",
                            FirstName = "Oran",
                            Name = "Heller",
                            Password = "xZAe9dgH7H"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Mabelle19@yahoo.com",
                            FirstName = "Emmett",
                            Name = "Block",
                            Password = "1MlJ9y3JqE"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Victor.Prosacco63@hotmail.com",
                            FirstName = "Haylee",
                            Name = "Waters",
                            Password = "j5_qMLYNkm"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Nicolette57@hotmail.com",
                            FirstName = "Coleman",
                            Name = "Stanton",
                            Password = "YUajNM6Nef"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("LoadAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "LoadAddressId");

                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("UnloadingAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "UnloadingAddressId");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.HasOne("HELMo_bilite.Models.Vehicule", "Vehicule")
                        .WithMany()
                        .HasForeignKey("IdVehicule");

                    b.Navigation("Client");

                    b.Navigation("Driver");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Navigation("LoadAddress")
                        .IsRequired();

                    b.Navigation("UnloadingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
