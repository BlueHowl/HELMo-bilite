// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508080910_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "90",
                            Country = "Bolivia",
                            Locality = "Lemuelhaven",
                            LocalityCode = "94926-1835",
                            Number = "106",
                            Street = "Metz Vista"
                        },
                        new
                        {
                            IdAddress = "91",
                            Country = "Estonia",
                            Locality = "East Felipahaven",
                            LocalityCode = "10447",
                            Number = "8581",
                            Street = "Ullrich Cape"
                        },
                        new
                        {
                            IdAddress = "92",
                            Country = "Fiji",
                            Locality = "Schillerburgh",
                            LocalityCode = "94392-7837",
                            Number = "91704",
                            Street = "Imani Plains"
                        },
                        new
                        {
                            IdAddress = "93",
                            Country = "Algeria",
                            Locality = "Nicolasbury",
                            LocalityCode = "31974",
                            Number = "47792",
                            Street = "Waelchi Island"
                        },
                        new
                        {
                            IdAddress = "94",
                            Country = "Guinea",
                            Locality = "Brekkefurt",
                            LocalityCode = "74630",
                            Number = "786",
                            Street = "Alfonso Vista"
                        },
                        new
                        {
                            IdAddress = "95",
                            Country = "Barbados",
                            Locality = "Reinachester",
                            LocalityCode = "22535-9340",
                            Number = "86530",
                            Street = "Wisozk Crossing"
                        },
                        new
                        {
                            IdAddress = "96",
                            Country = "New Caledonia",
                            Locality = "West Anitaburgh",
                            LocalityCode = "28140-1322",
                            Number = "07344",
                            Street = "Dietrich Row"
                        },
                        new
                        {
                            IdAddress = "97",
                            Country = "Estonia",
                            Locality = "New Destinee",
                            LocalityCode = "36102-8154",
                            Number = "502",
                            Street = "Berge Union"
                        },
                        new
                        {
                            IdAddress = "98",
                            Country = "Papua New Guinea",
                            Locality = "New Francesco",
                            LocalityCode = "58452",
                            Number = "7502",
                            Street = "O'Kon Loop"
                        },
                        new
                        {
                            IdAddress = "99",
                            Country = "Luxembourg",
                            Locality = "Roslynbury",
                            LocalityCode = "04218",
                            Number = "8690",
                            Street = "Funk Pass"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "PVFJ85JGSXUO57106",
                            Brand = "Smart",
                            IdLicenses = 1,
                            Model = "Countach",
                            Payload = 23000
                        },
                        new
                        {
                            Plate = "SSPT4GZY58O853562",
                            Brand = "Maserati",
                            IdLicenses = 3,
                            Model = "Alpine",
                            Payload = 2000
                        },
                        new
                        {
                            Plate = "2BS8X1TPIWGF97038",
                            Brand = "Tesla",
                            IdLicenses = 1,
                            Model = "Roadster",
                            Payload = 36000
                        },
                        new
                        {
                            Plate = "B5T4K984FGJK94366",
                            Brand = "Nissan",
                            IdLicenses = 3,
                            Model = "Colorado",
                            Payload = 17000
                        },
                        new
                        {
                            Plate = "HZI1ET161FXW19857",
                            Brand = "Porsche",
                            IdLicenses = 3,
                            Model = "Roadster",
                            Payload = 4000
                        },
                        new
                        {
                            Plate = "L0TN99SN5NA488891",
                            Brand = "Smart",
                            IdLicenses = 1,
                            Model = "Beetle",
                            Payload = 34000
                        },
                        new
                        {
                            Plate = "D3T1OFWIDBN338430",
                            Brand = "Aston Martin",
                            IdLicenses = 2,
                            Model = "Ranchero",
                            Payload = 2000
                        },
                        new
                        {
                            Plate = "9W8EGAOQBXIP38812",
                            Brand = "Hyundai",
                            IdLicenses = 2,
                            Model = "911",
                            Payload = 4000
                        },
                        new
                        {
                            Plate = "4CKDGG2E3DVB25896",
                            Brand = "Mazda",
                            IdLicenses = 2,
                            Model = "Sentra",
                            Payload = 24000
                        },
                        new
                        {
                            Plate = "V1L6S9EL57UH87439",
                            Brand = "Polestar",
                            IdLicenses = 1,
                            Model = "Roadster",
                            Payload = 26000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Selmer_Barrows@hotmail.com",
                            FirstName = "Clinton",
                            Name = "Hane",
                            Password = "FYqUlk5Smw",
                            CompanyAddressId = "90",
                            CompanyName = "Howell - Dickens",
                            Number = "339-591-5369"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Ken.Runolfsdottir82@gmail.com",
                            FirstName = "Perry",
                            Name = "Cremin",
                            Password = "8vjVvROWAX",
                            CompanyAddressId = "91",
                            CompanyName = "Pacocha and Sons",
                            Number = "334-984-2129"
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Linwood32@yahoo.com",
                            FirstName = "Richie",
                            Name = "Marquardt",
                            Password = "rDJEUk2LrJ",
                            CompanyAddressId = "92",
                            CompanyName = "Kulas LLC",
                            Number = "965-835-1432"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Grover31@hotmail.com",
                            FirstName = "Gregoria",
                            Name = "Heaney",
                            Password = "9sFbATxkSM",
                            CompanyAddressId = "93",
                            CompanyName = "Ward - Orn",
                            Number = "353-329-8007"
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Chyna89@hotmail.com",
                            FirstName = "Geovanny",
                            Name = "Johns",
                            Password = "ltbF1IZFL3",
                            CompanyAddressId = "94",
                            CompanyName = "Stracke, Jacobi and Huels",
                            Number = "758-810-5625"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Pearl_Stamm@gmail.com",
                            FirstName = "Adelbert",
                            Name = "Rice",
                            Password = "CUwp9Hw_rC",
                            CompanyAddressId = "95",
                            CompanyName = "Connelly, Emard and Weber",
                            Number = "962-695-2696"
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Wendell64@gmail.com",
                            FirstName = "Ona",
                            Name = "Welch",
                            Password = "AleBXUatam",
                            CompanyAddressId = "96",
                            CompanyName = "Thiel, Prosacco and Murphy",
                            Number = "759-308-0015"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Rylan51@hotmail.com",
                            FirstName = "Lauryn",
                            Name = "Nienow",
                            Password = "cBG42dadJg",
                            CompanyAddressId = "97",
                            CompanyName = "O'Connell, Wehner and Crona",
                            Number = "465-739-7978"
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Arnulfo89@yahoo.com",
                            FirstName = "Donavon",
                            Name = "Jaskolski",
                            Password = "xJk9AMBO3J",
                            CompanyAddressId = "98",
                            CompanyName = "Boehm Group",
                            Number = "474-667-6546"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Dan_Gleichner@yahoo.com",
                            FirstName = "Amya",
                            Name = "DuBuque",
                            Password = "sQ36U4IXzp",
                            CompanyAddressId = "99",
                            CompanyName = "Kilback - Herman",
                            Number = "642-705-9397"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Clay.Schuppe11@yahoo.com",
                            FirstName = "Sandra",
                            Name = "Gibson",
                            Password = "sR5BmXUOSW",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Gladys.Quigley98@gmail.com",
                            FirstName = "Micah",
                            Name = "Lynch",
                            Password = "AzaDbcgwcM",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Citlalli3@hotmail.com",
                            FirstName = "Jackson",
                            Name = "Crona",
                            Password = "J89t1snmQ1",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Elton48@hotmail.com",
                            FirstName = "Rosina",
                            Name = "Doyle",
                            Password = "FY79GtoVm1",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Linnie.Oberbrunner@gmail.com",
                            FirstName = "Hiram",
                            Name = "McCullough",
                            Password = "m1aWw3mcsZ",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Vincenza_Strosin91@yahoo.com",
                            FirstName = "Rafaela",
                            Name = "Jaskolski",
                            Password = "J40xDPM7jr",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Vladimir.Wilkinson@hotmail.com",
                            FirstName = "Ruthie",
                            Name = "Harris",
                            Password = "_vLvJY0BGE",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Heath_Crooks@hotmail.com",
                            FirstName = "Gardner",
                            Name = "Lebsack",
                            Password = "BgLiZB3fTa",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Neal46@hotmail.com",
                            FirstName = "Eliezer",
                            Name = "Thompson",
                            Password = "SvMn2U3wVm",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Jameson78@gmail.com",
                            FirstName = "Mariane",
                            Name = "West",
                            Password = "DaSdQAXl37",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "61",
                            Email = "Arnaldo.Macejkovic16@hotmail.com",
                            FirstName = "Sherman",
                            Name = "Smitham",
                            Password = "WecrTy7Nlb"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Myra59@yahoo.com",
                            FirstName = "Madyson",
                            Name = "Block",
                            Password = "305_KpAobN"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Dominic.Rowe@hotmail.com",
                            FirstName = "Bobby",
                            Name = "Leannon",
                            Password = "mrzcQq8xLa"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Chase_Zemlak@hotmail.com",
                            FirstName = "Benton",
                            Name = "Bahringer",
                            Password = "3ezVMlTSnd"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Bernita_Balistreri28@hotmail.com",
                            FirstName = "Katelin",
                            Name = "Gibson",
                            Password = "JO4kOdHOv0"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Estelle_Waters@hotmail.com",
                            FirstName = "Ewell",
                            Name = "Murray",
                            Password = "yWcaXule0c"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Fanny_DAmore45@hotmail.com",
                            FirstName = "Ebba",
                            Name = "Upton",
                            Password = "kgZACBywmu"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Dock.Bergnaum47@yahoo.com",
                            FirstName = "Bridie",
                            Name = "Cole",
                            Password = "zw62ycJNds"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Rebecca.Abernathy6@yahoo.com",
                            FirstName = "Nikolas",
                            Name = "Crona",
                            Password = "tnD_ClFfUv"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Litzy_Dooley@hotmail.com",
                            FirstName = "Jefferey",
                            Name = "Mosciski",
                            Password = "DWtev6DbA2"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });
#pragma warning restore 612, 618
        }
    }
}
