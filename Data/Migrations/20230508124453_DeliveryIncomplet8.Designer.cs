// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508124453_DeliveryIncomplet8")]
    partial class DeliveryIncomplet8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoadAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnloadingAddressId")
                        .HasColumnType("int");

                    b.HasKey("IdAddress");

                    b.HasIndex("LoadAddressId")
                        .IsUnique()
                        .HasFilter("[LoadAddressId] IS NOT NULL");

                    b.HasIndex("UnloadingAddressId")
                        .IsUnique()
                        .HasFilter("[UnloadingAddressId] IS NOT NULL");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "110",
                            Country = "Burundi",
                            Locality = "Lake Maritza",
                            LocalityCode = "22540-7103",
                            Number = "969",
                            Street = "Lakin Well"
                        },
                        new
                        {
                            IdAddress = "111",
                            Country = "Samoa",
                            Locality = "North Diana",
                            LocalityCode = "64035",
                            Number = "8413",
                            Street = "Forrest Coves"
                        },
                        new
                        {
                            IdAddress = "112",
                            Country = "Chile",
                            Locality = "Robelside",
                            LocalityCode = "91692-0336",
                            Number = "3318",
                            Street = "Keshawn Summit"
                        },
                        new
                        {
                            IdAddress = "113",
                            Country = "Senegal",
                            Locality = "Waelchimouth",
                            LocalityCode = "71223",
                            Number = "80825",
                            Street = "Fisher Road"
                        },
                        new
                        {
                            IdAddress = "114",
                            Country = "Haiti",
                            Locality = "South Bertfort",
                            LocalityCode = "71965-0419",
                            Number = "8645",
                            Street = "Skiles Flats"
                        },
                        new
                        {
                            IdAddress = "115",
                            Country = "Martinique",
                            Locality = "Schusterland",
                            LocalityCode = "18082-3791",
                            Number = "0052",
                            Street = "Brionna Walk"
                        },
                        new
                        {
                            IdAddress = "116",
                            Country = "United Kingdom",
                            Locality = "Lednerfurt",
                            LocalityCode = "80830",
                            Number = "764",
                            Street = "Bode Spring"
                        },
                        new
                        {
                            IdAddress = "117",
                            Country = "Haiti",
                            Locality = "Smithberg",
                            LocalityCode = "81778",
                            Number = "8676",
                            Street = "Lucas Lakes"
                        },
                        new
                        {
                            IdAddress = "118",
                            Country = "Chile",
                            Locality = "Schmidtland",
                            LocalityCode = "41971",
                            Number = "4944",
                            Street = "Sawayn Causeway"
                        },
                        new
                        {
                            IdAddress = "119",
                            Country = "Liechtenstein",
                            Locality = "Adamstown",
                            LocalityCode = "04835-9496",
                            Number = "6931",
                            Street = "Kristopher Lane"
                        },
                        new
                        {
                            IdAddress = "140",
                            Country = "Tanzania",
                            Locality = "Bauchborough",
                            LocalityCode = "24442-6689",
                            Number = "9663",
                            Street = "Casandra Greens"
                        },
                        new
                        {
                            IdAddress = "142",
                            Country = "Gambia",
                            Locality = "Kadinshire",
                            LocalityCode = "11693",
                            Number = "6467",
                            Street = "Derick Creek"
                        },
                        new
                        {
                            IdAddress = "144",
                            Country = "Zambia",
                            Locality = "New Aubree",
                            LocalityCode = "61297",
                            Number = "8129",
                            Street = "Erick Fields"
                        },
                        new
                        {
                            IdAddress = "146",
                            Country = "Vanuatu",
                            Locality = "Littlestad",
                            LocalityCode = "21532",
                            Number = "89870",
                            Street = "Hickle Brooks"
                        },
                        new
                        {
                            IdAddress = "148",
                            Country = "Senegal",
                            Locality = "South Quincy",
                            LocalityCode = "74262",
                            Number = "8378",
                            Street = "Jameson Greens"
                        },
                        new
                        {
                            IdAddress = "150",
                            Country = "Swaziland",
                            Locality = "Lake Roberto",
                            LocalityCode = "56382-5458",
                            Number = "83340",
                            Street = "Bauch Causeway"
                        },
                        new
                        {
                            IdAddress = "152",
                            Country = "Gabon",
                            Locality = "Marciabury",
                            LocalityCode = "54940-7975",
                            Number = "936",
                            Street = "Oran Bypass"
                        },
                        new
                        {
                            IdAddress = "154",
                            Country = "United Kingdom",
                            Locality = "Corwinbury",
                            LocalityCode = "42401",
                            Number = "9356",
                            Street = "Prosacco Stravenue"
                        },
                        new
                        {
                            IdAddress = "156",
                            Country = "Turkey",
                            Locality = "Robertberg",
                            LocalityCode = "09708-0755",
                            Number = "0903",
                            Street = "Bessie Flat"
                        },
                        new
                        {
                            IdAddress = "158",
                            Country = "Timor-Leste",
                            Locality = "Brownberg",
                            LocalityCode = "39199-3246",
                            Number = "43317",
                            Street = "Hardy Estate"
                        },
                        new
                        {
                            IdAddress = "141",
                            Country = "United States of America",
                            Locality = "Grayceburgh",
                            LocalityCode = "92498",
                            Number = "972",
                            Street = "Willms Hill"
                        },
                        new
                        {
                            IdAddress = "143",
                            Country = "Benin",
                            Locality = "East Hermann",
                            LocalityCode = "13000-5378",
                            Number = "847",
                            Street = "Ruecker Cove"
                        },
                        new
                        {
                            IdAddress = "145",
                            Country = "Barbados",
                            Locality = "Russelland",
                            LocalityCode = "91260-4434",
                            Number = "43762",
                            Street = "Dallin Dale"
                        },
                        new
                        {
                            IdAddress = "147",
                            Country = "Niue",
                            Locality = "New Serena",
                            LocalityCode = "15055-0974",
                            Number = "17703",
                            Street = "Xavier Rest"
                        },
                        new
                        {
                            IdAddress = "149",
                            Country = "Tonga",
                            Locality = "Satterfieldport",
                            LocalityCode = "29361",
                            Number = "893",
                            Street = "Smitham Lights"
                        },
                        new
                        {
                            IdAddress = "151",
                            Country = "Namibia",
                            Locality = "East Josh",
                            LocalityCode = "18272-3663",
                            Number = "13562",
                            Street = "Brennan Passage"
                        },
                        new
                        {
                            IdAddress = "153",
                            Country = "Venezuela",
                            Locality = "Framiberg",
                            LocalityCode = "55807",
                            Number = "9135",
                            Street = "Mayert Gateway"
                        },
                        new
                        {
                            IdAddress = "155",
                            Country = "Timor-Leste",
                            Locality = "Port Sydnieborough",
                            LocalityCode = "75096",
                            Number = "7968",
                            Street = "Daugherty Street"
                        },
                        new
                        {
                            IdAddress = "157",
                            Country = "New Caledonia",
                            Locality = "Jayneside",
                            LocalityCode = "04184",
                            Number = "3878",
                            Street = "Heathcote Trail"
                        },
                        new
                        {
                            IdAddress = "159",
                            Country = "Spain",
                            Locality = "Lake Stella",
                            LocalityCode = "08299",
                            Number = "6762",
                            Street = "Harmon Mountain"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdVehicule")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoadAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnloadingAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnloadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDriver");

                    b.HasIndex("IdVehicule");

                    b.ToTable("Deliveries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "livaison 0",
                            IdClient = "120",
                            IdVehicule = "DWIS44PS3QK872829",
                            LoadAddressId = "140",
                            LoadDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "141",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "DWIS44PS3QK872829",
                            Brand = "Nissan",
                            IdLicenses = 3,
                            Model = "Grand Caravan",
                            Payload = 8000
                        },
                        new
                        {
                            Plate = "S5ZBFD9PYNHD83834",
                            Brand = "Cadillac",
                            IdLicenses = 2,
                            Model = "El Camino",
                            Payload = 38000
                        },
                        new
                        {
                            Plate = "6HDMWQ9VTRNI17254",
                            Brand = "Volkswagen",
                            IdLicenses = 2,
                            Model = "Fortwo",
                            Payload = 33000
                        },
                        new
                        {
                            Plate = "DI2NEKZ2GMHD19035",
                            Brand = "Maserati",
                            IdLicenses = 3,
                            Model = "Fortwo",
                            Payload = 10000
                        },
                        new
                        {
                            Plate = "0QCVS6SGQXPH59993",
                            Brand = "Bugatti",
                            IdLicenses = 1,
                            Model = "Mustang",
                            Payload = 14000
                        },
                        new
                        {
                            Plate = "4TI8S6HWL1IK43079",
                            Brand = "Bugatti",
                            IdLicenses = 1,
                            Model = "Silverado",
                            Payload = 16000
                        },
                        new
                        {
                            Plate = "89MO0LNH93P178738",
                            Brand = "Kia",
                            IdLicenses = 3,
                            Model = "Malibu",
                            Payload = 18000
                        },
                        new
                        {
                            Plate = "HDLHCGSOGWOZ84838",
                            Brand = "BMW",
                            IdLicenses = 3,
                            Model = "ATS",
                            Payload = 28000
                        },
                        new
                        {
                            Plate = "B1TM5Q41LWWO51517",
                            Brand = "Chevrolet",
                            IdLicenses = 2,
                            Model = "Impala",
                            Payload = 15000
                        },
                        new
                        {
                            Plate = "NT6JJ4O45PQQ99068",
                            Brand = "Lamborghini",
                            IdLicenses = 2,
                            Model = "V90",
                            Payload = 7000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "120",
                            Email = "Vladimir86@gmail.com",
                            FirstName = "Wade",
                            Name = "Batz",
                            Password = "W92zT0LHMm",
                            CompanyAddressId = "110",
                            CompanyName = "Gislason, Prohaska and Schoen",
                            Number = "571-917-3099"
                        },
                        new
                        {
                            Matricule = "121",
                            Email = "Samara71@yahoo.com",
                            FirstName = "Frederique",
                            Name = "Hickle",
                            Password = "Sw75ZNTchH",
                            CompanyAddressId = "111",
                            CompanyName = "Wuckert, Langosh and Franecki",
                            Number = "519-331-5548"
                        },
                        new
                        {
                            Matricule = "122",
                            Email = "Arvid82@yahoo.com",
                            FirstName = "Flossie",
                            Name = "O'Reilly",
                            Password = "U8QlPp2RHs",
                            CompanyAddressId = "112",
                            CompanyName = "Kulas and Sons",
                            Number = "222-801-9696"
                        },
                        new
                        {
                            Matricule = "123",
                            Email = "Alexandria.Kemmer4@yahoo.com",
                            FirstName = "Eulah",
                            Name = "Hoppe",
                            Password = "2jViDRmGp8",
                            CompanyAddressId = "113",
                            CompanyName = "O'Conner LLC",
                            Number = "326-297-9017"
                        },
                        new
                        {
                            Matricule = "124",
                            Email = "Cortney_Moen@yahoo.com",
                            FirstName = "Elenor",
                            Name = "Rodriguez",
                            Password = "ozgo4lgeZX",
                            CompanyAddressId = "114",
                            CompanyName = "Halvorson, Sporer and Ryan",
                            Number = "398-618-6554"
                        },
                        new
                        {
                            Matricule = "125",
                            Email = "Cordell_Predovic51@gmail.com",
                            FirstName = "Deshaun",
                            Name = "McLaughlin",
                            Password = "pj1Wb4JbdW",
                            CompanyAddressId = "115",
                            CompanyName = "Adams Group",
                            Number = "479-648-6729"
                        },
                        new
                        {
                            Matricule = "126",
                            Email = "Eugene_Zemlak14@yahoo.com",
                            FirstName = "Jalon",
                            Name = "Donnelly",
                            Password = "Aa7cEq0dVG",
                            CompanyAddressId = "116",
                            CompanyName = "Abshire, Bednar and Mosciski",
                            Number = "878-331-7651"
                        },
                        new
                        {
                            Matricule = "127",
                            Email = "Joyce_Lind38@hotmail.com",
                            FirstName = "Aylin",
                            Name = "Schoen",
                            Password = "NTwawNSDKK",
                            CompanyAddressId = "117",
                            CompanyName = "Maggio, Armstrong and Williamson",
                            Number = "794-516-7118"
                        },
                        new
                        {
                            Matricule = "128",
                            Email = "Queenie.Rice@yahoo.com",
                            FirstName = "Arden",
                            Name = "Corkery",
                            Password = "eEHUGkILYR",
                            CompanyAddressId = "118",
                            CompanyName = "Rowe - Predovic",
                            Number = "219-560-1097"
                        },
                        new
                        {
                            Matricule = "129",
                            Email = "Flossie80@yahoo.com",
                            FirstName = "Estel",
                            Name = "Mraz",
                            Password = "kpHu40vZhw",
                            CompanyAddressId = "119",
                            CompanyName = "Bernier - Kuvalis",
                            Number = "383-342-2036"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Deron_Denesik@hotmail.com",
                            FirstName = "Liam",
                            Name = "Schultz",
                            Password = "f9n2k0Uhjy",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Armand82@hotmail.com",
                            FirstName = "Russ",
                            Name = "O'Hara",
                            Password = "YtY_RelWbz",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Leone12@gmail.com",
                            FirstName = "Conrad",
                            Name = "Fisher",
                            Password = "DR0e_yoF3I",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Rowena_Wisoky@gmail.com",
                            FirstName = "Rickie",
                            Name = "Becker",
                            Password = "rdANfxMytx",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Ryann.Nader59@gmail.com",
                            FirstName = "Jovanny",
                            Name = "Cassin",
                            Password = "Rlwk941nTn",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Zoey_Prosacco20@hotmail.com",
                            FirstName = "Stefan",
                            Name = "Wiegand",
                            Password = "ifJYhT583a",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Jonas_Raynor8@hotmail.com",
                            FirstName = "Mireille",
                            Name = "Larkin",
                            Password = "nAxlAEX2fv",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Dane35@yahoo.com",
                            FirstName = "Queen",
                            Name = "Dare",
                            Password = "q6uEGggAVD",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Adolf.Runolfsdottir@yahoo.com",
                            FirstName = "Rowland",
                            Name = "Grady",
                            Password = "H2dKZyY_m6",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Kenna.Predovic79@gmail.com",
                            FirstName = "Obie",
                            Name = "Jast",
                            Password = "ndAhVHXr6Z",
                            IdCertification = 3
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "81",
                            Email = "Braeden.Tromp17@hotmail.com",
                            FirstName = "Dorothy",
                            Name = "Witting",
                            Password = "_ckPUqqxeC"
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Araceli.Weber65@yahoo.com",
                            FirstName = "Bettie",
                            Name = "Windler",
                            Password = "9n9tun0zgm"
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Mitchel93@yahoo.com",
                            FirstName = "Jeremy",
                            Name = "Bogan",
                            Password = "B3cJorTTmC"
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Maritza_Rohan@yahoo.com",
                            FirstName = "Jody",
                            Name = "Trantow",
                            Password = "uFhUzy_Pni"
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Verner_Metz@gmail.com",
                            FirstName = "Deven",
                            Name = "McLaughlin",
                            Password = "Bvd7UMapAs"
                        },
                        new
                        {
                            Matricule = "91",
                            Email = "Rashawn.Rau82@hotmail.com",
                            FirstName = "Milford",
                            Name = "Treutel",
                            Password = "5j7njjCXWQ"
                        },
                        new
                        {
                            Matricule = "93",
                            Email = "Rashad_Denesik99@gmail.com",
                            FirstName = "Eulalia",
                            Name = "Schneider",
                            Password = "THxKY14x5X"
                        },
                        new
                        {
                            Matricule = "95",
                            Email = "Roel8@gmail.com",
                            FirstName = "Angelo",
                            Name = "Baumbach",
                            Password = "UPYcedRonl"
                        },
                        new
                        {
                            Matricule = "97",
                            Email = "Vita_Hackett90@gmail.com",
                            FirstName = "Claud",
                            Name = "Fisher",
                            Password = "TZhJYvJDi4"
                        },
                        new
                        {
                            Matricule = "99",
                            Email = "Hillary70@gmail.com",
                            FirstName = "Lincoln",
                            Name = "Douglas",
                            Password = "ogrMsE6bkw"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("LoadAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "LoadAddressId");

                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("UnloadingAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "UnloadingAddressId");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.HasOne("HELMo_bilite.Models.Vehicule", "Vehicule")
                        .WithMany()
                        .HasForeignKey("IdVehicule");

                    b.Navigation("Client");

                    b.Navigation("Driver");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Navigation("LoadAddress")
                        .IsRequired();

                    b.Navigation("UnloadingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
