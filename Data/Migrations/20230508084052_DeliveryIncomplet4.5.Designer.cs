// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508084052_DeliveryIncomplet4.5")]
    partial class DeliveryIncomplet45
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoadAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnloadingAddressId")
                        .HasColumnType("int");

                    b.HasKey("IdAddress");

                    b.HasIndex("LoadAddressId")
                        .IsUnique()
                        .HasFilter("[LoadAddressId] IS NOT NULL");

                    b.HasIndex("UnloadingAddressId")
                        .IsUnique()
                        .HasFilter("[UnloadingAddressId] IS NOT NULL");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "90",
                            Country = "Anguilla",
                            Locality = "Jamiehaven",
                            LocalityCode = "44136-5081",
                            Number = "8203",
                            Street = "Kyleigh Views"
                        },
                        new
                        {
                            IdAddress = "91",
                            Country = "Cayman Islands",
                            Locality = "Lake Bailee",
                            LocalityCode = "34380-5585",
                            Number = "0448",
                            Street = "Rey Points"
                        },
                        new
                        {
                            IdAddress = "92",
                            Country = "Iceland",
                            Locality = "Langmouth",
                            LocalityCode = "19051-4476",
                            Number = "894",
                            Street = "Rylan Keys"
                        },
                        new
                        {
                            IdAddress = "93",
                            Country = "Mauritius",
                            Locality = "Botsfordburgh",
                            LocalityCode = "62382-1118",
                            Number = "10847",
                            Street = "Eriberto Park"
                        },
                        new
                        {
                            IdAddress = "94",
                            Country = "Austria",
                            Locality = "Port Jonbury",
                            LocalityCode = "09552",
                            Number = "935",
                            Street = "Torp Ville"
                        },
                        new
                        {
                            IdAddress = "95",
                            Country = "Aruba",
                            Locality = "Crystelberg",
                            LocalityCode = "85477-8414",
                            Number = "51573",
                            Street = "Frami Centers"
                        },
                        new
                        {
                            IdAddress = "96",
                            Country = "Bulgaria",
                            Locality = "Faheyton",
                            LocalityCode = "32983",
                            Number = "189",
                            Street = "Mortimer Oval"
                        },
                        new
                        {
                            IdAddress = "97",
                            Country = "Canada",
                            Locality = "Sipesmouth",
                            LocalityCode = "53131-3023",
                            Number = "0678",
                            Street = "Gerhold Tunnel"
                        },
                        new
                        {
                            IdAddress = "98",
                            Country = "Bosnia and Herzegovina",
                            Locality = "Markville",
                            LocalityCode = "21278",
                            Number = "21203",
                            Street = "Meda Mall"
                        },
                        new
                        {
                            IdAddress = "99",
                            Country = "Hungary",
                            Locality = "Anitaton",
                            LocalityCode = "08326",
                            Number = "4013",
                            Street = "Rodriguez Spurs"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDispatcher")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LoadAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnloadingAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnloadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDispatcher");

                    b.HasIndex("IdDriver");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "KXOMJ7A7UABW88687",
                            Brand = "Porsche",
                            IdLicenses = 3,
                            Model = "Mustang",
                            Payload = 20000
                        },
                        new
                        {
                            Plate = "OXXQDNRKXLFV36481",
                            Brand = "Mini",
                            IdLicenses = 3,
                            Model = "2",
                            Payload = 13000
                        },
                        new
                        {
                            Plate = "YUFDPAE3QEOM83916",
                            Brand = "Nissan",
                            IdLicenses = 1,
                            Model = "PT Cruiser",
                            Payload = 40000
                        },
                        new
                        {
                            Plate = "67IGR099DVY556591",
                            Brand = "Volvo",
                            IdLicenses = 2,
                            Model = "Sentra",
                            Payload = 38000
                        },
                        new
                        {
                            Plate = "6Y1HUZPJA5SB80574",
                            Brand = "Jaguar",
                            IdLicenses = 2,
                            Model = "Spyder",
                            Payload = 10000
                        },
                        new
                        {
                            Plate = "9T64915NZ3BU19883",
                            Brand = "Fiat",
                            IdLicenses = 3,
                            Model = "Grand Caravan",
                            Payload = 38000
                        },
                        new
                        {
                            Plate = "YCR739LKFRIW39986",
                            Brand = "Fiat",
                            IdLicenses = 3,
                            Model = "Focus",
                            Payload = 28000
                        },
                        new
                        {
                            Plate = "S7P3UHAFKSH298884",
                            Brand = "Polestar",
                            IdLicenses = 1,
                            Model = "Corvette",
                            Payload = 6000
                        },
                        new
                        {
                            Plate = "7FA7IOIT7IKU37067",
                            Brand = "Volvo",
                            IdLicenses = 3,
                            Model = "Civic",
                            Payload = 36000
                        },
                        new
                        {
                            Plate = "Y3XC4JLPH2K514062",
                            Brand = "Jeep",
                            IdLicenses = 2,
                            Model = "Prius",
                            Payload = 23000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Orin42@yahoo.com",
                            FirstName = "Rocky",
                            Name = "Ebert",
                            Password = "4Jeb2igbGV",
                            CompanyAddressId = "90",
                            CompanyName = "Bauch LLC",
                            Number = "706-845-0400"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Mona.Cole62@gmail.com",
                            FirstName = "Crystel",
                            Name = "Kshlerin",
                            Password = "ZDHhvnzdgW",
                            CompanyAddressId = "91",
                            CompanyName = "Crist Group",
                            Number = "786-548-7926"
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Rosa.Mante@yahoo.com",
                            FirstName = "Meagan",
                            Name = "Rippin",
                            Password = "EhHV2ELutf",
                            CompanyAddressId = "92",
                            CompanyName = "Treutel, Turner and Lemke",
                            Number = "563-216-1273"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Abigale41@hotmail.com",
                            FirstName = "Mandy",
                            Name = "Barrows",
                            Password = "Gko5Re8GzC",
                            CompanyAddressId = "93",
                            CompanyName = "McCullough LLC",
                            Number = "929-871-8865"
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Christine56@yahoo.com",
                            FirstName = "Dangelo",
                            Name = "Thiel",
                            Password = "c7uNnlpw3D",
                            CompanyAddressId = "94",
                            CompanyName = "Crist, VonRueden and Robel",
                            Number = "687-830-7428"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Morris28@yahoo.com",
                            FirstName = "Eddie",
                            Name = "MacGyver",
                            Password = "oj60W9dQ3W",
                            CompanyAddressId = "95",
                            CompanyName = "Shields LLC",
                            Number = "357-218-9160"
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Crystal_Larkin0@gmail.com",
                            FirstName = "Gabriel",
                            Name = "Jenkins",
                            Password = "LG9fHjbkl1",
                            CompanyAddressId = "96",
                            CompanyName = "Rolfson, Connelly and Moen",
                            Number = "253-250-5579"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Chloe.Boyle@hotmail.com",
                            FirstName = "Santa",
                            Name = "Dooley",
                            Password = "_atRZLhSGt",
                            CompanyAddressId = "97",
                            CompanyName = "Morissette - Towne",
                            Number = "390-648-8623"
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Stephon.Harris@hotmail.com",
                            FirstName = "Ethyl",
                            Name = "Rice",
                            Password = "1thWE2l0Qf",
                            CompanyAddressId = "98",
                            CompanyName = "Barton Inc",
                            Number = "270-782-7509"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Eveline.Walter34@yahoo.com",
                            FirstName = "Brant",
                            Name = "Gorczany",
                            Password = "EXgPstvOt7",
                            CompanyAddressId = "99",
                            CompanyName = "Kertzmann - Funk",
                            Number = "433-782-5153"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Henderson77@hotmail.com",
                            FirstName = "Mohamed",
                            Name = "Hudson",
                            Password = "ps9i6r4DZJ",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Wilfredo50@hotmail.com",
                            FirstName = "Sherman",
                            Name = "Halvorson",
                            Password = "NvRzulhF9U",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Tillman_Renner@yahoo.com",
                            FirstName = "Faustino",
                            Name = "Streich",
                            Password = "909_JrkAFL",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Phyllis18@hotmail.com",
                            FirstName = "Emmett",
                            Name = "Kris",
                            Password = "plYQETfPKV",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Brennan40@yahoo.com",
                            FirstName = "Laurianne",
                            Name = "Marquardt",
                            Password = "OHzyP_kISU",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Kathryne75@gmail.com",
                            FirstName = "Nathan",
                            Name = "Goyette",
                            Password = "S2DpIYjx90",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Yolanda_Cassin@hotmail.com",
                            FirstName = "Loren",
                            Name = "Greenholt",
                            Password = "ZOMijlRsii",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Wilfrid_Corkery23@hotmail.com",
                            FirstName = "Seamus",
                            Name = "Gusikowski",
                            Password = "uD4zt0QhVv",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Claudia97@hotmail.com",
                            FirstName = "Rose",
                            Name = "Schmidt",
                            Password = "mj08tGnliv",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Savanna.Conn@hotmail.com",
                            FirstName = "Nicolas",
                            Name = "Bins",
                            Password = "D_0pDGfiim",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "61",
                            Email = "Shayna.Kerluke@gmail.com",
                            FirstName = "Gianni",
                            Name = "Mante",
                            Password = "1FgUC_q0cr"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Hilma73@yahoo.com",
                            FirstName = "Rigoberto",
                            Name = "Jones",
                            Password = "LeTRGnTRht"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Napoleon_Baumbach7@yahoo.com",
                            FirstName = "Mazie",
                            Name = "Heidenreich",
                            Password = "V_30zeRUbb"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Oceane_Gulgowski56@hotmail.com",
                            FirstName = "Zack",
                            Name = "Pouros",
                            Password = "Aa0DkfhWu0"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Alejandra45@hotmail.com",
                            FirstName = "Lesly",
                            Name = "McClure",
                            Password = "uaN27sukeQ"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Osvaldo.Purdy3@yahoo.com",
                            FirstName = "Macy",
                            Name = "O'Keefe",
                            Password = "d9RGObgQQV"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Darion_Grant89@gmail.com",
                            FirstName = "Werner",
                            Name = "Parisian",
                            Password = "l_l3si_Cx3"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Isaias_Langworth@hotmail.com",
                            FirstName = "Fidel",
                            Name = "Schumm",
                            Password = "oCdlHshj6A"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Nichole_Hodkiewicz@gmail.com",
                            FirstName = "Giles",
                            Name = "Nader",
                            Password = "0uQNw4rdBq"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Hanna.Walker@gmail.com",
                            FirstName = "Gerardo",
                            Name = "Maggio",
                            Password = "VtJW35w5lK"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("LoadAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "LoadAddressId");

                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("UnloadingAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "UnloadingAddressId");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Dispatcher", "Dispatcher")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDispatcher");

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.Navigation("Client");

                    b.Navigation("Dispatcher");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Navigation("LoadAddress")
                        .IsRequired();

                    b.Navigation("UnloadingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
