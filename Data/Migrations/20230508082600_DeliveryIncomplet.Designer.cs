// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508082600_DeliveryIncomplet")]
    partial class DeliveryIncomplet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "90",
                            Country = "Guernsey",
                            Locality = "New Immanuelview",
                            LocalityCode = "41101-1158",
                            Number = "28925",
                            Street = "Nienow Terrace"
                        },
                        new
                        {
                            IdAddress = "91",
                            Country = "Iraq",
                            Locality = "Uptonmouth",
                            LocalityCode = "90247",
                            Number = "994",
                            Street = "Selena Manor"
                        },
                        new
                        {
                            IdAddress = "92",
                            Country = "Luxembourg",
                            Locality = "Maureenburgh",
                            LocalityCode = "54772-9611",
                            Number = "944",
                            Street = "Carlo Expressway"
                        },
                        new
                        {
                            IdAddress = "93",
                            Country = "Guatemala",
                            Locality = "East Lisetteport",
                            LocalityCode = "52758-7732",
                            Number = "5570",
                            Street = "Wintheiser Orchard"
                        },
                        new
                        {
                            IdAddress = "94",
                            Country = "Turkmenistan",
                            Locality = "East Muhammadstad",
                            LocalityCode = "38578",
                            Number = "946",
                            Street = "Barney Road"
                        },
                        new
                        {
                            IdAddress = "95",
                            Country = "Malta",
                            Locality = "Lake Benjaminfort",
                            LocalityCode = "00838-1522",
                            Number = "38603",
                            Street = "Reilly Meadows"
                        },
                        new
                        {
                            IdAddress = "96",
                            Country = "Trinidad and Tobago",
                            Locality = "Moniquebury",
                            LocalityCode = "14508-4080",
                            Number = "48659",
                            Street = "Frederic Glen"
                        },
                        new
                        {
                            IdAddress = "97",
                            Country = "China",
                            Locality = "Lake Tomasaton",
                            LocalityCode = "33979",
                            Number = "75457",
                            Street = "McClure Creek"
                        },
                        new
                        {
                            IdAddress = "98",
                            Country = "Switzerland",
                            Locality = "Marquardtmouth",
                            LocalityCode = "31302",
                            Number = "770",
                            Street = "Roob Road"
                        },
                        new
                        {
                            IdAddress = "99",
                            Country = "Tajikistan",
                            Locality = "Elianfort",
                            LocalityCode = "42604-0814",
                            Number = "49368",
                            Street = "Stark Forest"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DispatcherMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DriverMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DispatcherMatricule");

                    b.HasIndex("DriverMatricule");

                    b.HasIndex("IdClient");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "YYQL5B636EBS40228",
                            Brand = "Kia",
                            IdLicenses = 3,
                            Model = "Durango",
                            Payload = 30000
                        },
                        new
                        {
                            Plate = "5RGQ818Z8PJI68875",
                            Brand = "Mercedes Benz",
                            IdLicenses = 3,
                            Model = "Altima",
                            Payload = 22000
                        },
                        new
                        {
                            Plate = "EM4CTQUHIVH014878",
                            Brand = "Mini",
                            IdLicenses = 1,
                            Model = "Element",
                            Payload = 34000
                        },
                        new
                        {
                            Plate = "0G0VA08FL7YN53142",
                            Brand = "Lamborghini",
                            IdLicenses = 3,
                            Model = "Grand Cherokee",
                            Payload = 17000
                        },
                        new
                        {
                            Plate = "85QCVRNPROKM65452",
                            Brand = "Bentley",
                            IdLicenses = 2,
                            Model = "Colorado",
                            Payload = 24000
                        },
                        new
                        {
                            Plate = "C47EDOECQ2NK74107",
                            Brand = "Honda",
                            IdLicenses = 1,
                            Model = "Grand Cherokee",
                            Payload = 33000
                        },
                        new
                        {
                            Plate = "CHZIF6I26IO293610",
                            Brand = "Smart",
                            IdLicenses = 2,
                            Model = "Impala",
                            Payload = 6000
                        },
                        new
                        {
                            Plate = "64PTNOXYHOV478797",
                            Brand = "Porsche",
                            IdLicenses = 1,
                            Model = "Durango",
                            Payload = 33000
                        },
                        new
                        {
                            Plate = "MR3NCMLXYLMS92580",
                            Brand = "Porsche",
                            IdLicenses = 1,
                            Model = "LeBaron",
                            Payload = 23000
                        },
                        new
                        {
                            Plate = "VMSY366853RF41669",
                            Brand = "Volkswagen",
                            IdLicenses = 2,
                            Model = "Taurus",
                            Payload = 4000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Matilda.Schoen3@hotmail.com",
                            FirstName = "Santina",
                            Name = "Bechtelar",
                            Password = "T4Htxnzgj7",
                            CompanyAddressId = "90",
                            CompanyName = "Kulas - Streich",
                            Number = "652-420-6021"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Jadon10@yahoo.com",
                            FirstName = "Lorena",
                            Name = "Mraz",
                            Password = "z4QsnarPIy",
                            CompanyAddressId = "91",
                            CompanyName = "Senger - Huel",
                            Number = "877-477-7166"
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Elissa21@yahoo.com",
                            FirstName = "Adriana",
                            Name = "Effertz",
                            Password = "glY6dBHarM",
                            CompanyAddressId = "92",
                            CompanyName = "Feil, Predovic and Erdman",
                            Number = "813-312-0203"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Rhianna.Botsford@gmail.com",
                            FirstName = "Maeve",
                            Name = "Grady",
                            Password = "UaFF9idAic",
                            CompanyAddressId = "93",
                            CompanyName = "Swift, Wyman and Carroll",
                            Number = "401-640-9701"
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Arvilla.Koss69@hotmail.com",
                            FirstName = "Dayton",
                            Name = "Abbott",
                            Password = "rErNa3SS3G",
                            CompanyAddressId = "94",
                            CompanyName = "Ward, Daniel and Stark",
                            Number = "552-234-4429"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Ralph.Ebert80@hotmail.com",
                            FirstName = "Frida",
                            Name = "Koss",
                            Password = "NxZGNF31m5",
                            CompanyAddressId = "95",
                            CompanyName = "Larkin LLC",
                            Number = "864-613-8430"
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Cicero.Zulauf75@yahoo.com",
                            FirstName = "Frida",
                            Name = "Rutherford",
                            Password = "vERuqu1dGT",
                            CompanyAddressId = "96",
                            CompanyName = "Becker, Schmeler and Zulauf",
                            Number = "720-667-0437"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Eleazar.OConnell15@gmail.com",
                            FirstName = "Aurelio",
                            Name = "Cormier",
                            Password = "cmz4Jjdfdq",
                            CompanyAddressId = "97",
                            CompanyName = "Roob - Fahey",
                            Number = "757-501-6931"
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Calista77@yahoo.com",
                            FirstName = "Izabella",
                            Name = "Adams",
                            Password = "EUbvLOxw1A",
                            CompanyAddressId = "98",
                            CompanyName = "Pollich and Sons",
                            Number = "695-535-9367"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Daniella6@gmail.com",
                            FirstName = "Douglas",
                            Name = "Kuphal",
                            Password = "qA2s6xj36Z",
                            CompanyAddressId = "99",
                            CompanyName = "Steuber - Hauck",
                            Number = "378-471-2422"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Edison_Cole73@gmail.com",
                            FirstName = "Buford",
                            Name = "Fadel",
                            Password = "s68o6YoU1W",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Garth_Feeney49@yahoo.com",
                            FirstName = "Cleveland",
                            Name = "Osinski",
                            Password = "wbiaiBLxaX",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Abigale95@gmail.com",
                            FirstName = "Randy",
                            Name = "Sanford",
                            Password = "tNYkdClucB",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Juliana88@hotmail.com",
                            FirstName = "Cornelius",
                            Name = "Mann",
                            Password = "w6edsmb8Qo",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Americo27@gmail.com",
                            FirstName = "Brando",
                            Name = "Kuvalis",
                            Password = "MYJhSMRojd",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Adalberto_Kemmer@hotmail.com",
                            FirstName = "Whitney",
                            Name = "Lang",
                            Password = "6UoGte8kKP",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Nicola_Stark37@yahoo.com",
                            FirstName = "Jakayla",
                            Name = "Effertz",
                            Password = "D5hXfMP0un",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Conor_Christiansen74@gmail.com",
                            FirstName = "Clinton",
                            Name = "Hodkiewicz",
                            Password = "eZ9GPKnTKn",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Brianne.Bartell12@yahoo.com",
                            FirstName = "Carroll",
                            Name = "Koelpin",
                            Password = "XkIOmBZ36O",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Leopoldo51@yahoo.com",
                            FirstName = "Cristobal",
                            Name = "Marks",
                            Password = "vKhi4KXpGk",
                            IdCertification = 3
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "61",
                            Email = "Ally.Gleason88@yahoo.com",
                            FirstName = "Jacquelyn",
                            Name = "Erdman",
                            Password = "rjfPIAJ7hv"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Odie.Gaylord@hotmail.com",
                            FirstName = "Jaren",
                            Name = "Predovic",
                            Password = "3xOlX_YCTY"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Curt.Hickle90@gmail.com",
                            FirstName = "Shanny",
                            Name = "Runolfsson",
                            Password = "TNMYjFQgXk"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Clemmie_Ebert@gmail.com",
                            FirstName = "Ethelyn",
                            Name = "Hane",
                            Password = "5lgXZZsOIy"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Modesto.Connelly@gmail.com",
                            FirstName = "Theresa",
                            Name = "Rogahn",
                            Password = "9gNVOLCmki"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Kenton_Hansen64@yahoo.com",
                            FirstName = "Gregorio",
                            Name = "Nikolaus",
                            Password = "i9Z1X0E7JQ"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Barbara.Kulas17@gmail.com",
                            FirstName = "Emmalee",
                            Name = "Hayes",
                            Password = "62aN4r5qqM"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Art14@hotmail.com",
                            FirstName = "Dallin",
                            Name = "Gleason",
                            Password = "X5M4u6KC93"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Hipolito81@gmail.com",
                            FirstName = "Cleora",
                            Name = "Auer",
                            Password = "12Dal5XZAv"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Earnestine.Brakus4@hotmail.com",
                            FirstName = "Lennie",
                            Name = "Collins",
                            Password = "HmcqDzjcOe"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Dispatcher", null)
                        .WithMany("Deliverys")
                        .HasForeignKey("DispatcherMatricule");

                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany("Deliverys")
                        .HasForeignKey("DriverMatricule");

                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
