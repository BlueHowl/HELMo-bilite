// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507172028_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            IdAddress = "60",
                            Country = "Suriname",
                            Locality = "South Ernestina",
                            LocalityCode = "28387-6071",
                            Number = "42849",
                            Street = "Berge Shores"
                        },
                        new
                        {
                            IdAddress = "61",
                            Country = "American Samoa",
                            Locality = "Catharinemouth",
                            LocalityCode = "89588",
                            Number = "7877",
                            Street = "Emiliano Cove"
                        },
                        new
                        {
                            IdAddress = "62",
                            Country = "Myanmar",
                            Locality = "South Tinaville",
                            LocalityCode = "96975",
                            Number = "315",
                            Street = "Gottlieb Corners"
                        },
                        new
                        {
                            IdAddress = "63",
                            Country = "Equatorial Guinea",
                            Locality = "East Eldonshire",
                            LocalityCode = "52809-3498",
                            Number = "8999",
                            Street = "Richmond Haven"
                        },
                        new
                        {
                            IdAddress = "64",
                            Country = "Malawi",
                            Locality = "South Susanna",
                            LocalityCode = "87414",
                            Number = "234",
                            Street = "Timmy Viaduct"
                        },
                        new
                        {
                            IdAddress = "65",
                            Country = "Qatar",
                            Locality = "Bernhardland",
                            LocalityCode = "64338",
                            Number = "554",
                            Street = "Buckridge Dam"
                        },
                        new
                        {
                            IdAddress = "66",
                            Country = "Kenya",
                            Locality = "Mattiemouth",
                            LocalityCode = "18117",
                            Number = "9444",
                            Street = "Madisyn Ridges"
                        },
                        new
                        {
                            IdAddress = "67",
                            Country = "Suriname",
                            Locality = "O'Haramouth",
                            LocalityCode = "09276",
                            Number = "02406",
                            Street = "Kemmer Cliffs"
                        },
                        new
                        {
                            IdAddress = "68",
                            Country = "Denmark",
                            Locality = "Bernieceland",
                            LocalityCode = "99682",
                            Number = "216",
                            Street = "Bernhard Mountain"
                        },
                        new
                        {
                            IdAddress = "69",
                            Country = "Seychelles",
                            Locality = "New Gonzalo",
                            LocalityCode = "50883",
                            Number = "7027",
                            Street = "Mayer Wall"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DispatcherMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DispatcherMatricule");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Mike.Thompson39@gmail.com",
                            FirstName = "Darrin",
                            Name = "Emard",
                            Password = "Xgw7zR1yxC",
                            CompanyAddressId = "60",
                            CompanyName = "Larkin and Sons",
                            Number = "539-863-4533"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Linnie3@hotmail.com",
                            FirstName = "Dovie",
                            Name = "Boyle",
                            Password = "yE6Ckxo0EI",
                            CompanyAddressId = "61",
                            CompanyName = "Leannon Group",
                            Number = "741-716-4122"
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Shawna.Breitenberg24@yahoo.com",
                            FirstName = "Michelle",
                            Name = "Mayer",
                            Password = "abKt5Dl1Qe",
                            CompanyAddressId = "62",
                            CompanyName = "Cronin, Mayert and Ullrich",
                            Number = "621-567-3328"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Marietta.Muller@yahoo.com",
                            FirstName = "Roosevelt",
                            Name = "Mitchell",
                            Password = "T_oyCv8C6y",
                            CompanyAddressId = "63",
                            CompanyName = "Moore Inc",
                            Number = "400-883-1300"
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Reina75@hotmail.com",
                            FirstName = "Gianni",
                            Name = "Effertz",
                            Password = "___4f5iAgk",
                            CompanyAddressId = "64",
                            CompanyName = "Quigley, O'Keefe and Rath",
                            Number = "781-208-4655"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Olin.Yundt90@hotmail.com",
                            FirstName = "Margarette",
                            Name = "Crist",
                            Password = "BR6dkuxfvP",
                            CompanyAddressId = "65",
                            CompanyName = "Waters - Sipes",
                            Number = "303-424-0192"
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Emmet.Kulas@gmail.com",
                            FirstName = "Lizeth",
                            Name = "Ullrich",
                            Password = "EMDwIttWd1",
                            CompanyAddressId = "66",
                            CompanyName = "Fritsch and Sons",
                            Number = "870-448-2595"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Adell_Becker@gmail.com",
                            FirstName = "Tito",
                            Name = "Krajcik",
                            Password = "NXUbh8v6B_",
                            CompanyAddressId = "67",
                            CompanyName = "Hilpert LLC",
                            Number = "994-333-0350"
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Antone_Lemke24@gmail.com",
                            FirstName = "Giuseppe",
                            Name = "Wuckert",
                            Password = "UqeXtidOZG",
                            CompanyAddressId = "68",
                            CompanyName = "Mills - Leannon",
                            Number = "403-976-9428"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Frankie_Lind28@yahoo.com",
                            FirstName = "Stephan",
                            Name = "Purdy",
                            Password = "P5er5vGDpg",
                            CompanyAddressId = "69",
                            CompanyName = "Hills, Morissette and McKenzie",
                            Number = "267-694-5476"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "50",
                            Email = "Alene70@gmail.com",
                            FirstName = "Ronaldo",
                            Name = "Bergnaum",
                            Password = "MkGwzQmnxg"
                        },
                        new
                        {
                            Matricule = "51",
                            Email = "Abbie.Durgan@yahoo.com",
                            FirstName = "Clifton",
                            Name = "Schmeler",
                            Password = "NPSn7Mf8x9"
                        },
                        new
                        {
                            Matricule = "52",
                            Email = "Elyse_Kohler@hotmail.com",
                            FirstName = "Lionel",
                            Name = "Bins",
                            Password = "Z1yPMOCJog"
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Mafalda_Bergstrom13@gmail.com",
                            FirstName = "Dominique",
                            Name = "Marks",
                            Password = "Jm2IcbiGR1"
                        },
                        new
                        {
                            Matricule = "54",
                            Email = "Garett.Schuppe@yahoo.com",
                            FirstName = "Tierra",
                            Name = "Bauch",
                            Password = "TSEukDRJre"
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Brionna.Sauer39@gmail.com",
                            FirstName = "Emory",
                            Name = "Hirthe",
                            Password = "tpMcyrJZD3"
                        },
                        new
                        {
                            Matricule = "56",
                            Email = "Vince_Senger9@hotmail.com",
                            FirstName = "Tod",
                            Name = "Heathcote",
                            Password = "2G_be6cBNs"
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Gia_Lynch28@hotmail.com",
                            FirstName = "Giovani",
                            Name = "Wilkinson",
                            Password = "zcVZ77TycI"
                        },
                        new
                        {
                            Matricule = "58",
                            Email = "Randy58@yahoo.com",
                            FirstName = "Gudrun",
                            Name = "Muller",
                            Password = "vToaTB9C_5"
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Sylvan26@gmail.com",
                            FirstName = "Dennis",
                            Name = "Kirlin",
                            Password = "bFW9tWuMMG"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "40",
                            Email = "Taylor.Shanahan99@gmail.com",
                            FirstName = "Camden",
                            Name = "Ryan",
                            Password = "pJl4rbrfNA"
                        },
                        new
                        {
                            Matricule = "41",
                            Email = "Andre.Kessler36@hotmail.com",
                            FirstName = "Anjali",
                            Name = "Mohr",
                            Password = "GG5jdeVZtM"
                        },
                        new
                        {
                            Matricule = "42",
                            Email = "Kassandra_Dicki82@yahoo.com",
                            FirstName = "Gianni",
                            Name = "Predovic",
                            Password = "VWtt3ZOjYu"
                        },
                        new
                        {
                            Matricule = "43",
                            Email = "Hobart.Mayer@yahoo.com",
                            FirstName = "Jeanette",
                            Name = "Olson",
                            Password = "TZ6VsNmKzL"
                        },
                        new
                        {
                            Matricule = "44",
                            Email = "Joel.Goodwin55@yahoo.com",
                            FirstName = "Jannie",
                            Name = "Reilly",
                            Password = "UlxyLXZJQj"
                        },
                        new
                        {
                            Matricule = "45",
                            Email = "Trey_Roob@hotmail.com",
                            FirstName = "Lori",
                            Name = "Baumbach",
                            Password = "rVOGUDsLol"
                        },
                        new
                        {
                            Matricule = "46",
                            Email = "Van96@hotmail.com",
                            FirstName = "Joey",
                            Name = "Leuschke",
                            Password = "zRYzU5UqJ1"
                        },
                        new
                        {
                            Matricule = "47",
                            Email = "Anibal74@yahoo.com",
                            FirstName = "Creola",
                            Name = "Streich",
                            Password = "qJhKuWBpiX"
                        },
                        new
                        {
                            Matricule = "48",
                            Email = "Liana11@gmail.com",
                            FirstName = "Rachael",
                            Name = "Veum",
                            Password = "YTdZ5wlFUP"
                        },
                        new
                        {
                            Matricule = "49",
                            Email = "Kattie_Spencer@gmail.com",
                            FirstName = "Kevon",
                            Name = "Kuvalis",
                            Password = "xn1TMgdsFB"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Dispatcher", null)
                        .WithMany("Certifications")
                        .HasForeignKey("DispatcherMatricule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany("Vehicules")
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Certifications");
                });
#pragma warning restore 612, 618
        }
    }
}
