// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507204618_DriverLicenses6")]
    partial class DriverLicenses6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "80",
                            Country = "Timor-Leste",
                            Locality = "New Hazelmouth",
                            LocalityCode = "30183",
                            Number = "102",
                            Street = "Mafalda Wells"
                        },
                        new
                        {
                            IdAddress = "81",
                            Country = "Mauritius",
                            Locality = "North Aliya",
                            LocalityCode = "82500-4341",
                            Number = "0120",
                            Street = "Gene Estates"
                        },
                        new
                        {
                            IdAddress = "82",
                            Country = "Seychelles",
                            Locality = "South Yasminemouth",
                            LocalityCode = "44562-5814",
                            Number = "340",
                            Street = "Johnson Turnpike"
                        },
                        new
                        {
                            IdAddress = "83",
                            Country = "Latvia",
                            Locality = "Lake Edenburgh",
                            LocalityCode = "23000-7070",
                            Number = "7839",
                            Street = "Edward Fields"
                        },
                        new
                        {
                            IdAddress = "84",
                            Country = "Falkland Islands (Malvinas)",
                            Locality = "East Mozellehaven",
                            LocalityCode = "88296-0601",
                            Number = "365",
                            Street = "King Fords"
                        },
                        new
                        {
                            IdAddress = "85",
                            Country = "Kuwait",
                            Locality = "New Martinechester",
                            LocalityCode = "76422",
                            Number = "6390",
                            Street = "Murphy Meadows"
                        },
                        new
                        {
                            IdAddress = "86",
                            Country = "Brazil",
                            Locality = "East Nia",
                            LocalityCode = "76457",
                            Number = "2292",
                            Street = "Anibal Forges"
                        },
                        new
                        {
                            IdAddress = "87",
                            Country = "Turks and Caicos Islands",
                            Locality = "East Weldonburgh",
                            LocalityCode = "38007",
                            Number = "92715",
                            Street = "Jamil Run"
                        },
                        new
                        {
                            IdAddress = "88",
                            Country = "Lithuania",
                            Locality = "Rodrigueztown",
                            LocalityCode = "13739-5139",
                            Number = "1265",
                            Street = "Bauch Villages"
                        },
                        new
                        {
                            IdAddress = "89",
                            Country = "Myanmar",
                            Locality = "South Darrenshire",
                            LocalityCode = "05402",
                            Number = "54891",
                            Street = "Aliya Mill"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "90",
                            Email = "Neil81@gmail.com",
                            FirstName = "Letitia",
                            Name = "Kirlin",
                            Password = "qV28VHvV3j",
                            CompanyAddressId = "80",
                            CompanyName = "Greenfelder - Schmeler",
                            Number = "900-364-2937"
                        },
                        new
                        {
                            Matricule = "91",
                            Email = "Wendy.Stamm@gmail.com",
                            FirstName = "Christy",
                            Name = "Schinner",
                            Password = "6QTBKSw_9j",
                            CompanyAddressId = "81",
                            CompanyName = "Koss - Hintz",
                            Number = "322-261-3587"
                        },
                        new
                        {
                            Matricule = "92",
                            Email = "Julia.Olson@gmail.com",
                            FirstName = "Chet",
                            Name = "O'Hara",
                            Password = "sRECeZkDFK",
                            CompanyAddressId = "82",
                            CompanyName = "Stark, Luettgen and Johnson",
                            Number = "851-357-3239"
                        },
                        new
                        {
                            Matricule = "93",
                            Email = "Arianna.Heller45@yahoo.com",
                            FirstName = "Rosalind",
                            Name = "Lubowitz",
                            Password = "PUwPlXTyyV",
                            CompanyAddressId = "83",
                            CompanyName = "Rice, Howe and Oberbrunner",
                            Number = "852-680-6976"
                        },
                        new
                        {
                            Matricule = "94",
                            Email = "Gus.Herman25@yahoo.com",
                            FirstName = "Maye",
                            Name = "Blick",
                            Password = "Ydksm7GiwY",
                            CompanyAddressId = "84",
                            CompanyName = "Anderson - Hyatt",
                            Number = "323-249-6000"
                        },
                        new
                        {
                            Matricule = "95",
                            Email = "Bessie.Skiles6@yahoo.com",
                            FirstName = "Marc",
                            Name = "Tremblay",
                            Password = "ZpEBuZvlbw",
                            CompanyAddressId = "85",
                            CompanyName = "Bayer - Bosco",
                            Number = "991-261-0246"
                        },
                        new
                        {
                            Matricule = "96",
                            Email = "Ethan.Skiles32@yahoo.com",
                            FirstName = "Diego",
                            Name = "Bashirian",
                            Password = "LIx80YLshA",
                            CompanyAddressId = "86",
                            CompanyName = "Heathcote - Hansen",
                            Number = "564-248-1772"
                        },
                        new
                        {
                            Matricule = "97",
                            Email = "Leonel_Marvin82@yahoo.com",
                            FirstName = "Salma",
                            Name = "Schultz",
                            Password = "wAFY8yPhBZ",
                            CompanyAddressId = "87",
                            CompanyName = "Kilback and Sons",
                            Number = "470-610-1655"
                        },
                        new
                        {
                            Matricule = "98",
                            Email = "Deron.Ullrich@hotmail.com",
                            FirstName = "Gianni",
                            Name = "Predovic",
                            Password = "wpYya_FxTD",
                            CompanyAddressId = "88",
                            CompanyName = "Bosco Group",
                            Number = "947-987-8661"
                        },
                        new
                        {
                            Matricule = "99",
                            Email = "Harrison.Shields97@gmail.com",
                            FirstName = "Effie",
                            Name = "Crona",
                            Password = "Ko1y6GYksW",
                            CompanyAddressId = "89",
                            CompanyName = "Harvey LLC",
                            Number = "548-418-6282"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Braulio_Simonis@yahoo.com",
                            FirstName = "Jonatan",
                            Name = "Orn",
                            Password = "Sn4RbNkrgB",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Marian84@yahoo.com",
                            FirstName = "Jermain",
                            Name = "Emard",
                            Password = "FbYKyz18VZ",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Brandy_Hermann76@gmail.com",
                            FirstName = "Anastacio",
                            Name = "Mosciski",
                            Password = "_mTN520f_d",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Kole32@yahoo.com",
                            FirstName = "Lela",
                            Name = "Murazik",
                            Password = "FvdcjJSf2b",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Randy_Harber@hotmail.com",
                            FirstName = "Ervin",
                            Name = "Wolff",
                            Password = "O_1KwpvdkE",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Ramon_Cole@yahoo.com",
                            FirstName = "Helmer",
                            Name = "Ward",
                            Password = "p9F3IiKszX",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Maximillian87@yahoo.com",
                            FirstName = "Eugenia",
                            Name = "Beatty",
                            Password = "ITZ8gyVEc4",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Bradly3@yahoo.com",
                            FirstName = "Sanford",
                            Name = "Corwin",
                            Password = "kVykP0QfkL",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Sally80@gmail.com",
                            FirstName = "Pink",
                            Name = "Hilpert",
                            Password = "ocsqV3BB9l",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Nadia25@yahoo.com",
                            FirstName = "Jamison",
                            Name = "Hegmann",
                            Password = "pc2vRqbZPr",
                            IdCertification = 3
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "51",
                            Email = "Werner76@gmail.com",
                            FirstName = "Francis",
                            Name = "Satterfield",
                            Password = "1eCP5ZlVSt"
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Kenyatta44@gmail.com",
                            FirstName = "Rory",
                            Name = "Kautzer",
                            Password = "Q4Av61bfds"
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Destiney_Hand@hotmail.com",
                            FirstName = "Ashlee",
                            Name = "Collins",
                            Password = "yTdrEiEly_"
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Cooper34@yahoo.com",
                            FirstName = "Noel",
                            Name = "Haley",
                            Password = "uKAPQsppV0"
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Jaqueline_Stanton@yahoo.com",
                            FirstName = "Dayna",
                            Name = "Boyle",
                            Password = "RU80DFRML2"
                        },
                        new
                        {
                            Matricule = "61",
                            Email = "Nannie2@gmail.com",
                            FirstName = "Idella",
                            Name = "Skiles",
                            Password = "c0q0X0opUo"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Trystan21@gmail.com",
                            FirstName = "Muriel",
                            Name = "Ruecker",
                            Password = "IyDX8AhS2V"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Cyril28@gmail.com",
                            FirstName = "Giuseppe",
                            Name = "Miller",
                            Password = "P7pQq10qon"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Cielo.Effertz51@hotmail.com",
                            FirstName = "Betsy",
                            Name = "Nienow",
                            Password = "qkLKrKDy2A"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Buck_Parisian@yahoo.com",
                            FirstName = "Ladarius",
                            Name = "Monahan",
                            Password = "wBalHUk8V_"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });
#pragma warning restore 612, 618
        }
    }
}
