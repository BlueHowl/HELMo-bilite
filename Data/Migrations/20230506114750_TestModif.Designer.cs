// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230506114750_TestModif")]
    partial class TestModif
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "50",
                            Country = "Norfolk Island",
                            Locality = "Connland",
                            LocalityCode = "26685-3848",
                            Number = "61700",
                            Street = "Schneider Plains"
                        },
                        new
                        {
                            IdAddress = "51",
                            Country = "Slovakia (Slovak Republic)",
                            Locality = "New Sebastian",
                            LocalityCode = "72159",
                            Number = "5986",
                            Street = "Bosco Forks"
                        },
                        new
                        {
                            IdAddress = "52",
                            Country = "Belgium",
                            Locality = "Friesenfurt",
                            LocalityCode = "29613-6738",
                            Number = "980",
                            Street = "Demond Track"
                        },
                        new
                        {
                            IdAddress = "53",
                            Country = "Finland",
                            Locality = "South Ardenborough",
                            LocalityCode = "01426-5588",
                            Number = "2923",
                            Street = "Tiara Cove"
                        },
                        new
                        {
                            IdAddress = "54",
                            Country = "Bahamas",
                            Locality = "New Yesseniabury",
                            LocalityCode = "17316-5466",
                            Number = "709",
                            Street = "Howell Manors"
                        },
                        new
                        {
                            IdAddress = "55",
                            Country = "Philippines",
                            Locality = "South Reggie",
                            LocalityCode = "14517-4093",
                            Number = "547",
                            Street = "Raquel Lock"
                        },
                        new
                        {
                            IdAddress = "56",
                            Country = "Falkland Islands (Malvinas)",
                            Locality = "Adelbertton",
                            LocalityCode = "97961-2222",
                            Number = "2111",
                            Street = "Dallas Mountains"
                        },
                        new
                        {
                            IdAddress = "57",
                            Country = "United Arab Emirates",
                            Locality = "East Stephonville",
                            LocalityCode = "73406",
                            Number = "7919",
                            Street = "Feest Ramp"
                        },
                        new
                        {
                            IdAddress = "58",
                            Country = "Croatia",
                            Locality = "New Amberhaven",
                            LocalityCode = "74493",
                            Number = "179",
                            Street = "Marcelino Terrace"
                        },
                        new
                        {
                            IdAddress = "59",
                            Country = "Vietnam",
                            Locality = "Lake Michaleburgh",
                            LocalityCode = "14514",
                            Number = "775",
                            Street = "Hand Centers"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DispatcherMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DispatcherMatricule");

                    b.ToTable("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DriverMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DriverMatricule");

                    b.ToTable("License");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Truck", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "40",
                            Email = "Katlyn.Lynch91@gmail.com",
                            FirstName = "Rowland",
                            Name = "Herzog",
                            Password = "CHUKMz8opX"
                        },
                        new
                        {
                            Matricule = "41",
                            Email = "Skylar_Abshire80@gmail.com",
                            FirstName = "Kellen",
                            Name = "Beahan",
                            Password = "h0fK4dY8o3"
                        },
                        new
                        {
                            Matricule = "42",
                            Email = "Casey.Considine@gmail.com",
                            FirstName = "Burdette",
                            Name = "Willms",
                            Password = "gLwoqtBXux"
                        },
                        new
                        {
                            Matricule = "43",
                            Email = "Jacques61@yahoo.com",
                            FirstName = "Novella",
                            Name = "White",
                            Password = "lSW2KgWgf4"
                        },
                        new
                        {
                            Matricule = "44",
                            Email = "Albina17@yahoo.com",
                            FirstName = "Dario",
                            Name = "Huel",
                            Password = "5h7tu_LMUm"
                        },
                        new
                        {
                            Matricule = "45",
                            Email = "Cheyenne.Reichel@yahoo.com",
                            FirstName = "Otilia",
                            Name = "Hartmann",
                            Password = "wLoiXaMD6i"
                        },
                        new
                        {
                            Matricule = "46",
                            Email = "Dayne.King@gmail.com",
                            FirstName = "Aletha",
                            Name = "Russel",
                            Password = "JB6j8KEUe1"
                        },
                        new
                        {
                            Matricule = "47",
                            Email = "Yvonne81@yahoo.com",
                            FirstName = "Pearlie",
                            Name = "Gibson",
                            Password = "MFWE7agdEj"
                        },
                        new
                        {
                            Matricule = "48",
                            Email = "Yazmin.Krajcik25@yahoo.com",
                            FirstName = "Chad",
                            Name = "Davis",
                            Password = "U_PWXpJZu2"
                        },
                        new
                        {
                            Matricule = "49",
                            Email = "Domenico.Senger81@gmail.com",
                            FirstName = "Albert",
                            Name = "Dibbert",
                            Password = "SyVLvmESUZ"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "30",
                            Email = "Jasmin_Braun@yahoo.com",
                            FirstName = "Mikayla",
                            Name = "Gaylord",
                            Password = "uexyoim7Tc"
                        },
                        new
                        {
                            Matricule = "31",
                            Email = "Bria_Marquardt@yahoo.com",
                            FirstName = "Makenzie",
                            Name = "Pollich",
                            Password = "4Y4Tlrfjjd"
                        },
                        new
                        {
                            Matricule = "32",
                            Email = "London_King80@yahoo.com",
                            FirstName = "Hortense",
                            Name = "Labadie",
                            Password = "bePGNsIAXq"
                        },
                        new
                        {
                            Matricule = "33",
                            Email = "Lucie.Kunze@gmail.com",
                            FirstName = "Norris",
                            Name = "Cassin",
                            Password = "zN5Udy9cvV"
                        },
                        new
                        {
                            Matricule = "34",
                            Email = "Freeman_Kuvalis@gmail.com",
                            FirstName = "Ila",
                            Name = "Trantow",
                            Password = "l7MZJPP2Oy"
                        },
                        new
                        {
                            Matricule = "35",
                            Email = "Hallie42@hotmail.com",
                            FirstName = "Junius",
                            Name = "Gibson",
                            Password = "pg0HhmUx9D"
                        },
                        new
                        {
                            Matricule = "36",
                            Email = "Mose_Miller1@yahoo.com",
                            FirstName = "Annamarie",
                            Name = "Reichel",
                            Password = "IgjuyYDzA3"
                        },
                        new
                        {
                            Matricule = "37",
                            Email = "Samir40@hotmail.com",
                            FirstName = "Lorena",
                            Name = "Wiza",
                            Password = "UNrENC90ky"
                        },
                        new
                        {
                            Matricule = "38",
                            Email = "Keyshawn51@yahoo.com",
                            FirstName = "Fannie",
                            Name = "Rau",
                            Password = "WpCTOVgIh7"
                        },
                        new
                        {
                            Matricule = "39",
                            Email = "Coty.Johns@hotmail.com",
                            FirstName = "Alba",
                            Name = "Franecki",
                            Password = "KqpIVM3nnB"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Dispatcher", null)
                        .WithMany("Certifications")
                        .HasForeignKey("DispatcherMatricule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany("Licenses")
                        .HasForeignKey("DriverMatricule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Truck", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Certifications");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Licenses");
                });
#pragma warning restore 612, 618
        }
    }
}
