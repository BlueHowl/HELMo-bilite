// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230505232150_DataGeneration")]
    partial class DataGeneration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "60",
                            Country = "Turks and Caicos Islands",
                            Locality = "Christiansenstad",
                            LocalityCode = "77483-3165",
                            Number = "532",
                            Street = "Carson Path"
                        },
                        new
                        {
                            IdAddress = "61",
                            Country = "Hungary",
                            Locality = "Mayertburgh",
                            LocalityCode = "73379-5426",
                            Number = "364",
                            Street = "Dickinson Greens"
                        },
                        new
                        {
                            IdAddress = "62",
                            Country = "Liechtenstein",
                            Locality = "Hellerburgh",
                            LocalityCode = "43568-6742",
                            Number = "188",
                            Street = "Strosin Port"
                        },
                        new
                        {
                            IdAddress = "63",
                            Country = "Sudan",
                            Locality = "New Aylaside",
                            LocalityCode = "90207",
                            Number = "0330",
                            Street = "Huels Vista"
                        },
                        new
                        {
                            IdAddress = "64",
                            Country = "Belgium",
                            Locality = "Port Orvilleburgh",
                            LocalityCode = "19788-9089",
                            Number = "029",
                            Street = "Walter Squares"
                        },
                        new
                        {
                            IdAddress = "65",
                            Country = "Grenada",
                            Locality = "North Zachariahburgh",
                            LocalityCode = "42104-9162",
                            Number = "6746",
                            Street = "Lily Path"
                        },
                        new
                        {
                            IdAddress = "66",
                            Country = "Turkmenistan",
                            Locality = "Mayershire",
                            LocalityCode = "64520-8518",
                            Number = "20832",
                            Street = "Elna Passage"
                        },
                        new
                        {
                            IdAddress = "67",
                            Country = "South Georgia and the South Sandwich Islands",
                            Locality = "Lake Susannahaven",
                            LocalityCode = "68023",
                            Number = "292",
                            Street = "O'Kon Freeway"
                        },
                        new
                        {
                            IdAddress = "68",
                            Country = "Belarus",
                            Locality = "South Woodrowstad",
                            LocalityCode = "77660-0667",
                            Number = "55172",
                            Street = "Dickens Freeway"
                        },
                        new
                        {
                            IdAddress = "69",
                            Country = "Indonesia",
                            Locality = "West Greysonton",
                            LocalityCode = "27512",
                            Number = "6717",
                            Street = "Morar River"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DispatcherMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DispatcherMatricule");

                    b.ToTable("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DriverMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DriverMatricule");

                    b.ToTable("License");
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Erin.Parker@yahoo.com",
                            FirstName = "Jesus",
                            Name = "Bechtelar",
                            Password = "TW97iADotQ",
                            CompanyAddressId = "60",
                            CompanyName = "Rodriguez Inc",
                            Number = "486-250-8053"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Cathy_Schowalter@gmail.com",
                            FirstName = "Brennan",
                            Name = "O'Keefe",
                            Password = "oaTyKK0H6U",
                            CompanyAddressId = "61",
                            CompanyName = "Abernathy and Sons",
                            Number = "578-899-7693"
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Maryam_Grady@gmail.com",
                            FirstName = "Hilda",
                            Name = "Jacobs",
                            Password = "mrZc7oi2yj",
                            CompanyAddressId = "62",
                            CompanyName = "Schmitt and Sons",
                            Number = "350-348-4779"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Lola_Quigley@gmail.com",
                            FirstName = "Jamel",
                            Name = "Bauch",
                            Password = "AREp7pgU2j",
                            CompanyAddressId = "63",
                            CompanyName = "Hartmann LLC",
                            Number = "574-848-3083"
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Anna_Larson13@gmail.com",
                            FirstName = "Adalberto",
                            Name = "Frami",
                            Password = "DWmnuVM6aM",
                            CompanyAddressId = "64",
                            CompanyName = "Kuhic - Effertz",
                            Number = "587-514-4357"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Jarrett16@hotmail.com",
                            FirstName = "Delia",
                            Name = "Effertz",
                            Password = "xOjnmx9JMI",
                            CompanyAddressId = "65",
                            CompanyName = "Hagenes Inc",
                            Number = "383-449-8923"
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Akeem2@yahoo.com",
                            FirstName = "Brandyn",
                            Name = "D'Amore",
                            Password = "hQl0f4aadZ",
                            CompanyAddressId = "66",
                            CompanyName = "Orn Inc",
                            Number = "435-358-9142"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Arianna.Langosh41@gmail.com",
                            FirstName = "Edmond",
                            Name = "Durgan",
                            Password = "68s4RJSpfM",
                            CompanyAddressId = "67",
                            CompanyName = "Kuhn and Sons",
                            Number = "898-586-3625"
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Cristal97@yahoo.com",
                            FirstName = "Daphne",
                            Name = "Feeney",
                            Password = "9KgthYQCaB",
                            CompanyAddressId = "68",
                            CompanyName = "Osinski - Franecki",
                            Number = "796-774-2920"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Sandra_Fay24@yahoo.com",
                            FirstName = "Oral",
                            Name = "Wyman",
                            Password = "zib2jDUkBc",
                            CompanyAddressId = "69",
                            CompanyName = "Daniel, Kilback and Berge",
                            Number = "922-565-1752"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "50",
                            Email = "Vladimir.Paucek55@hotmail.com",
                            FirstName = "Merlin",
                            Name = "Mueller",
                            Password = "oZ8vKVYEbx"
                        },
                        new
                        {
                            Matricule = "51",
                            Email = "Ursula41@hotmail.com",
                            FirstName = "Deangelo",
                            Name = "Wiegand",
                            Password = "TlztgutH4k"
                        },
                        new
                        {
                            Matricule = "52",
                            Email = "Rolando.Turner95@hotmail.com",
                            FirstName = "Treva",
                            Name = "Purdy",
                            Password = "KJUn9mxYco"
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Maryse47@hotmail.com",
                            FirstName = "Myrtice",
                            Name = "Shanahan",
                            Password = "1pIMkFicl2"
                        },
                        new
                        {
                            Matricule = "54",
                            Email = "Laurie.Sawayn@gmail.com",
                            FirstName = "Coleman",
                            Name = "Turner",
                            Password = "HiZXm1RPgo"
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Tatyana.Champlin@gmail.com",
                            FirstName = "Kariane",
                            Name = "Marvin",
                            Password = "TFnxu6_3KO"
                        },
                        new
                        {
                            Matricule = "56",
                            Email = "Andreanne53@hotmail.com",
                            FirstName = "Citlalli",
                            Name = "Gorczany",
                            Password = "H_YSn1M_70"
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Nakia21@gmail.com",
                            FirstName = "Cale",
                            Name = "Considine",
                            Password = "hqbG0MO5pe"
                        },
                        new
                        {
                            Matricule = "58",
                            Email = "Derrick17@yahoo.com",
                            FirstName = "Zetta",
                            Name = "Tillman",
                            Password = "ry8gkNk9B0"
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Laurie.Botsford@yahoo.com",
                            FirstName = "Paul",
                            Name = "Ryan",
                            Password = "XA4bdNojcW"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "40",
                            Email = "Theo.Kunde87@hotmail.com",
                            FirstName = "Arthur",
                            Name = "Windler",
                            Password = "idliFpfOAa"
                        },
                        new
                        {
                            Matricule = "41",
                            Email = "Sylvan.Terry80@yahoo.com",
                            FirstName = "Kiera",
                            Name = "Mueller",
                            Password = "EQBEfpuHCG"
                        },
                        new
                        {
                            Matricule = "42",
                            Email = "Jerome.Rohan80@gmail.com",
                            FirstName = "Alessia",
                            Name = "Cole",
                            Password = "zaa67ZA_PR"
                        },
                        new
                        {
                            Matricule = "43",
                            Email = "Delilah.Bashirian4@gmail.com",
                            FirstName = "Nelson",
                            Name = "Kiehn",
                            Password = "tSL2tJgDIq"
                        },
                        new
                        {
                            Matricule = "44",
                            Email = "Sheridan21@gmail.com",
                            FirstName = "Lina",
                            Name = "Wisozk",
                            Password = "L4ly8KWHIB"
                        },
                        new
                        {
                            Matricule = "45",
                            Email = "Arnold55@hotmail.com",
                            FirstName = "Art",
                            Name = "Mann",
                            Password = "VV9XcmttgB"
                        },
                        new
                        {
                            Matricule = "46",
                            Email = "Daphne.Bruen54@hotmail.com",
                            FirstName = "Arvel",
                            Name = "D'Amore",
                            Password = "vjyoTiST47"
                        },
                        new
                        {
                            Matricule = "47",
                            Email = "Luella.Kirlin@hotmail.com",
                            FirstName = "Ethan",
                            Name = "Wiegand",
                            Password = "DumzDVWqa_"
                        },
                        new
                        {
                            Matricule = "48",
                            Email = "Wilfrid.Grant28@hotmail.com",
                            FirstName = "Chanelle",
                            Name = "Kreiger",
                            Password = "L7YFAjRpm2"
                        },
                        new
                        {
                            Matricule = "49",
                            Email = "Audreanne52@hotmail.com",
                            FirstName = "Gilbert",
                            Name = "Johnston",
                            Password = "7U3Q3S1fxh"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Dispatcher", null)
                        .WithMany("Certifications")
                        .HasForeignKey("DispatcherMatricule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany("Licenses")
                        .HasForeignKey("DriverMatricule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Certifications");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Licenses");
                });
#pragma warning restore 612, 618
        }
    }
}
