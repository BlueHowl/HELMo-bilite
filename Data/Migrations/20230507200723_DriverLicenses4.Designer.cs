// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507200723_DriverLicenses4")]
    partial class DriverLicenses4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicenses", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "80",
                            Country = "Wallis and Futuna",
                            Locality = "Hanemouth",
                            LocalityCode = "11164-8773",
                            Number = "25468",
                            Street = "Labadie Plains"
                        },
                        new
                        {
                            IdAddress = "81",
                            Country = "Northern Mariana Islands",
                            Locality = "Schummbury",
                            LocalityCode = "83424-2076",
                            Number = "4810",
                            Street = "Schuster Mill"
                        },
                        new
                        {
                            IdAddress = "82",
                            Country = "Puerto Rico",
                            Locality = "Willport",
                            LocalityCode = "86647",
                            Number = "2765",
                            Street = "O'Kon Trace"
                        },
                        new
                        {
                            IdAddress = "83",
                            Country = "Saint Pierre and Miquelon",
                            Locality = "South Elbert",
                            LocalityCode = "19479-0222",
                            Number = "16943",
                            Street = "Homenick Mission"
                        },
                        new
                        {
                            IdAddress = "84",
                            Country = "Serbia",
                            Locality = "North Ellsworthport",
                            LocalityCode = "19940-5255",
                            Number = "9532",
                            Street = "Doyle Pike"
                        },
                        new
                        {
                            IdAddress = "85",
                            Country = "Niue",
                            Locality = "DuBuqueshire",
                            LocalityCode = "74519",
                            Number = "036",
                            Street = "Stiedemann Shore"
                        },
                        new
                        {
                            IdAddress = "86",
                            Country = "Malta",
                            Locality = "West Lilliana",
                            LocalityCode = "08462-1943",
                            Number = "280",
                            Street = "Jeanie Landing"
                        },
                        new
                        {
                            IdAddress = "87",
                            Country = "Turks and Caicos Islands",
                            Locality = "Karliestad",
                            LocalityCode = "33488-7666",
                            Number = "573",
                            Street = "Torrey Streets"
                        },
                        new
                        {
                            IdAddress = "88",
                            Country = "Macao",
                            Locality = "Lake Matt",
                            LocalityCode = "25743-9440",
                            Number = "90284",
                            Street = "Tommie Extensions"
                        },
                        new
                        {
                            IdAddress = "89",
                            Country = "Tanzania",
                            Locality = "North Scottiechester",
                            LocalityCode = "27517-2485",
                            Number = "8370",
                            Street = "Schmeler Green"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "90",
                            Email = "Tiara48@hotmail.com",
                            FirstName = "Sven",
                            Name = "Jacobi",
                            Password = "uyNDyPoWE7",
                            CompanyAddressId = "80",
                            CompanyName = "West - Cummerata",
                            Number = "344-414-0660"
                        },
                        new
                        {
                            Matricule = "91",
                            Email = "Mollie.Skiles@hotmail.com",
                            FirstName = "Roderick",
                            Name = "Cronin",
                            Password = "c13vZzzix5",
                            CompanyAddressId = "81",
                            CompanyName = "Jones LLC",
                            Number = "209-843-9907"
                        },
                        new
                        {
                            Matricule = "92",
                            Email = "Braden_Hoeger@gmail.com",
                            FirstName = "Sean",
                            Name = "Block",
                            Password = "mXhjNrZhQR",
                            CompanyAddressId = "82",
                            CompanyName = "Dach - Rowe",
                            Number = "650-591-6928"
                        },
                        new
                        {
                            Matricule = "93",
                            Email = "Fiona92@gmail.com",
                            FirstName = "Norberto",
                            Name = "Crooks",
                            Password = "MNKdYAncCJ",
                            CompanyAddressId = "83",
                            CompanyName = "Morar - Torphy",
                            Number = "468-678-8516"
                        },
                        new
                        {
                            Matricule = "94",
                            Email = "Shaun8@yahoo.com",
                            FirstName = "Javon",
                            Name = "Robel",
                            Password = "24edQjYZm0",
                            CompanyAddressId = "84",
                            CompanyName = "Hoppe, Cremin and Graham",
                            Number = "534-362-1026"
                        },
                        new
                        {
                            Matricule = "95",
                            Email = "Ellis_Raynor@yahoo.com",
                            FirstName = "Eliane",
                            Name = "King",
                            Password = "r2MttT3SMu",
                            CompanyAddressId = "85",
                            CompanyName = "Kerluke - Schmitt",
                            Number = "332-773-8864"
                        },
                        new
                        {
                            Matricule = "96",
                            Email = "Lizzie_Greenholt87@hotmail.com",
                            FirstName = "Esmeralda",
                            Name = "Ondricka",
                            Password = "JVMBZGs48r",
                            CompanyAddressId = "86",
                            CompanyName = "Lynch - Huel",
                            Number = "471-213-2140"
                        },
                        new
                        {
                            Matricule = "97",
                            Email = "Anibal70@gmail.com",
                            FirstName = "Alysson",
                            Name = "Romaguera",
                            Password = "7yojvN7FWM",
                            CompanyAddressId = "87",
                            CompanyName = "Goyette, Bogisich and Vandervort",
                            Number = "682-252-2498"
                        },
                        new
                        {
                            Matricule = "98",
                            Email = "Katharina_Nikolaus9@yahoo.com",
                            FirstName = "Myra",
                            Name = "Roberts",
                            Password = "PepIsu3Cui",
                            CompanyAddressId = "88",
                            CompanyName = "Wilderman, Abernathy and Little",
                            Number = "292-378-5916"
                        },
                        new
                        {
                            Matricule = "99",
                            Email = "Marcelino.McCullough74@yahoo.com",
                            FirstName = "Linnea",
                            Name = "Dicki",
                            Password = "DS2_msLpD9",
                            CompanyAddressId = "89",
                            CompanyName = "Wisoky LLC",
                            Number = "235-245-7990"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Duncan_Paucek94@gmail.com",
                            FirstName = "Benton",
                            Name = "Kozey",
                            Password = "CGzDIbX0P6",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Desmond66@yahoo.com",
                            FirstName = "Jared",
                            Name = "Grady",
                            Password = "TkGukye3is",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Stephanie.Reynolds@gmail.com",
                            FirstName = "Toy",
                            Name = "Buckridge",
                            Password = "UHcEKkENZC",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Rusty.Casper38@hotmail.com",
                            FirstName = "Myra",
                            Name = "Osinski",
                            Password = "ni1ka0tdCc",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Presley_Walter3@yahoo.com",
                            FirstName = "Kristofer",
                            Name = "Gusikowski",
                            Password = "NMSqxZjodi",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Claude_Schroeder@hotmail.com",
                            FirstName = "Scotty",
                            Name = "Kirlin",
                            Password = "2mHqrvTUrp",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Shanie61@hotmail.com",
                            FirstName = "Carmella",
                            Name = "Hyatt",
                            Password = "qo7z_QFHhd",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Vita22@hotmail.com",
                            FirstName = "Darrin",
                            Name = "Windler",
                            Password = "0NRlKpKVF2",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Buford.Wilderman@yahoo.com",
                            FirstName = "Cayla",
                            Name = "Howell",
                            Password = "YJQ3D9jpnd",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Alysa.Hickle@yahoo.com",
                            FirstName = "Magali",
                            Name = "Erdman",
                            Password = "MxqOlmwnGk",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "51",
                            Email = "Stan.Hahn30@yahoo.com",
                            FirstName = "Hal",
                            Name = "Schamberger",
                            Password = "Ddd1Noo00R"
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Moriah64@hotmail.com",
                            FirstName = "Malinda",
                            Name = "Sauer",
                            Password = "WpoltY0zwv"
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Bertrand67@yahoo.com",
                            FirstName = "Bell",
                            Name = "Renner",
                            Password = "6_FVoaAJWA"
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Kristin.Wintheiser@yahoo.com",
                            FirstName = "Karolann",
                            Name = "Purdy",
                            Password = "0a9DFNOuAD"
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Herman85@hotmail.com",
                            FirstName = "Cortez",
                            Name = "Schinner",
                            Password = "SBR4ELcYZE"
                        },
                        new
                        {
                            Matricule = "61",
                            Email = "Golden_Breitenberg65@yahoo.com",
                            FirstName = "Jaleel",
                            Name = "Kunze",
                            Password = "ww4i5mHeme"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Bianka.Kirlin@gmail.com",
                            FirstName = "Ethel",
                            Name = "Schimmel",
                            Password = "95AbXHapZ2"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Karli29@hotmail.com",
                            FirstName = "Veda",
                            Name = "Will",
                            Password = "EoZBTobB96"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Kristian_Metz40@hotmail.com",
                            FirstName = "Gudrun",
                            Name = "Carroll",
                            Password = "F_zYUjSMX_"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Adell61@hotmail.com",
                            FirstName = "Boris",
                            Name = "Ritchie",
                            Password = "YYXUOZaQnZ"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });
#pragma warning restore 612, 618
        }
    }
}
