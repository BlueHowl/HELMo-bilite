// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508084209_DeliveryIncomplet5")]
    partial class DeliveryIncomplet5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoadAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnloadingAddressId")
                        .HasColumnType("int");

                    b.HasKey("IdAddress");

                    b.HasIndex("LoadAddressId")
                        .IsUnique()
                        .HasFilter("[LoadAddressId] IS NOT NULL");

                    b.HasIndex("UnloadingAddressId")
                        .IsUnique()
                        .HasFilter("[UnloadingAddressId] IS NOT NULL");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "90",
                            Country = "French Polynesia",
                            Locality = "Jazminchester",
                            LocalityCode = "22077",
                            Number = "54799",
                            Street = "Kennith Lights"
                        },
                        new
                        {
                            IdAddress = "91",
                            Country = "Christmas Island",
                            Locality = "East Marcellaville",
                            LocalityCode = "30113-7333",
                            Number = "8649",
                            Street = "Kira Summit"
                        },
                        new
                        {
                            IdAddress = "92",
                            Country = "Tanzania",
                            Locality = "Heidenreichfort",
                            LocalityCode = "21267",
                            Number = "2308",
                            Street = "Trent Village"
                        },
                        new
                        {
                            IdAddress = "93",
                            Country = "Bouvet Island (Bouvetoya)",
                            Locality = "Gottliebmouth",
                            LocalityCode = "12937",
                            Number = "2868",
                            Street = "Koch Springs"
                        },
                        new
                        {
                            IdAddress = "94",
                            Country = "Sierra Leone",
                            Locality = "Adrienneview",
                            LocalityCode = "52632",
                            Number = "606",
                            Street = "Daniel Shores"
                        },
                        new
                        {
                            IdAddress = "95",
                            Country = "Bahamas",
                            Locality = "North Erwinfurt",
                            LocalityCode = "02288-0934",
                            Number = "3084",
                            Street = "Rosalia Summit"
                        },
                        new
                        {
                            IdAddress = "96",
                            Country = "Greece",
                            Locality = "Claratown",
                            LocalityCode = "64678-2602",
                            Number = "1075",
                            Street = "Gilberto Junctions"
                        },
                        new
                        {
                            IdAddress = "97",
                            Country = "Czech Republic",
                            Locality = "Alvisborough",
                            LocalityCode = "19619",
                            Number = "290",
                            Street = "Mayer Islands"
                        },
                        new
                        {
                            IdAddress = "98",
                            Country = "Heard Island and McDonald Islands",
                            Locality = "Abshirefort",
                            LocalityCode = "21828",
                            Number = "11090",
                            Street = "Jones Road"
                        },
                        new
                        {
                            IdAddress = "99",
                            Country = "United States Minor Outlying Islands",
                            Locality = "Nellamouth",
                            LocalityCode = "68625",
                            Number = "8585",
                            Street = "Zulauf Square"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDispatcher")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LoadAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnloadingAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnloadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDispatcher");

                    b.HasIndex("IdDriver");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "B0G6WMO94BM157815",
                            Brand = "Chrysler",
                            IdLicenses = 2,
                            Model = "Volt",
                            Payload = 21000
                        },
                        new
                        {
                            Plate = "MZ1KYNSSS8SN29023",
                            Brand = "Maserati",
                            IdLicenses = 2,
                            Model = "Accord",
                            Payload = 25000
                        },
                        new
                        {
                            Plate = "AWYXE18XE7C528931",
                            Brand = "Lamborghini",
                            IdLicenses = 3,
                            Model = "Volt",
                            Payload = 8000
                        },
                        new
                        {
                            Plate = "OB0TAJZ3QUWS99021",
                            Brand = "Dodge",
                            IdLicenses = 1,
                            Model = "Camaro",
                            Payload = 36000
                        },
                        new
                        {
                            Plate = "JX5INS7LBOMT93516",
                            Brand = "Lamborghini",
                            IdLicenses = 3,
                            Model = "V90",
                            Payload = 25000
                        },
                        new
                        {
                            Plate = "MZ9CVGLPJ2UR51277",
                            Brand = "Volvo",
                            IdLicenses = 2,
                            Model = "Explorer",
                            Payload = 31000
                        },
                        new
                        {
                            Plate = "9ULQWAS6LIAQ68485",
                            Brand = "BMW",
                            IdLicenses = 2,
                            Model = "Ranchero",
                            Payload = 18000
                        },
                        new
                        {
                            Plate = "SQEN43DTK2JJ33978",
                            Brand = "Kia",
                            IdLicenses = 1,
                            Model = "Prius",
                            Payload = 18000
                        },
                        new
                        {
                            Plate = "D128QHJH5EZP88040",
                            Brand = "Chrysler",
                            IdLicenses = 1,
                            Model = "Durango",
                            Payload = 10000
                        },
                        new
                        {
                            Plate = "GWWCBTYW04E928347",
                            Brand = "Volkswagen",
                            IdLicenses = 2,
                            Model = "Model 3",
                            Payload = 39000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Darron.Abernathy@yahoo.com",
                            FirstName = "Obie",
                            Name = "Torp",
                            Password = "S_3e8RklMI",
                            CompanyAddressId = "90",
                            CompanyName = "Deckow - Beahan",
                            Number = "279-928-8024"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Elinore.Schamberger@yahoo.com",
                            FirstName = "Oda",
                            Name = "Moen",
                            Password = "oNtFlnSzy2",
                            CompanyAddressId = "91",
                            CompanyName = "Pfeffer and Sons",
                            Number = "527-543-4652"
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Kraig_Schiller@hotmail.com",
                            FirstName = "Kyra",
                            Name = "O'Hara",
                            Password = "96l9EUVOl3",
                            CompanyAddressId = "92",
                            CompanyName = "DuBuque, Langworth and Vandervort",
                            Number = "629-676-1999"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Robbie.Ortiz35@yahoo.com",
                            FirstName = "Elbert",
                            Name = "Hyatt",
                            Password = "KOOXAMWjLH",
                            CompanyAddressId = "93",
                            CompanyName = "Walker, Veum and Gulgowski",
                            Number = "201-404-2502"
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Hardy.Mueller@hotmail.com",
                            FirstName = "Dortha",
                            Name = "Stanton",
                            Password = "kKQXscDgXF",
                            CompanyAddressId = "94",
                            CompanyName = "Rohan and Sons",
                            Number = "475-637-1465"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Petra_King@gmail.com",
                            FirstName = "Janelle",
                            Name = "Torp",
                            Password = "rab0dm0PtI",
                            CompanyAddressId = "95",
                            CompanyName = "Wintheiser - Reinger",
                            Number = "719-751-2082"
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Corene_Collier84@gmail.com",
                            FirstName = "Tom",
                            Name = "Stamm",
                            Password = "XUPi62RUmD",
                            CompanyAddressId = "96",
                            CompanyName = "Lesch Inc",
                            Number = "929-765-2821"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Shemar_Lesch@yahoo.com",
                            FirstName = "Santa",
                            Name = "Roberts",
                            Password = "kATGW7AOgI",
                            CompanyAddressId = "97",
                            CompanyName = "Upton - Hansen",
                            Number = "285-586-5065"
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Doris.Ankunding@hotmail.com",
                            FirstName = "Adolfo",
                            Name = "Harber",
                            Password = "UWTfImwNHf",
                            CompanyAddressId = "98",
                            CompanyName = "Zboncak - Gleichner",
                            Number = "528-927-2144"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Armando87@gmail.com",
                            FirstName = "Royce",
                            Name = "Steuber",
                            Password = "rjiV9mCqRh",
                            CompanyAddressId = "99",
                            CompanyName = "Dickinson - Kessler",
                            Number = "249-521-8114"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Amy.Prosacco@yahoo.com",
                            FirstName = "Hope",
                            Name = "McClure",
                            Password = "6UwaAH7mRl",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Lolita_Bogan30@gmail.com",
                            FirstName = "Reyna",
                            Name = "Dicki",
                            Password = "SEo2b2h5RG",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Ressie.Thompson12@yahoo.com",
                            FirstName = "Wilfred",
                            Name = "MacGyver",
                            Password = "OfkTQXcVPv",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Salvador.OReilly@yahoo.com",
                            FirstName = "Mathilde",
                            Name = "Adams",
                            Password = "Y3k1G33bNq",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Fabiola.Wiza@gmail.com",
                            FirstName = "Waldo",
                            Name = "Heller",
                            Password = "AJhqSP7aAx",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Gail_Stiedemann2@gmail.com",
                            FirstName = "Tiffany",
                            Name = "Schimmel",
                            Password = "rQwoaL_mPO",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Jeanette.Kutch55@gmail.com",
                            FirstName = "Katherine",
                            Name = "Goyette",
                            Password = "IUXXQxfxPd",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Karlee71@gmail.com",
                            FirstName = "Britney",
                            Name = "Heller",
                            Password = "VWRORUobJZ",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Herman_Funk82@yahoo.com",
                            FirstName = "Carli",
                            Name = "Breitenberg",
                            Password = "8UJCY39Xuk",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Vincenzo78@gmail.com",
                            FirstName = "Frances",
                            Name = "Crooks",
                            Password = "kK5P2T4jAA",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "61",
                            Email = "Vincenzo57@hotmail.com",
                            FirstName = "Hubert",
                            Name = "Gulgowski",
                            Password = "94TL4CCpTk"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Virgie.Orn@gmail.com",
                            FirstName = "Zelma",
                            Name = "Lehner",
                            Password = "nHCf54NTP9"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Kari37@yahoo.com",
                            FirstName = "Leif",
                            Name = "Stokes",
                            Password = "lmlcpXwR5A"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Skye_OKon33@gmail.com",
                            FirstName = "Nella",
                            Name = "MacGyver",
                            Password = "raUhGr4oxV"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Paris_Thompson81@yahoo.com",
                            FirstName = "Jadyn",
                            Name = "Bogan",
                            Password = "3L9HVmVWes"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Dustin.Schmeler26@yahoo.com",
                            FirstName = "Hollie",
                            Name = "Schiller",
                            Password = "kymnq5P4xd"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Vivienne.Murazik61@gmail.com",
                            FirstName = "Yasmeen",
                            Name = "Cummings",
                            Password = "kEnnzXVAqU"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Theresa_Stamm54@gmail.com",
                            FirstName = "Marjolaine",
                            Name = "Cummings",
                            Password = "xlVJK3LawK"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Schuyler.Bednar41@yahoo.com",
                            FirstName = "Demarcus",
                            Name = "Bashirian",
                            Password = "7YTTR5tp1u"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Patricia.Mayert@gmail.com",
                            FirstName = "Jamil",
                            Name = "Kshlerin",
                            Password = "5piMIb0BCA"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("LoadAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "LoadAddressId");

                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("UnloadingAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "UnloadingAddressId");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Dispatcher", "Dispatcher")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDispatcher");

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.Navigation("Client");

                    b.Navigation("Dispatcher");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Navigation("LoadAddress")
                        .IsRequired();

                    b.Navigation("UnloadingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
