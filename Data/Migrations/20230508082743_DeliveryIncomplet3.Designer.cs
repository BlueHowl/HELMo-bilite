// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508082743_DeliveryIncomplet3")]
    partial class DeliveryIncomplet3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "90",
                            Country = "Pakistan",
                            Locality = "Rosemarieberg",
                            LocalityCode = "45844",
                            Number = "7008",
                            Street = "Emmerich Forges"
                        },
                        new
                        {
                            IdAddress = "91",
                            Country = "Spain",
                            Locality = "New Wallace",
                            LocalityCode = "04066",
                            Number = "82419",
                            Street = "Gutkowski Underpass"
                        },
                        new
                        {
                            IdAddress = "92",
                            Country = "Italy",
                            Locality = "Rempelhaven",
                            LocalityCode = "09567",
                            Number = "736",
                            Street = "Hettinger Mountains"
                        },
                        new
                        {
                            IdAddress = "93",
                            Country = "South Georgia and the South Sandwich Islands",
                            Locality = "North Dashawnstad",
                            LocalityCode = "84507-7353",
                            Number = "72212",
                            Street = "Klein Estates"
                        },
                        new
                        {
                            IdAddress = "94",
                            Country = "Fiji",
                            Locality = "South Avis",
                            LocalityCode = "00604-3394",
                            Number = "18333",
                            Street = "Gerlach Prairie"
                        },
                        new
                        {
                            IdAddress = "95",
                            Country = "Cote d'Ivoire",
                            Locality = "Legrosfort",
                            LocalityCode = "24833-3343",
                            Number = "822",
                            Street = "Gaylord Skyway"
                        },
                        new
                        {
                            IdAddress = "96",
                            Country = "Barbados",
                            Locality = "Quentinview",
                            LocalityCode = "35171-7018",
                            Number = "10638",
                            Street = "Nels Ford"
                        },
                        new
                        {
                            IdAddress = "97",
                            Country = "Tonga",
                            Locality = "Marksville",
                            LocalityCode = "68614",
                            Number = "63693",
                            Street = "Armstrong Plains"
                        },
                        new
                        {
                            IdAddress = "98",
                            Country = "Nigeria",
                            Locality = "South Marcella",
                            LocalityCode = "77399-6534",
                            Number = "130",
                            Street = "O'Reilly Lane"
                        },
                        new
                        {
                            IdAddress = "99",
                            Country = "Macedonia",
                            Locality = "Christiansenville",
                            LocalityCode = "95035",
                            Number = "53750",
                            Street = "Julia Knolls"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDispatcher")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDispatcher");

                    b.HasIndex("IdDriver");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "9DQKXZ1KCPRL54722",
                            Brand = "Porsche",
                            IdLicenses = 3,
                            Model = "Charger",
                            Payload = 16000
                        },
                        new
                        {
                            Plate = "SJMOKL4NCWV362089",
                            Brand = "Nissan",
                            IdLicenses = 3,
                            Model = "XC90",
                            Payload = 36000
                        },
                        new
                        {
                            Plate = "8ESCJNQ9NXMF24693",
                            Brand = "BMW",
                            IdLicenses = 2,
                            Model = "Spyder",
                            Payload = 39000
                        },
                        new
                        {
                            Plate = "P7YV36FP67CH69024",
                            Brand = "Ford",
                            IdLicenses = 3,
                            Model = "Accord",
                            Payload = 11000
                        },
                        new
                        {
                            Plate = "CE06LUUNBONO18001",
                            Brand = "Fiat",
                            IdLicenses = 2,
                            Model = "LeBaron",
                            Payload = 21000
                        },
                        new
                        {
                            Plate = "IZ4YBHJZU3AK60870",
                            Brand = "Aston Martin",
                            IdLicenses = 2,
                            Model = "1",
                            Payload = 27000
                        },
                        new
                        {
                            Plate = "I5R8DYVPIRJL76072",
                            Brand = "Mazda",
                            IdLicenses = 2,
                            Model = "Countach",
                            Payload = 35000
                        },
                        new
                        {
                            Plate = "JCM2KETIT0K829426",
                            Brand = "Chrysler",
                            IdLicenses = 3,
                            Model = "911",
                            Payload = 26000
                        },
                        new
                        {
                            Plate = "NSHV2LTGC3E126640",
                            Brand = "Bugatti",
                            IdLicenses = 1,
                            Model = "Charger",
                            Payload = 11000
                        },
                        new
                        {
                            Plate = "48EMBP6IBELT14254",
                            Brand = "Volvo",
                            IdLicenses = 2,
                            Model = "Explorer",
                            Payload = 29000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Kelvin43@gmail.com",
                            FirstName = "Tyler",
                            Name = "Keebler",
                            Password = "ulplrdpiW8",
                            CompanyAddressId = "90",
                            CompanyName = "Zieme, Erdman and Emard",
                            Number = "393-924-9629"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Einar20@yahoo.com",
                            FirstName = "Chaya",
                            Name = "Robel",
                            Password = "qLWR6kAQji",
                            CompanyAddressId = "91",
                            CompanyName = "Feeney, Schultz and Boyer",
                            Number = "682-430-4361"
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Lon28@gmail.com",
                            FirstName = "Roberta",
                            Name = "Johnston",
                            Password = "RRbV2WjSdo",
                            CompanyAddressId = "92",
                            CompanyName = "O'Conner Group",
                            Number = "695-232-8171"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Hayden.Pagac67@hotmail.com",
                            FirstName = "Jayne",
                            Name = "McLaughlin",
                            Password = "_ni_5XP5d4",
                            CompanyAddressId = "93",
                            CompanyName = "Hansen, Vandervort and Emard",
                            Number = "913-712-2374"
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Cielo.Fritsch89@gmail.com",
                            FirstName = "Claudie",
                            Name = "Beahan",
                            Password = "jgtT7vk1CU",
                            CompanyAddressId = "94",
                            CompanyName = "Windler Inc",
                            Number = "689-270-2891"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Sophie_Nicolas11@gmail.com",
                            FirstName = "Madelynn",
                            Name = "Considine",
                            Password = "GLfHV1dqLe",
                            CompanyAddressId = "95",
                            CompanyName = "Hartmann - Kuphal",
                            Number = "631-412-3588"
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Lilly.Lesch52@yahoo.com",
                            FirstName = "Iva",
                            Name = "Brakus",
                            Password = "ZHMTMFusfT",
                            CompanyAddressId = "96",
                            CompanyName = "Tremblay, Lind and Boyle",
                            Number = "209-955-0881"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Eli82@gmail.com",
                            FirstName = "Josefina",
                            Name = "Kemmer",
                            Password = "rA75DiB6mg",
                            CompanyAddressId = "97",
                            CompanyName = "Veum - Bradtke",
                            Number = "648-912-3214"
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Alysa_Ortiz@yahoo.com",
                            FirstName = "Elmore",
                            Name = "Macejkovic",
                            Password = "YUQ9NbrH1v",
                            CompanyAddressId = "98",
                            CompanyName = "Ebert LLC",
                            Number = "212-437-0916"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Cristobal_Turner1@gmail.com",
                            FirstName = "Quentin",
                            Name = "Kutch",
                            Password = "3jjB_RTTWl",
                            CompanyAddressId = "99",
                            CompanyName = "Macejkovic and Sons",
                            Number = "445-805-5210"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Gunnar_Friesen@yahoo.com",
                            FirstName = "Leonor",
                            Name = "Casper",
                            Password = "KaL6QYzukb",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Sheridan.Nienow40@yahoo.com",
                            FirstName = "Kathlyn",
                            Name = "Gaylord",
                            Password = "vhFM3c7DiB",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Micheal42@hotmail.com",
                            FirstName = "Isabella",
                            Name = "Langworth",
                            Password = "Ge2NQfbWHU",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Adolph.Parisian63@yahoo.com",
                            FirstName = "Noel",
                            Name = "Hammes",
                            Password = "xllwxPrGHH",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Estefania.Treutel@gmail.com",
                            FirstName = "Name",
                            Name = "Zboncak",
                            Password = "tSliyvr5lB",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Reina50@hotmail.com",
                            FirstName = "Oliver",
                            Name = "Tillman",
                            Password = "9BFHDffU9t",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Josefa88@hotmail.com",
                            FirstName = "Abbigail",
                            Name = "Kuhlman",
                            Password = "dDHIzpK9P7",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Makayla_Anderson32@hotmail.com",
                            FirstName = "Tess",
                            Name = "Johnston",
                            Password = "MAdFrL526f",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Theodora.Rosenbaum@hotmail.com",
                            FirstName = "Lambert",
                            Name = "Boyer",
                            Password = "QWCs_4Uwxg",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Cora_Treutel32@gmail.com",
                            FirstName = "Loyal",
                            Name = "O'Kon",
                            Password = "AnnBguY4jf",
                            IdCertification = 2
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "61",
                            Email = "Trey_Sporer1@yahoo.com",
                            FirstName = "Jerrold",
                            Name = "Turcotte",
                            Password = "yd16W97zna"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Ford39@yahoo.com",
                            FirstName = "Ada",
                            Name = "Gaylord",
                            Password = "ZSF79Ral6D"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Laverne.Kilback@gmail.com",
                            FirstName = "Junius",
                            Name = "West",
                            Password = "qvcCy303Z5"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Asha_Feest@gmail.com",
                            FirstName = "Tiffany",
                            Name = "Keeling",
                            Password = "CcOi3Z2xY6"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Dudley.Aufderhar85@hotmail.com",
                            FirstName = "Meaghan",
                            Name = "Schowalter",
                            Password = "VE8ZxOHiPa"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Skylar69@yahoo.com",
                            FirstName = "Laila",
                            Name = "Emmerich",
                            Password = "EGMhHG1WiR"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "May.Fritsch@yahoo.com",
                            FirstName = "Myrtice",
                            Name = "Towne",
                            Password = "Zwaqv5PIr8"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Romaine12@hotmail.com",
                            FirstName = "Murray",
                            Name = "Rau",
                            Password = "bF6Rjo8mpt"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Alverta.Zboncak@gmail.com",
                            FirstName = "Ariane",
                            Name = "Mueller",
                            Password = "0LnA9tdewI"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Quinton19@hotmail.com",
                            FirstName = "Misty",
                            Name = "Mayert",
                            Password = "s1mHHx9_Bk"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Dispatcher", "Dispatcher")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDispatcher");

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.Navigation("Client");

                    b.Navigation("Dispatcher");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
