// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507193919_DispatcherCertif")]
    partial class DispatcherCertif
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "60",
                            Country = "Montenegro",
                            Locality = "Batzbury",
                            LocalityCode = "58263-6452",
                            Number = "5020",
                            Street = "Hailie Shoal"
                        },
                        new
                        {
                            IdAddress = "61",
                            Country = "Liberia",
                            Locality = "South Jovannyside",
                            LocalityCode = "47684-3126",
                            Number = "882",
                            Street = "Deckow Pike"
                        },
                        new
                        {
                            IdAddress = "62",
                            Country = "Ghana",
                            Locality = "Wizafort",
                            LocalityCode = "80987-5463",
                            Number = "4496",
                            Street = "Jarret Port"
                        },
                        new
                        {
                            IdAddress = "63",
                            Country = "Mali",
                            Locality = "Jastborough",
                            LocalityCode = "91888-5632",
                            Number = "136",
                            Street = "Flatley Dam"
                        },
                        new
                        {
                            IdAddress = "64",
                            Country = "Montserrat",
                            Locality = "Fidelshire",
                            LocalityCode = "53809-7112",
                            Number = "45855",
                            Street = "Treutel Valleys"
                        },
                        new
                        {
                            IdAddress = "65",
                            Country = "Bahamas",
                            Locality = "Lianachester",
                            LocalityCode = "76706-8035",
                            Number = "691",
                            Street = "Feil Parks"
                        },
                        new
                        {
                            IdAddress = "66",
                            Country = "Cameroon",
                            Locality = "Towneview",
                            LocalityCode = "65591",
                            Number = "6830",
                            Street = "Cole Stream"
                        },
                        new
                        {
                            IdAddress = "67",
                            Country = "Falkland Islands (Malvinas)",
                            Locality = "Bodeshire",
                            LocalityCode = "49925-2964",
                            Number = "0568",
                            Street = "Santina Expressway"
                        },
                        new
                        {
                            IdAddress = "68",
                            Country = "Poland",
                            Locality = "West Makenziemouth",
                            LocalityCode = "21634",
                            Number = "29119",
                            Street = "Ozella Mount"
                        },
                        new
                        {
                            IdAddress = "69",
                            Country = "Afghanistan",
                            Locality = "Lake Rosetta",
                            LocalityCode = "27476",
                            Number = "4170",
                            Street = "Vivienne Estate"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Oscar71@yahoo.com",
                            FirstName = "Felicity",
                            Name = "Rogahn",
                            Password = "GFizTAtCT0",
                            CompanyAddressId = "60",
                            CompanyName = "Lynch and Sons",
                            Number = "303-232-6976"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Kacey3@yahoo.com",
                            FirstName = "Patricia",
                            Name = "Kling",
                            Password = "WcZbIpbwh7",
                            CompanyAddressId = "61",
                            CompanyName = "Rau - Abernathy",
                            Number = "529-995-6631"
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Shad_Lesch@yahoo.com",
                            FirstName = "Anika",
                            Name = "Vandervort",
                            Password = "bZJqh1NukG",
                            CompanyAddressId = "62",
                            CompanyName = "Littel - Kub",
                            Number = "667-467-5238"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Raymond_Kris@yahoo.com",
                            FirstName = "Garret",
                            Name = "Olson",
                            Password = "9Mqym8XGCM",
                            CompanyAddressId = "63",
                            CompanyName = "Ritchie, Stoltenberg and Howell",
                            Number = "416-466-7024"
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Maya62@hotmail.com",
                            FirstName = "Melissa",
                            Name = "Monahan",
                            Password = "r7M3Dn8VHl",
                            CompanyAddressId = "64",
                            CompanyName = "Aufderhar, Goodwin and Ledner",
                            Number = "384-581-2366"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Russ59@yahoo.com",
                            FirstName = "Kellie",
                            Name = "Breitenberg",
                            Password = "iO6bVKexGw",
                            CompanyAddressId = "65",
                            CompanyName = "Walter - Walsh",
                            Number = "739-204-9691"
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Aurelio7@yahoo.com",
                            FirstName = "Rowena",
                            Name = "Kling",
                            Password = "rPoMxhxKaY",
                            CompanyAddressId = "66",
                            CompanyName = "Kunde LLC",
                            Number = "386-958-3324"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Laron_Dickinson50@gmail.com",
                            FirstName = "Kristofer",
                            Name = "Sipes",
                            Password = "FLOMo0TKca",
                            CompanyAddressId = "67",
                            CompanyName = "Boyer - Feil",
                            Number = "342-388-9184"
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Alejandrin_Rice78@yahoo.com",
                            FirstName = "Bonita",
                            Name = "Schamberger",
                            Password = "JlEYpM0NoA",
                            CompanyAddressId = "68",
                            CompanyName = "Wuckert and Sons",
                            Number = "759-890-1193"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Presley46@gmail.com",
                            FirstName = "Davonte",
                            Name = "Ziemann",
                            Password = "NOxoqe441P",
                            CompanyAddressId = "69",
                            CompanyName = "Kautzer, Collins and Waelchi",
                            Number = "909-419-3666"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "50",
                            Email = "Devin_Fisher11@yahoo.com",
                            FirstName = "Matilde",
                            Name = "Lemke",
                            Password = "_qGdF6ApHV",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "51",
                            Email = "Dessie92@gmail.com",
                            FirstName = "Ernesto",
                            Name = "Harvey",
                            Password = "AZWhGwVNIN",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "52",
                            Email = "Dedric6@yahoo.com",
                            FirstName = "Elwin",
                            Name = "Buckridge",
                            Password = "FubIa6s3hm",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Winona84@yahoo.com",
                            FirstName = "Jose",
                            Name = "Bartoletti",
                            Password = "tUJwLEl1cc",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "54",
                            Email = "Rory21@hotmail.com",
                            FirstName = "Ezekiel",
                            Name = "Haag",
                            Password = "tFDG8f7rPe",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Abigayle.Kuhic12@hotmail.com",
                            FirstName = "Cierra",
                            Name = "Hyatt",
                            Password = "I_QYlV6NPF",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "56",
                            Email = "Enoch_Bradtke50@yahoo.com",
                            FirstName = "Erica",
                            Name = "Parisian",
                            Password = "27GyxItYBc",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Elliot_Schamberger39@gmail.com",
                            FirstName = "Mathew",
                            Name = "Wisoky",
                            Password = "p_JR0jwPck",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "58",
                            Email = "Dina.Toy@yahoo.com",
                            FirstName = "Myrtice",
                            Name = "Green",
                            Password = "EJS2oFJh2c",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Celestine20@hotmail.com",
                            FirstName = "Maxime",
                            Name = "Beer",
                            Password = "yMaikVNE_r",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "40",
                            Email = "Adrian87@yahoo.com",
                            FirstName = "Kasandra",
                            Name = "Greenholt",
                            Password = "2Vo9oBXQCL"
                        },
                        new
                        {
                            Matricule = "41",
                            Email = "Jayda2@gmail.com",
                            FirstName = "Dorris",
                            Name = "Gibson",
                            Password = "_CZ7ULXUit"
                        },
                        new
                        {
                            Matricule = "42",
                            Email = "Tillman79@gmail.com",
                            FirstName = "Mortimer",
                            Name = "Fadel",
                            Password = "l3ryFt4Ng7"
                        },
                        new
                        {
                            Matricule = "43",
                            Email = "Loyal_OConnell58@hotmail.com",
                            FirstName = "Norbert",
                            Name = "Schultz",
                            Password = "jd1_4TAB9V"
                        },
                        new
                        {
                            Matricule = "44",
                            Email = "Kathleen_Emmerich68@hotmail.com",
                            FirstName = "Braeden",
                            Name = "Jast",
                            Password = "3P__4SXVRm"
                        },
                        new
                        {
                            Matricule = "45",
                            Email = "Ari56@yahoo.com",
                            FirstName = "Emery",
                            Name = "Miller",
                            Password = "0gQn9vGduf"
                        },
                        new
                        {
                            Matricule = "46",
                            Email = "Leonel.Schoen@gmail.com",
                            FirstName = "Jon",
                            Name = "Labadie",
                            Password = "9RR4ET8fZM"
                        },
                        new
                        {
                            Matricule = "47",
                            Email = "Verlie_Cole@yahoo.com",
                            FirstName = "Cooper",
                            Name = "Swaniawski",
                            Password = "PVej9kqPAB"
                        },
                        new
                        {
                            Matricule = "48",
                            Email = "Rylee.Zemlak78@yahoo.com",
                            FirstName = "Jamey",
                            Name = "Bogisich",
                            Password = "5WtSKIQ6R_"
                        },
                        new
                        {
                            Matricule = "49",
                            Email = "Jack.Denesik@hotmail.com",
                            FirstName = "Judah",
                            Name = "Welch",
                            Password = "jAGFKwAezc"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany("Vehicules")
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Navigation("Vehicules");
                });
#pragma warning restore 612, 618
        }
    }
}
