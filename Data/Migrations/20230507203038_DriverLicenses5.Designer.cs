// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507203038_DriverLicenses5")]
    partial class DriverLicenses5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "80",
                            Country = "Italy",
                            Locality = "West Michel",
                            LocalityCode = "87812-6339",
                            Number = "1339",
                            Street = "Monroe Islands"
                        },
                        new
                        {
                            IdAddress = "81",
                            Country = "Holy See (Vatican City State)",
                            Locality = "Todberg",
                            LocalityCode = "60938",
                            Number = "70509",
                            Street = "Norma Village"
                        },
                        new
                        {
                            IdAddress = "82",
                            Country = "Mali",
                            Locality = "Port Merlmouth",
                            LocalityCode = "85529",
                            Number = "4858",
                            Street = "Sporer Mall"
                        },
                        new
                        {
                            IdAddress = "83",
                            Country = "Algeria",
                            Locality = "Chaunceyborough",
                            LocalityCode = "48102-6198",
                            Number = "3549",
                            Street = "Schowalter Row"
                        },
                        new
                        {
                            IdAddress = "84",
                            Country = "Cote d'Ivoire",
                            Locality = "North Cindy",
                            LocalityCode = "86039",
                            Number = "44084",
                            Street = "Hassie Shores"
                        },
                        new
                        {
                            IdAddress = "85",
                            Country = "Sao Tome and Principe",
                            Locality = "West Imaland",
                            LocalityCode = "50710-5896",
                            Number = "70663",
                            Street = "Bode Mountain"
                        },
                        new
                        {
                            IdAddress = "86",
                            Country = "Mauritius",
                            Locality = "Wilkinsonfort",
                            LocalityCode = "43186",
                            Number = "11517",
                            Street = "Cummerata Ville"
                        },
                        new
                        {
                            IdAddress = "87",
                            Country = "French Polynesia",
                            Locality = "East Monserratehaven",
                            LocalityCode = "87076-4412",
                            Number = "137",
                            Street = "Carroll Road"
                        },
                        new
                        {
                            IdAddress = "88",
                            Country = "Guinea-Bissau",
                            Locality = "Kihnview",
                            LocalityCode = "80726",
                            Number = "2006",
                            Street = "Reed Place"
                        },
                        new
                        {
                            IdAddress = "89",
                            Country = "Qatar",
                            Locality = "Danielbury",
                            LocalityCode = "38809",
                            Number = "956",
                            Street = "Larkin Spring"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "90",
                            Email = "Ayla_Gleason@yahoo.com",
                            FirstName = "Ruthie",
                            Name = "Hettinger",
                            Password = "dE6mnFsXi4",
                            CompanyAddressId = "80",
                            CompanyName = "Smith LLC",
                            Number = "631-912-4670"
                        },
                        new
                        {
                            Matricule = "91",
                            Email = "Elroy.Wunsch53@yahoo.com",
                            FirstName = "Brant",
                            Name = "Kirlin",
                            Password = "gDLBGE8y1s",
                            CompanyAddressId = "81",
                            CompanyName = "Lindgren, Lang and Anderson",
                            Number = "393-213-0590"
                        },
                        new
                        {
                            Matricule = "92",
                            Email = "Wanda_Mosciski26@hotmail.com",
                            FirstName = "Jazmyne",
                            Name = "Hane",
                            Password = "9zZPKexgd4",
                            CompanyAddressId = "82",
                            CompanyName = "Abernathy and Sons",
                            Number = "997-757-6890"
                        },
                        new
                        {
                            Matricule = "93",
                            Email = "Ernie4@gmail.com",
                            FirstName = "Whitney",
                            Name = "Beier",
                            Password = "CuYqZ4U5dk",
                            CompanyAddressId = "83",
                            CompanyName = "VonRueden Group",
                            Number = "747-762-3446"
                        },
                        new
                        {
                            Matricule = "94",
                            Email = "Watson_Blick@gmail.com",
                            FirstName = "Delmer",
                            Name = "Keeling",
                            Password = "uKVao0YePZ",
                            CompanyAddressId = "84",
                            CompanyName = "Dickinson and Sons",
                            Number = "368-754-7247"
                        },
                        new
                        {
                            Matricule = "95",
                            Email = "Buford63@yahoo.com",
                            FirstName = "Amiya",
                            Name = "Russel",
                            Password = "DoEph07ykM",
                            CompanyAddressId = "85",
                            CompanyName = "Feil - Blanda",
                            Number = "607-634-8165"
                        },
                        new
                        {
                            Matricule = "96",
                            Email = "Dandre_Schiller38@yahoo.com",
                            FirstName = "Lilly",
                            Name = "Hane",
                            Password = "F7Wa6j5vpD",
                            CompanyAddressId = "86",
                            CompanyName = "Hegmann, Stracke and Ward",
                            Number = "992-356-8699"
                        },
                        new
                        {
                            Matricule = "97",
                            Email = "Karelle9@hotmail.com",
                            FirstName = "Kale",
                            Name = "Ebert",
                            Password = "86FwWPislI",
                            CompanyAddressId = "87",
                            CompanyName = "Green LLC",
                            Number = "494-731-4889"
                        },
                        new
                        {
                            Matricule = "98",
                            Email = "Kassandra_Klocko@yahoo.com",
                            FirstName = "Gerald",
                            Name = "Krajcik",
                            Password = "x2_pps5fxU",
                            CompanyAddressId = "88",
                            CompanyName = "Monahan, Prosacco and Tromp",
                            Number = "246-421-9051"
                        },
                        new
                        {
                            Matricule = "99",
                            Email = "Cloyd27@hotmail.com",
                            FirstName = "Bertrand",
                            Name = "Halvorson",
                            Password = "oaQJkehrFV",
                            CompanyAddressId = "89",
                            CompanyName = "Wiegand and Sons",
                            Number = "369-443-6870"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Robbie.Terry14@hotmail.com",
                            FirstName = "Emilie",
                            Name = "Carroll",
                            Password = "YNTLmzs6LQ",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Dulce61@hotmail.com",
                            FirstName = "Jovan",
                            Name = "Prohaska",
                            Password = "dx5UyzfqFV",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Eriberto19@yahoo.com",
                            FirstName = "August",
                            Name = "Bosco",
                            Password = "Vc0qj5_soV",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Jessyca.Stanton@yahoo.com",
                            FirstName = "Hunter",
                            Name = "McKenzie",
                            Password = "U3aKHJVFLG",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Ibrahim_Schulist83@gmail.com",
                            FirstName = "Phyllis",
                            Name = "Gerhold",
                            Password = "QQNf1gZ0_F",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Florine_Leffler@hotmail.com",
                            FirstName = "Erna",
                            Name = "Huels",
                            Password = "8CEZ9TxK85",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Damien_Leuschke@hotmail.com",
                            FirstName = "Berry",
                            Name = "Buckridge",
                            Password = "RmnbzjVGk7",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Alden_Murazik@hotmail.com",
                            FirstName = "Rowan",
                            Name = "Durgan",
                            Password = "sfmjRJv8rE",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Pierre_Huels38@hotmail.com",
                            FirstName = "Eldred",
                            Name = "Cormier",
                            Password = "jgNNIy58eS",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Israel.Hilll2@gmail.com",
                            FirstName = "Alayna",
                            Name = "Fritsch",
                            Password = "XpMUXTvBBU",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("DriverMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("DriverMatricule");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "51",
                            Email = "Tyler.Trantow20@yahoo.com",
                            FirstName = "Wilhelm",
                            Name = "Kuhlman",
                            Password = "CPBan1hjCw"
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Cristal.Macejkovic54@hotmail.com",
                            FirstName = "Idella",
                            Name = "Koepp",
                            Password = "XQImEP2Sml"
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Jany_Littel83@yahoo.com",
                            FirstName = "Arely",
                            Name = "Stanton",
                            Password = "zN6nJvikjF"
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Wiley0@gmail.com",
                            FirstName = "Arjun",
                            Name = "Ondricka",
                            Password = "LdQUo1Gg0u"
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Bo_Kirlin33@hotmail.com",
                            FirstName = "Bernard",
                            Name = "Sanford",
                            Password = "s2OpgAVQXn"
                        },
                        new
                        {
                            Matricule = "61",
                            Email = "Beaulah74@gmail.com",
                            FirstName = "Dayne",
                            Name = "Kuhlman",
                            Password = "fnXQFF1y7h"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Dedrick83@hotmail.com",
                            FirstName = "Alexandre",
                            Name = "Wyman",
                            Password = "1RxYwlJkmH"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Zelda85@hotmail.com",
                            FirstName = "Kenya",
                            Name = "Weissnat",
                            Password = "fwUAP3UFL_"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Gwen_Rosenbaum71@hotmail.com",
                            FirstName = "Bertha",
                            Name = "Osinski",
                            Password = "W81PQi4zkh"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Iva75@yahoo.com",
                            FirstName = "Isai",
                            Name = "Berge",
                            Password = "nVK4z_DjH7"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany("Licenses")
                        .HasForeignKey("DriverMatricule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Licenses");
                });
#pragma warning restore 612, 618
        }
    }
}
