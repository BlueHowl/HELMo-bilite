// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508165817_Init3")]
    partial class Init3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LoadAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UnloadingAddressId")
                        .HasColumnType("int");

                    b.HasKey("IdAddress");

                    b.HasIndex("LoadAddressId")
                        .IsUnique()
                        .HasFilter("[LoadAddressId] IS NOT NULL");

                    b.HasIndex("UnloadingAddressId")
                        .IsUnique()
                        .HasFilter("[UnloadingAddressId] IS NOT NULL");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "100",
                            Country = "Afghanistan",
                            Locality = "Ramonaton",
                            LocalityCode = "30224",
                            Number = "187",
                            Street = "Keira Fort"
                        },
                        new
                        {
                            IdAddress = "101",
                            Country = "Martinique",
                            Locality = "Coopertown",
                            LocalityCode = "81690",
                            Number = "8463",
                            Street = "Clement Grove"
                        },
                        new
                        {
                            IdAddress = "102",
                            Country = "Norfolk Island",
                            Locality = "Lindbury",
                            LocalityCode = "38961",
                            Number = "1290",
                            Street = "Mollie Mill"
                        },
                        new
                        {
                            IdAddress = "103",
                            Country = "Mongolia",
                            Locality = "Beverlyport",
                            LocalityCode = "28415",
                            Number = "848",
                            Street = "Gutkowski Port"
                        },
                        new
                        {
                            IdAddress = "104",
                            Country = "Bulgaria",
                            Locality = "Jonport",
                            LocalityCode = "26817",
                            Number = "979",
                            Street = "D'Amore Highway"
                        },
                        new
                        {
                            IdAddress = "105",
                            Country = "Chad",
                            Locality = "Arvillamouth",
                            LocalityCode = "34328",
                            Number = "70998",
                            Street = "Lelia Gateway"
                        },
                        new
                        {
                            IdAddress = "106",
                            Country = "Nigeria",
                            Locality = "Lake Joan",
                            LocalityCode = "74548-3553",
                            Number = "6709",
                            Street = "Maya Underpass"
                        },
                        new
                        {
                            IdAddress = "107",
                            Country = "Bahrain",
                            Locality = "Port Isadoreview",
                            LocalityCode = "97443-6638",
                            Number = "6639",
                            Street = "Volkman Lakes"
                        },
                        new
                        {
                            IdAddress = "108",
                            Country = "Sao Tome and Principe",
                            Locality = "North Lorenz",
                            LocalityCode = "25951",
                            Number = "43332",
                            Street = "Dibbert Spring"
                        },
                        new
                        {
                            IdAddress = "109",
                            Country = "Mali",
                            Locality = "Lake Mossie",
                            LocalityCode = "58671",
                            Number = "98288",
                            Street = "Norbert Corner"
                        },
                        new
                        {
                            IdAddress = "130",
                            Country = "Vanuatu",
                            Locality = "Wilfredburgh",
                            LocalityCode = "58825-2763",
                            Number = "23079",
                            Street = "Bradford Bridge"
                        },
                        new
                        {
                            IdAddress = "132",
                            Country = "Lebanon",
                            Locality = "Terryhaven",
                            LocalityCode = "94398",
                            Number = "5238",
                            Street = "Gordon Centers"
                        },
                        new
                        {
                            IdAddress = "134",
                            Country = "Tanzania",
                            Locality = "Kaciberg",
                            LocalityCode = "11719",
                            Number = "534",
                            Street = "Waters Camp"
                        },
                        new
                        {
                            IdAddress = "136",
                            Country = "Vietnam",
                            Locality = "East Vincefort",
                            LocalityCode = "70503-2964",
                            Number = "209",
                            Street = "Keely Manor"
                        },
                        new
                        {
                            IdAddress = "138",
                            Country = "Madagascar",
                            Locality = "New Gage",
                            LocalityCode = "05902-0293",
                            Number = "9754",
                            Street = "Kian Plaza"
                        },
                        new
                        {
                            IdAddress = "140",
                            Country = "Heard Island and McDonald Islands",
                            Locality = "Gerholdhaven",
                            LocalityCode = "21102",
                            Number = "4578",
                            Street = "Liza Meadow"
                        },
                        new
                        {
                            IdAddress = "142",
                            Country = "Algeria",
                            Locality = "West Ezra",
                            LocalityCode = "65790-3367",
                            Number = "1536",
                            Street = "Gusikowski Pine"
                        },
                        new
                        {
                            IdAddress = "144",
                            Country = "Barbados",
                            Locality = "New Lorna",
                            LocalityCode = "16665-7188",
                            Number = "6027",
                            Street = "Haag Lane"
                        },
                        new
                        {
                            IdAddress = "146",
                            Country = "Pitcairn Islands",
                            Locality = "East Alainahaven",
                            LocalityCode = "09499",
                            Number = "614",
                            Street = "Terry Avenue"
                        },
                        new
                        {
                            IdAddress = "148",
                            Country = "Pakistan",
                            Locality = "Gulgowskimouth",
                            LocalityCode = "86275",
                            Number = "28406",
                            Street = "Merritt Mountain"
                        },
                        new
                        {
                            IdAddress = "131",
                            Country = "Saint Pierre and Miquelon",
                            Locality = "Terryshire",
                            LocalityCode = "13335",
                            Number = "0201",
                            Street = "Braun Mill"
                        },
                        new
                        {
                            IdAddress = "133",
                            Country = "Isle of Man",
                            Locality = "East Alexa",
                            LocalityCode = "25951-9393",
                            Number = "8597",
                            Street = "Grady Village"
                        },
                        new
                        {
                            IdAddress = "135",
                            Country = "South Africa",
                            Locality = "Port Merl",
                            LocalityCode = "31456",
                            Number = "6202",
                            Street = "Keyon Prairie"
                        },
                        new
                        {
                            IdAddress = "137",
                            Country = "China",
                            Locality = "Archview",
                            LocalityCode = "44942",
                            Number = "5022",
                            Street = "Auer Plaza"
                        },
                        new
                        {
                            IdAddress = "139",
                            Country = "Barbados",
                            Locality = "Eulaliaville",
                            LocalityCode = "70956-1231",
                            Number = "2286",
                            Street = "Kellen Passage"
                        },
                        new
                        {
                            IdAddress = "141",
                            Country = "Malaysia",
                            Locality = "Breanneville",
                            LocalityCode = "50245-5316",
                            Number = "57508",
                            Street = "Arden Light"
                        },
                        new
                        {
                            IdAddress = "143",
                            Country = "Uzbekistan",
                            Locality = "New Davonteland",
                            LocalityCode = "72623-3779",
                            Number = "78013",
                            Street = "Bednar Lights"
                        },
                        new
                        {
                            IdAddress = "145",
                            Country = "Italy",
                            Locality = "South Lauryville",
                            LocalityCode = "39363-0410",
                            Number = "33930",
                            Street = "Pagac Inlet"
                        },
                        new
                        {
                            IdAddress = "147",
                            Country = "Vietnam",
                            Locality = "Beerside",
                            LocalityCode = "86901-4198",
                            Number = "238",
                            Street = "Bertrand Hollow"
                        },
                        new
                        {
                            IdAddress = "149",
                            Country = "Libyan Arab Jamahiriya",
                            Locality = "East Lysanneside",
                            LocalityCode = "59501",
                            Number = "9182",
                            Street = "Carmel Way"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdVehicule")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoadAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnloadingAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UnloadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDriver");

                    b.HasIndex("IdVehicule");

                    b.ToTable("Deliveries");

                    b.HasData(
                        new
                        {
                            Id = 150,
                            Content = "Error et illum dolorem. Ipsa omnis laborum repellendus hic. Ut sed fugit iusto quidem ratione. Et repudiandae iure.",
                            IdClient = "110",
                            IdVehicule = "O1QW65KZRGJV58098",
                            LoadAddressId = "130",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "131",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 151,
                            Content = "Blanditiis non dignissimos.",
                            IdClient = "111",
                            IdVehicule = "KMI35EHGEKD111692",
                            LoadAddressId = "132",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "133",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 152,
                            Content = "Eum consequuntur ipsa.\nIure accusantium quod qui nihil odit ab autem eos.\nSunt est beatae velit voluptas dolorum suscipit.\nEt nostrum dolor quis.\nSed eius aliquam qui rerum.\nMolestiae dolor in reprehenderit nisi et quia sit.",
                            IdClient = "112",
                            IdVehicule = "MSWLR4MKOLFW76007",
                            LoadAddressId = "134",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "135",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 153,
                            Content = "Illum voluptatibus ut sit fugit ut dolorem.\nAutem quasi et voluptas itaque.\nEt magni ea iusto aut iusto voluptatem.\nIn dolores totam nulla aut eos deserunt.\nEnim eveniet et repudiandae non odio.\nDolore blanditiis eius.",
                            IdClient = "113",
                            IdVehicule = "EAS5CIJEM5E586459",
                            LoadAddressId = "136",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "137",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 154,
                            Content = "dicta",
                            IdClient = "114",
                            IdVehicule = "ZJ8FM7W3HLUH93971",
                            LoadAddressId = "138",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "139",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 155,
                            Content = "Excepturi et ut debitis veniam molestiae aut. In sint vel quae saepe autem animi quidem. Pariatur fugiat vitae ullam labore voluptatum. Quo non dolorum enim aut officiis sed iusto.",
                            IdClient = "115",
                            IdVehicule = "S4CDOHXP66GL45873",
                            LoadAddressId = "140",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "141",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 156,
                            Content = "aperiam",
                            IdClient = "116",
                            IdVehicule = "AHFGFK1B8SBM85422",
                            LoadAddressId = "142",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "143",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 157,
                            Content = "Culpa aliquam voluptatum.\nLabore voluptatum ut itaque molestiae incidunt alias nostrum mollitia.\nVoluptatem itaque alias quis corrupti earum voluptas.\nOdit veritatis ut.\nEst in incidunt et sunt tempora est vitae.\nMinus alias aliquid rerum eum dolorem.",
                            IdClient = "117",
                            IdVehicule = "BSTYUJ3RNLZ539066",
                            LoadAddressId = "144",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "145",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 158,
                            Content = "Voluptatem sed quidem deleniti totam qui earum sapiente vero quod.\nQui blanditiis quis et possimus voluptatem voluptates ut voluptatibus explicabo.\nEt asperiores blanditiis itaque voluptas qui et consequatur placeat odio.",
                            IdClient = "118",
                            IdVehicule = "M8BKDIVLV0HJ49379",
                            LoadAddressId = "146",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "147",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        },
                        new
                        {
                            Id = 159,
                            Content = "in",
                            IdClient = "119",
                            IdVehicule = "8BQS9OR1JBUV83259",
                            LoadAddressId = "148",
                            LoadDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnloadingAddressId = "149",
                            UnloadingDate = new DateTime(2020, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "En cours"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "O1QW65KZRGJV58098",
                            Brand = "Chevrolet",
                            IdLicenses = 2,
                            Model = "Focus",
                            Payload = 10000
                        },
                        new
                        {
                            Plate = "KMI35EHGEKD111692",
                            Brand = "Aston Martin",
                            IdLicenses = 3,
                            Model = "PT Cruiser",
                            Payload = 12000
                        },
                        new
                        {
                            Plate = "MSWLR4MKOLFW76007",
                            Brand = "Mini",
                            IdLicenses = 3,
                            Model = "Wrangler",
                            Payload = 12000
                        },
                        new
                        {
                            Plate = "EAS5CIJEM5E586459",
                            Brand = "Toyota",
                            IdLicenses = 1,
                            Model = "Model T",
                            Payload = 21000
                        },
                        new
                        {
                            Plate = "ZJ8FM7W3HLUH93971",
                            Brand = "Ferrari",
                            IdLicenses = 3,
                            Model = "Aventador",
                            Payload = 17000
                        },
                        new
                        {
                            Plate = "S4CDOHXP66GL45873",
                            Brand = "Mercedes Benz",
                            IdLicenses = 2,
                            Model = "Land Cruiser",
                            Payload = 15000
                        },
                        new
                        {
                            Plate = "AHFGFK1B8SBM85422",
                            Brand = "Mercedes Benz",
                            IdLicenses = 1,
                            Model = "ATS",
                            Payload = 33000
                        },
                        new
                        {
                            Plate = "BSTYUJ3RNLZ539066",
                            Brand = "Mazda",
                            IdLicenses = 3,
                            Model = "Countach",
                            Payload = 30000
                        },
                        new
                        {
                            Plate = "M8BKDIVLV0HJ49379",
                            Brand = "Lamborghini",
                            IdLicenses = 1,
                            Model = "XC90",
                            Payload = 21000
                        },
                        new
                        {
                            Plate = "8BQS9OR1JBUV83259",
                            Brand = "Jeep",
                            IdLicenses = 2,
                            Model = "Challenger",
                            Payload = 5000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "110",
                            Email = "Reuben_Collier6@yahoo.com",
                            FirstName = "Candelario",
                            Name = "Ebert",
                            Password = "MtHclAasT2",
                            CompanyAddressId = "100",
                            CompanyName = "Reichert - Dach",
                            Number = "701-250-7963"
                        },
                        new
                        {
                            Matricule = "111",
                            Email = "Spencer91@yahoo.com",
                            FirstName = "Zachery",
                            Name = "Pfannerstill",
                            Password = "lrWbDckfO1",
                            CompanyAddressId = "101",
                            CompanyName = "Robel - Christiansen",
                            Number = "520-828-9039"
                        },
                        new
                        {
                            Matricule = "112",
                            Email = "Alana99@yahoo.com",
                            FirstName = "Adam",
                            Name = "Nader",
                            Password = "9aI_WcNJUZ",
                            CompanyAddressId = "102",
                            CompanyName = "White - Hamill",
                            Number = "213-951-3806"
                        },
                        new
                        {
                            Matricule = "113",
                            Email = "Mckenzie_Jacobson@gmail.com",
                            FirstName = "Elton",
                            Name = "DuBuque",
                            Password = "UlLMb6zGhd",
                            CompanyAddressId = "103",
                            CompanyName = "Hudson, Schmidt and Nienow",
                            Number = "859-894-4151"
                        },
                        new
                        {
                            Matricule = "114",
                            Email = "Johann_Lakin@yahoo.com",
                            FirstName = "Madie",
                            Name = "Emard",
                            Password = "sK7bZwmVA0",
                            CompanyAddressId = "104",
                            CompanyName = "Murphy, Mayer and Johnson",
                            Number = "547-554-8100"
                        },
                        new
                        {
                            Matricule = "115",
                            Email = "Jaydon53@hotmail.com",
                            FirstName = "Mylene",
                            Name = "Kovacek",
                            Password = "NCuwNBwaVc",
                            CompanyAddressId = "105",
                            CompanyName = "Lakin LLC",
                            Number = "576-868-9307"
                        },
                        new
                        {
                            Matricule = "116",
                            Email = "Flossie.Harris@yahoo.com",
                            FirstName = "Joannie",
                            Name = "Sipes",
                            Password = "0SZ_aAe9LH",
                            CompanyAddressId = "106",
                            CompanyName = "Kessler - O'Kon",
                            Number = "402-345-5178"
                        },
                        new
                        {
                            Matricule = "117",
                            Email = "Miguel75@gmail.com",
                            FirstName = "Kailyn",
                            Name = "Schulist",
                            Password = "ktm0pNdkgI",
                            CompanyAddressId = "107",
                            CompanyName = "Bernhard, Cronin and Torp",
                            Number = "525-794-8082"
                        },
                        new
                        {
                            Matricule = "118",
                            Email = "Amber_Champlin@gmail.com",
                            FirstName = "Forest",
                            Name = "Parisian",
                            Password = "5cYgwHxUnH",
                            CompanyAddressId = "108",
                            CompanyName = "Greenfelder - Walker",
                            Number = "696-668-8099"
                        },
                        new
                        {
                            Matricule = "119",
                            Email = "Quincy.Deckow@gmail.com",
                            FirstName = "Domenick",
                            Name = "Stokes",
                            Password = "LocTpJNXVh",
                            CompanyAddressId = "109",
                            CompanyName = "Graham, Bauch and Lockman",
                            Number = "547-950-6254"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "90",
                            Email = "Mitchell43@gmail.com",
                            FirstName = "Sarina",
                            Name = "Wolf",
                            Password = "DsIDVX1Knb",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "91",
                            Email = "Andreanne_Witting@yahoo.com",
                            FirstName = "Waino",
                            Name = "Hagenes",
                            Password = "m825ABZ79o",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "92",
                            Email = "Michaela64@gmail.com",
                            FirstName = "Rebecca",
                            Name = "Kuhn",
                            Password = "Z0M5L_i0fU",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "93",
                            Email = "Blair.Volkman@yahoo.com",
                            FirstName = "Kaitlin",
                            Name = "Schoen",
                            Password = "e7JajAY3iq",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "94",
                            Email = "Rodrigo81@hotmail.com",
                            FirstName = "Keith",
                            Name = "Witting",
                            Password = "e08kHwMpuY",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "95",
                            Email = "Conrad_Raynor@yahoo.com",
                            FirstName = "Milan",
                            Name = "Will",
                            Password = "xV4VnKkKRi",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "96",
                            Email = "Mohamed_Tremblay27@yahoo.com",
                            FirstName = "Rebecca",
                            Name = "Willms",
                            Password = "igzkvCr8dF",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "97",
                            Email = "Korey10@yahoo.com",
                            FirstName = "Haley",
                            Name = "Rosenbaum",
                            Password = "PBklsSh1jR",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "98",
                            Email = "Enid66@hotmail.com",
                            FirstName = "Selmer",
                            Name = "Kihn",
                            Password = "sEdJM7kud7",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "99",
                            Email = "Frederic73@yahoo.com",
                            FirstName = "Lizzie",
                            Name = "Lueilwitz",
                            Password = "UD7GzN01Q5",
                            IdCertification = 3
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Jennifer_Graham74@gmail.com",
                            FirstName = "Eriberto",
                            Name = "Hackett",
                            Password = "0J7HpyJuN2"
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Mitchell27@hotmail.com",
                            FirstName = "Deborah",
                            Name = "Swaniawski",
                            Password = "r0UNCrqwE9"
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Bennett.Lubowitz73@yahoo.com",
                            FirstName = "Jermey",
                            Name = "Langworth",
                            Password = "PXccq2kuuq"
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Loyce_Ebert@hotmail.com",
                            FirstName = "Eulah",
                            Name = "Christiansen",
                            Password = "hMKRzZgCE5"
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Gene.Dickinson46@hotmail.com",
                            FirstName = "Madalyn",
                            Name = "Effertz",
                            Password = "GcaDHOLbcj"
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Kattie_Grant63@gmail.com",
                            FirstName = "Meagan",
                            Name = "Reynolds",
                            Password = "FKre0Yvq5h"
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Colton_Paucek33@yahoo.com",
                            FirstName = "Jacklyn",
                            Name = "Crooks",
                            Password = "y4SZAWeVBi"
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Jeffry_Herzog@yahoo.com",
                            FirstName = "Maria",
                            Name = "Hirthe",
                            Password = "Q37CgGuMMb"
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Lia.Osinski@yahoo.com",
                            FirstName = "Marcelo",
                            Name = "Conroy",
                            Password = "NEHyYa9yMq"
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Laney82@yahoo.com",
                            FirstName = "Nya",
                            Name = "Sanford",
                            Password = "sJWZ48ljnH"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("LoadAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "LoadAddressId");

                    b.HasOne("HELMo_bilite.Models.Delivery", null)
                        .WithOne("UnloadingAddress")
                        .HasForeignKey("HELMo_bilite.Models.Address", "UnloadingAddressId");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Driver", "Driver")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDriver");

                    b.HasOne("HELMo_bilite.Models.Vehicule", "Vehicule")
                        .WithMany()
                        .HasForeignKey("IdVehicule");

                    b.Navigation("Client");

                    b.Navigation("Driver");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Navigation("LoadAddress")
                        .IsRequired();

                    b.Navigation("UnloadingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
