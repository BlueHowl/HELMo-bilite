// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507200310_DriverLicenses2")]
    partial class DriverLicenses2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicenses", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "80",
                            Country = "Cook Islands",
                            Locality = "West Kaitlyntown",
                            LocalityCode = "55655-4733",
                            Number = "8297",
                            Street = "Maximillia Spring"
                        },
                        new
                        {
                            IdAddress = "81",
                            Country = "Guam",
                            Locality = "Veumville",
                            LocalityCode = "17369",
                            Number = "74095",
                            Street = "Roberts Center"
                        },
                        new
                        {
                            IdAddress = "82",
                            Country = "Saint Barthelemy",
                            Locality = "Marksbury",
                            LocalityCode = "80442-7490",
                            Number = "234",
                            Street = "Florida Summit"
                        },
                        new
                        {
                            IdAddress = "83",
                            Country = "Cote d'Ivoire",
                            Locality = "Jazminton",
                            LocalityCode = "39658",
                            Number = "57328",
                            Street = "Steuber Crescent"
                        },
                        new
                        {
                            IdAddress = "84",
                            Country = "Svalbard & Jan Mayen Islands",
                            Locality = "Cristianfurt",
                            LocalityCode = "25290-1750",
                            Number = "47589",
                            Street = "Dandre Lakes"
                        },
                        new
                        {
                            IdAddress = "85",
                            Country = "Benin",
                            Locality = "South Isaiahhaven",
                            LocalityCode = "40708-6518",
                            Number = "97328",
                            Street = "Frami Mount"
                        },
                        new
                        {
                            IdAddress = "86",
                            Country = "Norway",
                            Locality = "Brentfort",
                            LocalityCode = "16921-4600",
                            Number = "412",
                            Street = "Marley Haven"
                        },
                        new
                        {
                            IdAddress = "87",
                            Country = "Myanmar",
                            Locality = "New Anissa",
                            LocalityCode = "85288-9313",
                            Number = "6077",
                            Street = "Eleanore Parks"
                        },
                        new
                        {
                            IdAddress = "88",
                            Country = "American Samoa",
                            Locality = "South Celestino",
                            LocalityCode = "13035-6676",
                            Number = "347",
                            Street = "Stroman Coves"
                        },
                        new
                        {
                            IdAddress = "89",
                            Country = "Aruba",
                            Locality = "DuBuquechester",
                            LocalityCode = "54965",
                            Number = "2691",
                            Street = "Smitham Lake"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "90",
                            Email = "Aisha.Schroeder9@hotmail.com",
                            FirstName = "Giovanna",
                            Name = "Kub",
                            Password = "bflnMimTDy",
                            CompanyAddressId = "80",
                            CompanyName = "Corkery - Howe",
                            Number = "433-381-7173"
                        },
                        new
                        {
                            Matricule = "91",
                            Email = "Zachariah.Labadie4@gmail.com",
                            FirstName = "Ila",
                            Name = "Steuber",
                            Password = "0pyD0CysEn",
                            CompanyAddressId = "81",
                            CompanyName = "Kovacek - Abbott",
                            Number = "834-667-8046"
                        },
                        new
                        {
                            Matricule = "92",
                            Email = "Jaylen27@gmail.com",
                            FirstName = "Ocie",
                            Name = "Von",
                            Password = "6NfxBpBjq4",
                            CompanyAddressId = "82",
                            CompanyName = "Jast - Nader",
                            Number = "955-361-8919"
                        },
                        new
                        {
                            Matricule = "93",
                            Email = "Marcos.Kunze@yahoo.com",
                            FirstName = "Reinhold",
                            Name = "Ebert",
                            Password = "vOjyRy6aLE",
                            CompanyAddressId = "83",
                            CompanyName = "Rau, Ernser and McCullough",
                            Number = "612-539-7958"
                        },
                        new
                        {
                            Matricule = "94",
                            Email = "Jaleel_Ferry@gmail.com",
                            FirstName = "Kimberly",
                            Name = "Wehner",
                            Password = "FEjxJuPdfU",
                            CompanyAddressId = "84",
                            CompanyName = "Ward - Gerhold",
                            Number = "802-993-1306"
                        },
                        new
                        {
                            Matricule = "95",
                            Email = "Cody6@hotmail.com",
                            FirstName = "Noel",
                            Name = "Bauch",
                            Password = "HndsjUqRsk",
                            CompanyAddressId = "85",
                            CompanyName = "Harber Inc",
                            Number = "382-772-7841"
                        },
                        new
                        {
                            Matricule = "96",
                            Email = "Rosemary.Hudson7@hotmail.com",
                            FirstName = "Freeda",
                            Name = "Reilly",
                            Password = "x_NEJrjifO",
                            CompanyAddressId = "86",
                            CompanyName = "Hansen, Volkman and Armstrong",
                            Number = "224-631-6678"
                        },
                        new
                        {
                            Matricule = "97",
                            Email = "Cordelia.Gislason@gmail.com",
                            FirstName = "Tia",
                            Name = "Hamill",
                            Password = "qOTlZO6gAi",
                            CompanyAddressId = "87",
                            CompanyName = "O'Reilly, Deckow and Hoppe",
                            Number = "638-564-8244"
                        },
                        new
                        {
                            Matricule = "98",
                            Email = "Gillian_Wisoky22@gmail.com",
                            FirstName = "Bell",
                            Name = "Breitenberg",
                            Password = "hzKhaqPbaf",
                            CompanyAddressId = "88",
                            CompanyName = "Luettgen - O'Keefe",
                            Number = "843-974-6986"
                        },
                        new
                        {
                            Matricule = "99",
                            Email = "Ewell.OConnell25@hotmail.com",
                            FirstName = "Malvina",
                            Name = "Johnson",
                            Password = "THC8i2a9fp",
                            CompanyAddressId = "89",
                            CompanyName = "Schuster - Prosacco",
                            Number = "797-898-9904"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Taya_Adams56@hotmail.com",
                            FirstName = "Clement",
                            Name = "Pacocha",
                            Password = "DuJ31naY23",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Fermin.Grady@hotmail.com",
                            FirstName = "Josefa",
                            Name = "Wiza",
                            Password = "rwx706ajbH",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Jaycee79@hotmail.com",
                            FirstName = "Shakira",
                            Name = "Abernathy",
                            Password = "JR241bnSaW",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Linnea_Casper@yahoo.com",
                            FirstName = "Fiona",
                            Name = "Gaylord",
                            Password = "r3pz2TlN58",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Jalen.Bartell21@hotmail.com",
                            FirstName = "Evie",
                            Name = "Littel",
                            Password = "blHIbHQOxd",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Julius.Johnston77@gmail.com",
                            FirstName = "Melody",
                            Name = "Muller",
                            Password = "jL1GbC9afM",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Einar.Conn@gmail.com",
                            FirstName = "Maudie",
                            Name = "Stehr",
                            Password = "86WFKFV2fh",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Richard_Schaden@gmail.com",
                            FirstName = "Dale",
                            Name = "Christiansen",
                            Password = "_ZRSqKm9LG",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Jennie96@gmail.com",
                            FirstName = "Idella",
                            Name = "Feil",
                            Password = "KnKD2ZCjbq",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Winona_Schumm@hotmail.com",
                            FirstName = "Tanya",
                            Name = "Stiedemann",
                            Password = "6XNXkHEOxd",
                            IdCertification = 1
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "51",
                            Email = "Estelle.Lueilwitz34@yahoo.com",
                            FirstName = "Ila",
                            Name = "Lehner",
                            Password = "XLUo_5ui_m"
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Ayana47@yahoo.com",
                            FirstName = "Sylvester",
                            Name = "Lowe",
                            Password = "zi_el4GT1s"
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Easton_Marquardt@gmail.com",
                            FirstName = "Susie",
                            Name = "Considine",
                            Password = "wE3QhD2iSm"
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Kaitlin_Jones30@yahoo.com",
                            FirstName = "Jerad",
                            Name = "Kuhn",
                            Password = "ojK_gQoGMi"
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Paula.Ankunding18@hotmail.com",
                            FirstName = "Nola",
                            Name = "Bartell",
                            Password = "Xk3iN3Mymj"
                        },
                        new
                        {
                            Matricule = "61",
                            Email = "Brandy9@yahoo.com",
                            FirstName = "Ramiro",
                            Name = "Stoltenberg",
                            Password = "gGhtEDeZWn"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Liam_Von19@hotmail.com",
                            FirstName = "Sammy",
                            Name = "Hahn",
                            Password = "97t6Ts332u"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Mathew65@yahoo.com",
                            FirstName = "Chelsea",
                            Name = "Pollich",
                            Password = "tHMpWr8Izi"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Assunta_Mills@yahoo.com",
                            FirstName = "Alia",
                            Name = "Kub",
                            Password = "PRvJMOcX8A"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Alanna_Sanford@yahoo.com",
                            FirstName = "Jonatan",
                            Name = "Cummerata",
                            Password = "hG8FJYUnNe"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });
#pragma warning restore 612, 618
        }
    }
}
