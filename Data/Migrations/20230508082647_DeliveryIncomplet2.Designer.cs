// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230508082647_DeliveryIncomplet2")]
    partial class DeliveryIncomplet2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "90",
                            Country = "Uruguay",
                            Locality = "Halliebury",
                            LocalityCode = "80371-8608",
                            Number = "7618",
                            Street = "Malinda Hill"
                        },
                        new
                        {
                            IdAddress = "91",
                            Country = "Kenya",
                            Locality = "East Elmiraport",
                            LocalityCode = "74973",
                            Number = "4017",
                            Street = "Casper Greens"
                        },
                        new
                        {
                            IdAddress = "92",
                            Country = "India",
                            Locality = "New Hans",
                            LocalityCode = "56250",
                            Number = "31735",
                            Street = "Nick Brook"
                        },
                        new
                        {
                            IdAddress = "93",
                            Country = "Slovakia (Slovak Republic)",
                            Locality = "Wintheiserburgh",
                            LocalityCode = "10462",
                            Number = "76296",
                            Street = "Pfeffer Islands"
                        },
                        new
                        {
                            IdAddress = "94",
                            Country = "Virgin Islands, U.S.",
                            Locality = "West Murielburgh",
                            LocalityCode = "31113-6775",
                            Number = "918",
                            Street = "Tyshawn Fords"
                        },
                        new
                        {
                            IdAddress = "95",
                            Country = "Germany",
                            Locality = "Noeliastad",
                            LocalityCode = "52172",
                            Number = "0048",
                            Street = "Grant Mews"
                        },
                        new
                        {
                            IdAddress = "96",
                            Country = "Djibouti",
                            Locality = "North Montanaton",
                            LocalityCode = "38229",
                            Number = "57271",
                            Street = "Ward Extensions"
                        },
                        new
                        {
                            IdAddress = "97",
                            Country = "Uganda",
                            Locality = "South Roderickshire",
                            LocalityCode = "03273-6647",
                            Number = "8520",
                            Street = "Madalyn Stravenue"
                        },
                        new
                        {
                            IdAddress = "98",
                            Country = "Mozambique",
                            Locality = "Dasiaborough",
                            LocalityCode = "88233-0661",
                            Number = "7740",
                            Street = "Dietrich Land"
                        },
                        new
                        {
                            IdAddress = "99",
                            Country = "Bahamas",
                            Locality = "North Luz",
                            LocalityCode = "10174",
                            Number = "33817",
                            Street = "Pablo Valleys"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CESS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bachelier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMatricule")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDispatcher")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdDriver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DriverMatricule");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDispatcher");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Plate");

                    b.HasIndex("IdLicenses");

                    b.ToTable("Vehicules");

                    b.HasData(
                        new
                        {
                            Plate = "URFXJQ1TUXPZ60739",
                            Brand = "Cadillac",
                            IdLicenses = 2,
                            Model = "Countach",
                            Payload = 14000
                        },
                        new
                        {
                            Plate = "BW6TNQVC09YG93085",
                            Brand = "BMW",
                            IdLicenses = 3,
                            Model = "CX-9",
                            Payload = 26000
                        },
                        new
                        {
                            Plate = "8BRQ3YH7ROF188977",
                            Brand = "Honda",
                            IdLicenses = 3,
                            Model = "Focus",
                            Payload = 36000
                        },
                        new
                        {
                            Plate = "ULNKBB3RQ4MA49427",
                            Brand = "Smart",
                            IdLicenses = 2,
                            Model = "XC90",
                            Payload = 11000
                        },
                        new
                        {
                            Plate = "5301RC1BEREE22892",
                            Brand = "Cadillac",
                            IdLicenses = 3,
                            Model = "Altima",
                            Payload = 13000
                        },
                        new
                        {
                            Plate = "CJYEJXE13LN668309",
                            Brand = "Fiat",
                            IdLicenses = 2,
                            Model = "CTS",
                            Payload = 31000
                        },
                        new
                        {
                            Plate = "ZOH1ZRBLOGKO20807",
                            Brand = "Bugatti",
                            IdLicenses = 3,
                            Model = "CX-9",
                            Payload = 3000
                        },
                        new
                        {
                            Plate = "83C9UUGFJSYB17683",
                            Brand = "Chrysler",
                            IdLicenses = 3,
                            Model = "Impala",
                            Payload = 37000
                        },
                        new
                        {
                            Plate = "9T2TMF4KCVL034339",
                            Brand = "Smart",
                            IdLicenses = 1,
                            Model = "LeBaron",
                            Payload = 22000
                        },
                        new
                        {
                            Plate = "ATTWH7Z1XSPE40343",
                            Brand = "Dodge",
                            IdLicenses = 3,
                            Model = "CTS",
                            Payload = 18000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "100",
                            Email = "Wendy.Legros@hotmail.com",
                            FirstName = "Rachelle",
                            Name = "Connelly",
                            Password = "9mwIwKXn6U",
                            CompanyAddressId = "90",
                            CompanyName = "Farrell and Sons",
                            Number = "255-417-4712"
                        },
                        new
                        {
                            Matricule = "101",
                            Email = "Winifred81@yahoo.com",
                            FirstName = "Immanuel",
                            Name = "Koch",
                            Password = "ohnnOJ0wAb",
                            CompanyAddressId = "91",
                            CompanyName = "Zieme - Kuvalis",
                            Number = "877-329-4677"
                        },
                        new
                        {
                            Matricule = "102",
                            Email = "Crawford.Lubowitz33@hotmail.com",
                            FirstName = "Kathryn",
                            Name = "Weber",
                            Password = "FASh9lOR4y",
                            CompanyAddressId = "92",
                            CompanyName = "Collier - Schuster",
                            Number = "736-489-7242"
                        },
                        new
                        {
                            Matricule = "103",
                            Email = "Kayli.Wolff@gmail.com",
                            FirstName = "Yasmeen",
                            Name = "Flatley",
                            Password = "XPmywJoUdc",
                            CompanyAddressId = "93",
                            CompanyName = "Nikolaus LLC",
                            Number = "813-909-7547"
                        },
                        new
                        {
                            Matricule = "104",
                            Email = "Edythe41@gmail.com",
                            FirstName = "Linnie",
                            Name = "Leannon",
                            Password = "2hIqa3zJWB",
                            CompanyAddressId = "94",
                            CompanyName = "Davis Inc",
                            Number = "693-244-7874"
                        },
                        new
                        {
                            Matricule = "105",
                            Email = "Everett_Kub76@yahoo.com",
                            FirstName = "Arthur",
                            Name = "Auer",
                            Password = "3mFRSLJAg_",
                            CompanyAddressId = "95",
                            CompanyName = "Boyle, Padberg and Hessel",
                            Number = "621-338-9814"
                        },
                        new
                        {
                            Matricule = "106",
                            Email = "Maggie23@gmail.com",
                            FirstName = "Suzanne",
                            Name = "Crooks",
                            Password = "ATgwrk2DZM",
                            CompanyAddressId = "96",
                            CompanyName = "Olson - Gislason",
                            Number = "324-429-9083"
                        },
                        new
                        {
                            Matricule = "107",
                            Email = "Pinkie_Glover@hotmail.com",
                            FirstName = "Aaron",
                            Name = "Nader",
                            Password = "oUwdpLm5yM",
                            CompanyAddressId = "97",
                            CompanyName = "Turcotte, Kuphal and Heathcote",
                            Number = "446-861-7263"
                        },
                        new
                        {
                            Matricule = "108",
                            Email = "Trystan20@gmail.com",
                            FirstName = "Easton",
                            Name = "Wisoky",
                            Password = "xAgqBJsVjj",
                            CompanyAddressId = "98",
                            CompanyName = "Schimmel - Jacobson",
                            Number = "963-966-0767"
                        },
                        new
                        {
                            Matricule = "109",
                            Email = "Jayde_Paucek@yahoo.com",
                            FirstName = "Ronaldo",
                            Name = "McGlynn",
                            Password = "wrHpDLFY9l",
                            CompanyAddressId = "99",
                            CompanyName = "Brakus Inc",
                            Number = "452-347-0194"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<int>("IdCertification")
                        .HasColumnType("int");

                    b.HasIndex("IdCertification");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "80",
                            Email = "Willy.Marvin@hotmail.com",
                            FirstName = "Lottie",
                            Name = "Boyer",
                            Password = "0clJ5El73h",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "81",
                            Email = "Jakob_Macejkovic63@yahoo.com",
                            FirstName = "Ephraim",
                            Name = "Schneider",
                            Password = "0c80uHTpLf",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "82",
                            Email = "Marisa_Sawayn@yahoo.com",
                            FirstName = "Sincere",
                            Name = "Greenfelder",
                            Password = "RAXKv4Pm_i",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "83",
                            Email = "Devante_Gorczany74@gmail.com",
                            FirstName = "Vance",
                            Name = "Cummings",
                            Password = "FUZP9xGAut",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "84",
                            Email = "Kiarra_Berge@yahoo.com",
                            FirstName = "Jayce",
                            Name = "Morissette",
                            Password = "KFSsGxrFO8",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "85",
                            Email = "Luciano_Effertz39@gmail.com",
                            FirstName = "Abigale",
                            Name = "Mitchell",
                            Password = "KLqrr0B4ik",
                            IdCertification = 2
                        },
                        new
                        {
                            Matricule = "86",
                            Email = "Scarlett.Glover54@hotmail.com",
                            FirstName = "Josie",
                            Name = "Denesik",
                            Password = "SIbVNAP7ph",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "87",
                            Email = "Victoria44@yahoo.com",
                            FirstName = "Dortha",
                            Name = "Harber",
                            Password = "v6W5jp8hLF",
                            IdCertification = 1
                        },
                        new
                        {
                            Matricule = "88",
                            Email = "Evelyn_Zulauf@gmail.com",
                            FirstName = "Asia",
                            Name = "Waters",
                            Password = "ijmSUw9z16",
                            IdCertification = 3
                        },
                        new
                        {
                            Matricule = "89",
                            Email = "Jordyn82@hotmail.com",
                            FirstName = "Marian",
                            Name = "Mills",
                            Password = "JDRM4_USNp",
                            IdCertification = 2
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "61",
                            Email = "Jillian_Adams@hotmail.com",
                            FirstName = "Brenna",
                            Name = "Murphy",
                            Password = "n0KeaZ9mUS"
                        },
                        new
                        {
                            Matricule = "63",
                            Email = "Amelia28@yahoo.com",
                            FirstName = "Kirk",
                            Name = "Okuneva",
                            Password = "1gryL1J04V"
                        },
                        new
                        {
                            Matricule = "65",
                            Email = "Reynold.Kassulke31@yahoo.com",
                            FirstName = "Blake",
                            Name = "Hintz",
                            Password = "CPndvUpfJK"
                        },
                        new
                        {
                            Matricule = "67",
                            Email = "Garett_Cremin@gmail.com",
                            FirstName = "Rylee",
                            Name = "Schaden",
                            Password = "zHu6eaqLxy"
                        },
                        new
                        {
                            Matricule = "69",
                            Email = "Dillan43@hotmail.com",
                            FirstName = "Morris",
                            Name = "Zboncak",
                            Password = "AxouTcnvKU"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Dina_Bashirian@gmail.com",
                            FirstName = "Virginie",
                            Name = "Shanahan",
                            Password = "BDA8uyLPnk"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Hayley.Yost@gmail.com",
                            FirstName = "Yvette",
                            Name = "Harber",
                            Password = "LKAWkGoC7x"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Issac.Littel@hotmail.com",
                            FirstName = "Madelyn",
                            Name = "Koch",
                            Password = "SJ6nzn0DOJ"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Brielle.Davis@hotmail.com",
                            FirstName = "Cielo",
                            Name = "Ullrich",
                            Password = "NaRqozKys9"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Skye.Hodkiewicz@hotmail.com",
                            FirstName = "Cierra",
                            Name = "Adams",
                            Password = "YSLB4dgcbJ"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Delivery", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany("Deliverys")
                        .HasForeignKey("DriverMatricule");

                    b.HasOne("HELMo_bilite.Models.Client", "Client")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.Dispatcher", "Dispatcher")
                        .WithMany("Deliverys")
                        .HasForeignKey("IdDispatcher");

                    b.Navigation("Client");

                    b.Navigation("Dispatcher");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany()
                        .HasForeignKey("IdLicenses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("IdCertification")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Deliverys");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.Navigation("Deliverys");
                });
#pragma warning restore 612, 618
        }
    }
}
