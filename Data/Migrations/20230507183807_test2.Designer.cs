// <auto-generated />
using System;
using HELMo_bilite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HELMo_bilite.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230507183807_test2")]
    partial class test2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.Property<string>("DriversMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("DriversMatricule", "LicensesId");

                    b.HasIndex("LicensesId");

                    b.ToTable("DriverLicense");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Address", b =>
                {
                    b.Property<string>("IdAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAddress");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            IdAddress = "60",
                            Country = "China",
                            Locality = "South Oceanehaven",
                            LocalityCode = "71414-2106",
                            Number = "31801",
                            Street = "Ratke Points"
                        },
                        new
                        {
                            IdAddress = "61",
                            Country = "Faroe Islands",
                            Locality = "Elvabury",
                            LocalityCode = "93343-9945",
                            Number = "1077",
                            Street = "Ralph Brooks"
                        },
                        new
                        {
                            IdAddress = "62",
                            Country = "Albania",
                            Locality = "Cindyside",
                            LocalityCode = "32601",
                            Number = "4421",
                            Street = "Harvey Underpass"
                        },
                        new
                        {
                            IdAddress = "63",
                            Country = "Saint Pierre and Miquelon",
                            Locality = "Walkerfurt",
                            LocalityCode = "46645",
                            Number = "029",
                            Street = "Kling Divide"
                        },
                        new
                        {
                            IdAddress = "64",
                            Country = "Mozambique",
                            Locality = "Hughborough",
                            LocalityCode = "73932",
                            Number = "180",
                            Street = "Runolfsson Road"
                        },
                        new
                        {
                            IdAddress = "65",
                            Country = "Turkey",
                            Locality = "Jaceborough",
                            LocalityCode = "62353",
                            Number = "29520",
                            Street = "Geovanny Plains"
                        },
                        new
                        {
                            IdAddress = "66",
                            Country = "Andorra",
                            Locality = "North Rigoberto",
                            LocalityCode = "81207",
                            Number = "08814",
                            Street = "Leone Prairie"
                        },
                        new
                        {
                            IdAddress = "67",
                            Country = "Uruguay",
                            Locality = "Framiville",
                            LocalityCode = "83956-4151",
                            Number = "91280",
                            Street = "Lakin Crossroad"
                        },
                        new
                        {
                            IdAddress = "68",
                            Country = "Nicaragua",
                            Locality = "Laurianebury",
                            LocalityCode = "09757-4744",
                            Number = "3839",
                            Street = "Corkery Meadows"
                        },
                        new
                        {
                            IdAddress = "69",
                            Country = "Comoros",
                            Locality = "New Ulises",
                            LocalityCode = "31357-7242",
                            Number = "5382",
                            Street = "Desiree Underpass"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DispatcherMatricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DispatcherMatricule");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "B"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CE"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.User", b =>
                {
                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matricule");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Role").HasValue("User");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLicenses")
                        .HasColumnType("int");

                    b.Property<int>("LicensesId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payload")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Plate");

                    b.HasIndex("LicensesId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HELMo_bilite.Models.Admin", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Matricule = "-1",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Name = "Admin",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.Property<string>("CompanyAddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyAddressId");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Matricule = "70",
                            Email = "Heber_Rodriguez@hotmail.com",
                            FirstName = "Melvin",
                            Name = "Rath",
                            Password = "EM0U6J7Bry",
                            CompanyAddressId = "60",
                            CompanyName = "Leuschke - Leffler",
                            Number = "280-623-5988"
                        },
                        new
                        {
                            Matricule = "71",
                            Email = "Fermin.Becker35@hotmail.com",
                            FirstName = "Hester",
                            Name = "Mitchell",
                            Password = "Ei2CJxhhOQ",
                            CompanyAddressId = "61",
                            CompanyName = "Treutel, Torphy and Parisian",
                            Number = "723-283-2272"
                        },
                        new
                        {
                            Matricule = "72",
                            Email = "Hudson35@hotmail.com",
                            FirstName = "Eliseo",
                            Name = "Labadie",
                            Password = "9W0b6xwdcE",
                            CompanyAddressId = "62",
                            CompanyName = "Hilpert LLC",
                            Number = "893-890-0860"
                        },
                        new
                        {
                            Matricule = "73",
                            Email = "Sage.Shanahan@gmail.com",
                            FirstName = "Doyle",
                            Name = "Jakubowski",
                            Password = "4q77YdrCqU",
                            CompanyAddressId = "63",
                            CompanyName = "Lockman, Crist and Turner",
                            Number = "430-582-0595"
                        },
                        new
                        {
                            Matricule = "74",
                            Email = "Marge74@yahoo.com",
                            FirstName = "Amanda",
                            Name = "Hodkiewicz",
                            Password = "tdcHHBS0QU",
                            CompanyAddressId = "64",
                            CompanyName = "Schuppe, Waters and Friesen",
                            Number = "810-202-6198"
                        },
                        new
                        {
                            Matricule = "75",
                            Email = "Orie.Walter62@gmail.com",
                            FirstName = "Clifton",
                            Name = "Deckow",
                            Password = "ScyOwgukB5",
                            CompanyAddressId = "65",
                            CompanyName = "Price, Stark and Volkman",
                            Number = "383-974-2568"
                        },
                        new
                        {
                            Matricule = "76",
                            Email = "Ahmad.Strosin38@gmail.com",
                            FirstName = "Francesco",
                            Name = "Goyette",
                            Password = "1JUknVV6h8",
                            CompanyAddressId = "66",
                            CompanyName = "Russel - Dach",
                            Number = "227-445-8065"
                        },
                        new
                        {
                            Matricule = "77",
                            Email = "Oral_Hoppe33@gmail.com",
                            FirstName = "Odie",
                            Name = "Willms",
                            Password = "b0aLzke8aJ",
                            CompanyAddressId = "67",
                            CompanyName = "Von and Sons",
                            Number = "552-787-6932"
                        },
                        new
                        {
                            Matricule = "78",
                            Email = "Carey_Reichert@gmail.com",
                            FirstName = "Modesta",
                            Name = "Christiansen",
                            Password = "ersIwdvCtp",
                            CompanyAddressId = "68",
                            CompanyName = "Cummerata Group",
                            Number = "892-526-6511"
                        },
                        new
                        {
                            Matricule = "79",
                            Email = "Holly_Dicki0@gmail.com",
                            FirstName = "Zoey",
                            Name = "Ortiz",
                            Password = "35ImMmQSag",
                            CompanyAddressId = "69",
                            CompanyName = "Lind Group",
                            Number = "934-698-2229"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Dispatcher");

                    b.HasData(
                        new
                        {
                            Matricule = "50",
                            Email = "Eloisa72@hotmail.com",
                            FirstName = "Ava",
                            Name = "Lowe",
                            Password = "dpxdjnK3GA"
                        },
                        new
                        {
                            Matricule = "51",
                            Email = "Hazle.Swaniawski44@gmail.com",
                            FirstName = "Lilla",
                            Name = "Bednar",
                            Password = "U0kuysYVht"
                        },
                        new
                        {
                            Matricule = "52",
                            Email = "Clarissa80@hotmail.com",
                            FirstName = "Nat",
                            Name = "Rosenbaum",
                            Password = "f_6OfP7WG4"
                        },
                        new
                        {
                            Matricule = "53",
                            Email = "Gerhard_Osinski@hotmail.com",
                            FirstName = "Alexane",
                            Name = "Metz",
                            Password = "TCkeEvk4L9"
                        },
                        new
                        {
                            Matricule = "54",
                            Email = "Nannie.Schuppe29@gmail.com",
                            FirstName = "Cesar",
                            Name = "Tillman",
                            Password = "yOZ9qMn1I4"
                        },
                        new
                        {
                            Matricule = "55",
                            Email = "Orion_Hettinger@yahoo.com",
                            FirstName = "Max",
                            Name = "Beier",
                            Password = "6Id6PI1bkC"
                        },
                        new
                        {
                            Matricule = "56",
                            Email = "Jovan_Koepp48@yahoo.com",
                            FirstName = "Alvena",
                            Name = "Hoppe",
                            Password = "pLgu8DUc6n"
                        },
                        new
                        {
                            Matricule = "57",
                            Email = "Leanne_Metz90@hotmail.com",
                            FirstName = "Judd",
                            Name = "Keebler",
                            Password = "2h6UIn54EU"
                        },
                        new
                        {
                            Matricule = "58",
                            Email = "Corrine.OConnell@gmail.com",
                            FirstName = "Ressie",
                            Name = "Armstrong",
                            Password = "ckkm8GTpxh"
                        },
                        new
                        {
                            Matricule = "59",
                            Email = "Murphy7@gmail.com",
                            FirstName = "Trevion",
                            Name = "Sporer",
                            Password = "WhA2yPC3KY"
                        });
                });

            modelBuilder.Entity("HELMo_bilite.Models.Driver", b =>
                {
                    b.HasBaseType("HELMo_bilite.Models.User");

                    b.HasDiscriminator().HasValue("Driver");

                    b.HasData(
                        new
                        {
                            Matricule = "40",
                            Email = "Ellis_Kozey@gmail.com",
                            FirstName = "Verna",
                            Name = "Upton",
                            Password = "Ru4latlJFc"
                        },
                        new
                        {
                            Matricule = "41",
                            Email = "Muhammad_Fadel92@yahoo.com",
                            FirstName = "Arch",
                            Name = "Baumbach",
                            Password = "Ao5ZlGGlAL"
                        },
                        new
                        {
                            Matricule = "42",
                            Email = "Vivian_Bode2@gmail.com",
                            FirstName = "Colin",
                            Name = "Frami",
                            Password = "dEO4JdOkXd"
                        },
                        new
                        {
                            Matricule = "43",
                            Email = "Jay.Schuppe66@gmail.com",
                            FirstName = "Levi",
                            Name = "Macejkovic",
                            Password = "XrCDN06FB7"
                        },
                        new
                        {
                            Matricule = "44",
                            Email = "Marianne.Kiehn45@gmail.com",
                            FirstName = "Coby",
                            Name = "Fay",
                            Password = "A1CvioS5rO"
                        },
                        new
                        {
                            Matricule = "45",
                            Email = "Julian.Hodkiewicz@yahoo.com",
                            FirstName = "Dejuan",
                            Name = "Glover",
                            Password = "sKjv9BeiBs"
                        },
                        new
                        {
                            Matricule = "46",
                            Email = "Aubree86@yahoo.com",
                            FirstName = "Eloy",
                            Name = "Jakubowski",
                            Password = "zdsPDRyz5t"
                        },
                        new
                        {
                            Matricule = "47",
                            Email = "Alyce48@gmail.com",
                            FirstName = "Mireya",
                            Name = "Baumbach",
                            Password = "1oncDBbfOd"
                        },
                        new
                        {
                            Matricule = "48",
                            Email = "Rolando_Jacobson58@yahoo.com",
                            FirstName = "Raoul",
                            Name = "Bogisich",
                            Password = "u7j2AHvkhD"
                        },
                        new
                        {
                            Matricule = "49",
                            Email = "Arden.Connelly@gmail.com",
                            FirstName = "Ignatius",
                            Name = "Leannon",
                            Password = "bAkSPXdDis"
                        });
                });

            modelBuilder.Entity("DriverLicense", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriversMatricule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HELMo_bilite.Models.License", null)
                        .WithMany()
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Certification", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Dispatcher", null)
                        .WithMany("Certifications")
                        .HasForeignKey("DispatcherMatricule");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Vehicule", b =>
                {
                    b.HasOne("HELMo_bilite.Models.License", "Licenses")
                        .WithMany("Vehicules")
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HELMo_bilite.Models.Client", b =>
                {
                    b.HasOne("HELMo_bilite.Models.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HELMo_bilite.Models.License", b =>
                {
                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("HELMo_bilite.Models.Dispatcher", b =>
                {
                    b.Navigation("Certifications");
                });
#pragma warning restore 612, 618
        }
    }
}
